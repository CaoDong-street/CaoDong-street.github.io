<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PS论文(2)</title>
      <link href="/2021/11/12/ps-lun-wen-2/"/>
      <url>/2021/11/12/ps-lun-wen-2/</url>
      
        <content type="html"><![CDATA[<p>论文地址：<a href="https://rss2017.lids.mit.edu/static/papers/31.pdf">Fast Trajectory Optimization for Agile Quadrotor Maneuvers with a Cable-Suspended Payload</a></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文提出了一种新型的绳载负载的四旋翼系统的动力学模型和快速轨迹优化算法，贡献如下：</p><ol><li>提出一个定义新型的悬挂负载行为的公式。其被建模为连接到四旋翼与两个转动关节和一个移动关节的组合，上述关节都是被动的。与当前的工作不同，我们不需要根据缆绳张力使用混合模式来确定模型。</li><li>提出了一种基于上述系统模型的快速轨迹优化算法。我们所提出的模型使我们能够将轨迹优化问题作为一个带互补约束的数学程序(MPCC， Mathematical Program with Complementarity Constraints)。在这个框架中，系统的期望行为(例如，避障)可以很容易地表述出来。</li></ol><p>提出的框架的具体优势</p><ol><li>在速度方面优于最先进的技术，而不限制轨道的复杂性;</li><li>提供参数化不同任务的简单方法;</li><li>根据系统动力学和控制输入边界，保证轨迹的可行性。</li></ol><p>实验简述：</p><p>本文所提出的方法在计算速度方面优于目前的技术水平，并且在系统动力学和控制输入饱和方面保证了轨迹的可行性，同时使用更少的优化参数。</p><p>我们在一个真实的四旋翼飞行器上实验验证了我们的方法，表明我们的方法适用于各种任务，如飞行通过理想的航路点，同时避免障碍物，或向理想的目标投掷有效载荷。</p><p>据我们所知，这是第一次在绳载负载的四旋翼飞行器上实现了基于系统动力学的三维灵活运动，如图1所示。</p><p><img src="https://tvax4.sinaimg.cn/large/007mx13gly1gwdb7xsotnj30ew06zgoo.jpg" alt="我们的四旋翼飞行轨迹通过多个航路点，同时通过缆索悬挂运输负载。"></p><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h2><h3 id="A-动机"><a href="#A-动机" class="headerlink" title="A 动机"></a>A 动机</h3><p>部分或完全驱动的操作器已经被用于空中操纵，可以将它们安装在四旋翼上进行操作。虽然这种解决方案适用于精细操作和与环境的交互，但它有一些缺点(例如，能源损耗、整体平台的大小、额外的惯性)，降低了无人机的灵活性。相反，通过绳载负荷的方式显著降低了系统的机械复杂性和重量，并且不需要额外的驱动，因此所需的能量最小。与驱动机械臂方法相比，绳载系统在系统动力学建模和参数化特定行为以完成预期任务方面引入了各种挑战。</p><p>缆绳张力的变化极大地改变了动力学描述，因为载荷可以通过缆绳将力传递给车辆，这取决于缆绳是否绷紧。通常引入一种混合动力学模型来处理系统的变化结构，根据拉索张力的不同有不同的数学描述(也称为模式)。这为系统提供了准确的描述，但使轨迹优化难以求解。实际上，混合优化会使用非常昂贵的计算性能，并且需要通过轨迹预先确定所需的模式序列。此外，这种公式通常会导致在为关键的安全功能(如缆绳缠绕)指定凸约束时遇到困难，并需要复杂的特定任务参数调整。此外，考虑工作空间，如在一组约束条件下考虑障碍物是困难的，并给轨迹优化带来额外的挑战。</p><h3 id="B-相关工作"><a href="#B-相关工作" class="headerlink" title="B 相关工作"></a>B 相关工作</h3><p>针对无人机绳载负荷的最新技术大致可分为两种方法:</p><ol><li>跟踪负载期望轨迹的反馈控制。(对象是负载位置)</li><li>绳载负荷的四旋翼飞行器的轨迹规划。(对象是四旋翼位置)</li></ol><p>本文主要使用的是第二种方法。</p><p>一种可能的解决方案是使运输载荷的摆动行为最小化。减少有效载荷的摆动会导致次优结果，因为它没有能量效率(四旋翼必须抵消有效载荷的摆动运动)，而且它没有利用系统动力学，阻止了高速敏捷的运动。</p><p>利用系统摆动动力学的敏捷导航轨迹规划也已进行了研究。虽然已经取得了令人印象深刻的成果，但仍有一些挑战尚未解决。已经提出了快速的轨迹计算方法，但往往不采用最优准则，不允许系统通过轨迹的行为约束或表示手动计算的系统状态硬约束。诸如航路点导航或避障等任务通常需要大量的参数，这些参数必须由专家操作人员手工调整，并显著影响系统的性能和所需的计算时间(例如，为每个障碍引入一个整数变量会成倍地增加问题的复杂性)。混合模式通常需要事先确定准确的模式序列。这迫使优化器沿着可能不是最优的单模态序列限制运动，并需要耗时的优化才能达到令人满意的结果。保证闭环系统性能的一个关键方面是计算轨迹的可行性。微分平坦度[ ]常被用来规划平滑的多项式轨迹，使基于系统输入的成本函数最小化，但不保证电机输入饱和。最后，其目前工作实验结构结果仅在仿真中显示，或在现实世界中仅限于二维运动的实验中显示。(参考文献<a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=6631275&amp;tag=1">Trajectory generation and control of a quadrotor with a cable-suspended load-a differentially-flat hybrid system</a>；<a href="https://ieeexplore.ieee.org/document/7139492">Mixed Integer Quadratic Program trajectory generation for a quadrotor with a cable-suspended payload </a>；<a href="https://ieeexplore.ieee.org/document/7171008">Lift of a cable-suspended load by a quadrotor: A hybrid system approach</a>；<a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.713.8121"> Unified Motion Control for Dynamic Quadrotor Maneuvers Demonstrated on Slung Load and Rotor Failure Tasks </a>)</p><h2 id="2-问题公式化"><a href="#2-问题公式化" class="headerlink" title="2 问题公式化"></a>2 问题公式化</h2><h3 id="A-系统动力学的公式"><a href="#A-系统动力学的公式" class="headerlink" title="A 系统动力学的公式"></a>A 系统动力学的公式</h3><p>大多数在绳载负载的空中操作都采用一种混合方法，根据缆索的张力建立两种模式的系统模型。在第一种模式中，缆绳完全绷紧并在四旋翼和负载之间传递力;在第二种模式中，缆绳是松弛的，导致有效载荷服从自由落体动力学。这使得轨迹优化成为一个复杂的问题，因为需要混合轨迹优化，并且系统状态约束通常是非凸的。</p><p>相反地，我们引入了一种新颖而简单绳载负载的四旋翼系统参数化方法。我们通过一个由三个被动约束关节(两个转动关节和一个移动关节)组成的系统将负载建模为附着在四旋翼悬架基座上的质量点。通过利用关节限制的棱柱关节<em>ρ</em>模拟了绳载负载系统的混合模式。在<em>ρ</em>处于极限状态时，反作用力通过关节传输回悬挂基座。<u>(好像是把缆绳和负载当做机器臂的关节处理)</u>我们模型中的广义坐标如表1和图2所示：</p>$$${q_{coord}} = {\left[ {x,y,z,\phi ,\theta ,\psi ,\eta ,\mu ,\rho } \right]^T} \tag{1}$$<p>动力学可以被描述为一个二阶系统或使用如<a href="https://link.springer.com/book/10.1007/978-1-84628-642-1">Robotics | SpringerLink</a>所述的欧拉-拉格朗日方程，得到类似<a href="https://www.sciencedirect.com/science/article/pii/S1474667016336928">Cartesian Impedance Control of a UAV with a Robotic Arm - ScienceDirect</a>的公式:</p>$$H(q)\ddot q + C(q,\dot q) + G(q) = B(q)u \tag{2}$$<p>其中$q = \left[ {{q_{coord}},{{\dot q}_{coord}}} \right]$</p><p><img src="https://tvax3.sinaimg.cn/large/007mx13gly1gwdb9vb1gvj30c10alwfl.jpg" alt="模型描述和整体结构"></p><p><img src="https://tvax3.sinaimg.cn/large/007mx13gly1gwf0qtvzfvj30to07jjvs.jpg" alt="表1 绳载负载的四旋翼系统的变量"></p><h3 id="B-轨迹优化问题"><a href="#B-轨迹优化问题" class="headerlink" title="B 轨迹优化问题"></a>B 轨迹优化问题</h3><p>我们提出的轨迹优化问题如下：</p>$${\text{find }}\ddot q{\text{ subjiect to}}$$$$H(q)\ddot q + C(q,\dot q) + G(q) = B(q)u \tag{3}$$$$f(q,u) \geqslant 0 \tag{4}$$<p>该轨迹被划分为N个时间节点，其中系统动力学包括一个直接转化方式。我们决定使用直接方法<a href="https://www.researchgate.net/publication/230872953_Direct_Trajectory_Optimization_Using_Nonlinear_Programming_and_Collocation">(PDF) Direct Trajectory Optimization Using Nonlinear Programming and Collocation </a>，因为它在数值上优于其他技术，如射击方法<a href="https://link.springer.com/chapter/10.1007/978-3-642-36279-8_32">Direct Trajectory Optimization of Rigid Body Dynamical Systems through Contact </a>。此外，尽管它们会导致更大的优化问题，但这些问题是稀疏的，可以非常快地解决。</p><p>我们使用一阶欧拉逼近将动力学化作时间步长<em>q</em>(<em>n</em>)和<em>q</em>(<em>n</em>+ 1)之间的等式约束。这种等式约束通过最小化缺陷变量${\zeta _n}$被定义为:</p>$${\zeta _n} = q(n + 1) - q(n) - dt(n)\dot q(n) \tag{5}$$<p>这种一阶近似是可能的最简单的积分方案，因此可以得到有效的计算。此外，它得到了一个定义良好的非线性问题的近似，可以提供给求解器及其梯度。</p><h3 id="C-将绳载负载的四旋翼运动问题视作MPCC问题"><a href="#C-将绳载负载的四旋翼运动问题视作MPCC问题" class="headerlink" title="C 将绳载负载的四旋翼运动问题视作MPCC问题"></a>C 将绳载负载的四旋翼运动问题视作MPCC问题</h3><p>我们将这个特殊问题作为一个带互补约束的数学程序(Mathematical Program<br>with Complementarity Constraint,MPCC),如下：</p>$$\eqalign{  &amp; \min {\text{ }}L(q,\dot q,u,t){\text{ subject to}}  \cr   &amp; H(q)\ddot q + C(q,\dot q) + G(q) = B(q)u + J{(q)^T}\lambda ,  \cr   &amp; f(q,u) \geqslant 0,  \cr   &amp; \phi (q) = ({l_0} - \rho ) \geqslant 0,  \cr   &amp; \lambda  \geqslant 0,  \cr   &amp; \phi (q)\lambda  = 0 \cr} \tag{6}$$<p>接下来，我们介绍MPCC的成本函数和所有的约束。</p><ol><li><p>成本函数公式：</p><p>我们基于状态、输入和时间构建成本函数如下<br>$$L(q,u,t) = {S_f}{t_f} + \int_t {q{{(t)}^T}Qq(t)}  + u{(t)^T}Ru(t)dt  \tag{7}$$   其中，   ${S_f}$为终止时间系数，*Q*和*R*是状态和输入对应的对角正定代价矩阵，维度分别为${\mathbb{R}^{18 \times 18}}$和${\mathbb{R}^{4 \times 4}}$。<br>通过将代价描述为具有终止时间代价的状态和输入的二次函数，我们减少了优化参数的数量，并利用了优化中的解析导数。(成本函数中的q和公式中的q有矛盾？)</p></li><li><p>线性互补约束：<br>用一个互补约束来模拟缆绳长度的限制，即把缆绳长度当作一个关节的限制。该约束公式与<a href="https://link.springer.com/chapter/10.1007/978-3-642-36279-8_32">Direct Trajectory Optimization of Rigid Body Dynamical Systems through Contact | （这篇文章中的公式与本文中的很相似）</a>中提出的约束公式类似，其形式如下：</p>$$\eqalign{     &amp; \phi (q) = ({l_0} - \rho ) \ge 0  \cr      &amp; \lambda  \ge 0,  \cr      &amp; \phi (q)\lambda  = 0 \cr} $$<p>$\phi (q)$为${l_0}$的突破约束；<br>λ为表示约束力的决定变量；<br>$\phi (q)\lambda  = 0$为实现了两者的互补约束。</p></li><li><p>输入限制约束:<br>我们考虑到驱动系统的物理限制，对每个电机提供的推力施加一个上限和下限:</p>$${T_{\min }} \leqslant u \leqslant {T_{\max }} \tag{9}$$</li><li><p>关节限制约束：<br>限制了四旋翼和负载之间的最大角度以防止负载缆索进入旋翼。</p>${\alpha _{\min }} \leqslant \eta ,\mu  \leqslant {\alpha _{\max }} \tag{10}$</li><li><p>避障：<br>为了简化避障，我们在工作空间中将障碍物建模为球体，并使用与<a href="https://ieeexplore.ieee.org/abstract/document/5152817">CHOMP: Gradient optimization techniques for efficient motion planning</a>相似但使用经过简化的带符号距离函数。因此，绳载负载的四旋翼系统与障碍物之间的距离可以约束为:</p>$$d(q(t)) = \sqrt {{{(p(t) - o)}^T}(p(t) - o)}  - \rho (t) - r \tag{11}$$   其中$p(t) = {\left[ {x(t),y(t),z(t)} \right]^T}$是四旋翼的位置，$o = {[{x_o},{y_o},{z_o}]^T}$为半径为*r*的障碍物位置。描述带符号距离的方法同样适用于无数个圆柱形障碍物，其中距离函数为:   $$\eqalign{     &amp; {r_{op}}(t) = (p(t) - o) - (p(t - o) \cdot n) \cdot n  \cr      &amp; d(q(t)) = \sqrt {{r_{op}}{{(t)}^T}{r_{op}}(t)}  - \rho (t) - r \cr} \tag{12}$$<p>其中<em>n</em>为对称轴。这个函数可以作为一个不等式约束，因此，执行一个保守但安全的轨迹，实现无人机本体、负载、缆绳和障碍物之间的碰撞。从而就不需要任何模态序列或混合模型。</p></li></ol><h3 id="D-实现特定任务"><a href="#D-实现特定任务" class="headerlink" title="D 实现特定任务"></a>D 实现特定任务</h3><p>在本节中，我们将展示如何将优化问题的一般公式用于特定的任务，如航点导航和向预期目标投掷负载。</p><ol><li><p>航点导航：<br>航点导航任务可以描述为前三个状态变量$p(n) = {\left[ {x(n),y(n),z(n)} \right]^T}$(<em>n</em>为系统的给点时间点)的边界框约束。为了算法的鲁棒性，我们不使用等式约束，而是允许一个路径点存在很小的容许误差δ，不等式约束如下:</p>$${p_{w,i}} - \delta  \leqslant p(n) \leqslant {p_{w,i}} + \delta \tag{13}$$<p>此外，还可以设置负载的位置，因为它是在系统状态中是完全定义的。</p></li><li><p>负载投掷:<br>投掷运动的目标是：释放负载，使其落向给定的目标。释放后，负载将遵循一个弹道轨迹，其最终位置可以被限制在期望的目标位置周围的一个给定的阈值内。</p>${p_r} = \left[ {{x_r},{y_r},{z_r}} \right]$为释放负载瞬间的负载在世界坐标系下的负载位置，${{\dot p}_r}$为释放负载瞬间的负载在世界坐标系下的负载速度。${p_t} = \left[ {{x_t},{y_t},{z_t}} \right]$为目标位置。${p_h}$为无人机处于期望高度时在弹道轨迹中的位置。需要注意${p_r},{{\dot p}_r}$可以通过$q(t)$和正向运动学雅克比矩阵$J(q(t))$的乘积得到(${{\dot p}_r} = J(q(t))\dot q(t)$).   $$\eqalign{     &amp; {t_1} = \left\{ \matrix{     {{{{\dot z}_r}} \over g}{\rm{,  }}{{\dot z}_r} &gt; 0 \hfill \cr      0{\rm{, }}{{\dot z}_r} \le 0 \hfill \cr}  \right.  \cr      &amp; {z_{\max }} = {z_r} + {{\dot z}_r}{t_1} - g{{t_2^2} \over 2}  \cr      &amp; {t_2} = {t_1} + \sqrt {{{2({z_{\max }} - {z_t})} \over g}}   \cr      &amp; {p_h} = {p_r} + {{\dot p}_r}{t_2} + \left[ {0,0, - g} \right]{{t_2^2} \over 2} \cr} \tag{14}$$   其中，${t_1}$为载体自由落体抛物运动达到峰值的时间，${t_2}$为载体到达期望高度的时间   此外，我们施加以下约束:   $$0 \le \left\| {{p_h} - {p_t}} \right\| \le {d_{\max }} \tag{15}$$<p>${d_{\max }}$为所允许的与目标位置的最大距离。这个公式的优点是，我们不限制释放的位置，而是让优化过程找到它的最佳值。</p></li></ol><h2 id="3-实验过程简介"><a href="#3-实验过程简介" class="headerlink" title="3 实验过程简介"></a>3 实验过程简介</h2><p>用于实验的四旋翼系统的参数。</p><div class="table-container"><table><thead><tr><th style="text-align:center">无人机质量</th><th>0.76kg</th></tr></thead><tbody><tr><td style="text-align:center">负载质量</td><td>0.084kg</td></tr><tr><td style="text-align:center">磁力抓取器质量</td><td>0.062kg</td></tr><tr><td style="text-align:center">无人机臂长</td><td>0.22m</td></tr><tr><td style="text-align:center">缆绳长度</td><td>0.82m</td></tr><tr><td style="text-align:center">负载角度限制</td><td>-60度/+60度</td></tr><tr><td style="text-align:center">推力限制</td><td>1N/5N</td></tr></tbody></table></div><p>未完待更新~~~</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无人机 </tag>
            
            <tag> PS论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PS论文(1)</title>
      <link href="/2021/11/08/ps-lun-wen-1/"/>
      <url>/2021/11/08/ps-lun-wen-1/</url>
      
        <content type="html"><![CDATA[<p>对应文章地址：<a href="https://www.researchgate.net/publication/330591165_Decentralized_Motion_Control_in_a_Cabled-based_Multi-drone_Load_Transport_System">Decentralized Motion Control in a Cabled-based Multi-drone Load Transport System</a></p><h2 id="1-摘要"><a href="#1-摘要" class="headerlink" title="1 摘要"></a>1 摘要</h2><p>提出了一种可证明稳定的<a href="https://zhuanlan.zhihu.com/p/45346771">分散式控制方案</a>，允许多架传统四轴飞行器通过缆绳悬挂携带负载。该方法利用无人机、缆绳和负载组成的系统的基本<a href="?">能量无源性</a>，稳定地将负载从原点移动到目的地。这是在不假设飞行期间缆绳张力的状态以及不对负载的进行任何测量的情况下实现的。  因为反馈测量的无人机之间的通信是不需要的，所以控制器是分散的。通过李雅普诺夫法分析证明了运动的稳定性。所提出的控制器使用光学跟踪系统和无人机机载 IMU 的测量数据成功地在室内环境中的三无人机负载运输系统上实施。</p><h2 id="2-引言"><a href="#2-引言" class="headerlink" title="2 引言"></a>2 引言</h2><h3 id="运输方案方案对比"><a href="#运输方案方案对比" class="headerlink" title="运输方案方案对比"></a>运输方案方案对比</h3><p>小型多旋翼无人机的缺点：运输负载质量受限，飞行时间短。</p><p>可以通过增加动力单元数目以及电池大小，可以提高负载上限以及相应的飞行时间。从而设计出大型多旋翼无人机。</p><p>但大型多旋翼无人机也存在缺点：在运送较小的物品时效率会非常低，在狭窄的环境中的运动也更不灵活，更难控制。</p><p>而另外一种运输负载的方式：多无人机运输有效解决了上述两种运输方式存在的问题:根据负载的重量和大小调整无人机数目。</p><h3 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h3><p>本文提出了一种简单有效的运动控制方法，用于多架无人机携带缆绳悬吊载荷的控制。该系统除了具有可扩展性外，还因为其固有的冗余性而具有更强的容错能力。有一些有限的工作在多旋翼无人机的运动控制与缆索或刚性连杆悬挂负载在单一或多无人机配置。在<a href="https://ieeexplore.ieee.org/document/7843619">Geometric Control of Quadrotor UAVs Transporting a Cable-Suspended Rigid Body</a>中研究了多架四轴飞行器通过连接刚性连杆承载载荷的几何控制问题。虽然使用刚性连杆可以简化控制设计，但它限制了这种系统在航空运输中的实际用途。同时，这篇文章仅给出了仿真结果。</p><p>在<a href="https://link.springer.com/article/10.1007/s10514-017-9632-2">Cable-suspended load lifting by a quadrotor UAV: hybrid model, trajectory generation, and control </a>中给出了具有点质量负载的单四轴飞行器的混合模型，其轨迹设计使负载的摆动最小化，这篇文章进行了实验验证，但缺少稳定性的证明。在<a href="https://ieeexplore.ieee.org/document/8038248">Cable-suspended load lifting by a quadrotor UAV: hybrid model, trajectory generation, and control </a>中，基于点质量负载的单四轴飞行器的拉格朗日动力学模型，利用缆绳始终处于张力状态的假设，提出了一种控制器。然而，这篇文章所提出的控制器无法保证该假设在包含起飞和降落过程的任意轨迹上的有效性。</p><p>除了缆绳的灵活性外，无人机-负载系统的运动控制也因无人机的固有欠驱动而变得复杂<a href="https://ieeexplore.ieee.org/document/7353620">Adaptive motion control of aerial robotic manipulators based on virtual decomposition </a>，而悬挂负载的加入进一步加剧了这一问题<a href="https://ieeexplore.ieee.org/document/8038248">Nonlinear Hierarchical Control for Unmanned Quadrotor Transportation Systems </a>。在控制工程文献中，这个问题一般被认为是<a href="https://zhuanlan.zhihu.com/p/106492555">双欠驱动系统</a>的轨迹跟踪问题。<a href="https://ieeexplore.ieee.org/document/8038248">Nonlinear Hierarchical Control for Unmanned Quadrotor Transportation Systems</a>和<a href="https://www.researchgate.net/publication/272352741_Health_Healthcare_Access_and_Use_of_Traditional_Versus_Modern_Medicine_in_Remote_Peruvian_Amazon_Communities_A_Descriptive_Study_of_Knowledge_Attitudes_and_Practices">Quadcopter design for medicine transportation in the peruvian amazon rainforest</a>中提出的方法考虑的是固定的期望位置。在<a href="https://ieeexplore.ieee.org/abstract/document/6631275">Trajectory generation and control of a quadrotor with a cable-suspended load - A differentially-flat hybrid system </a>中，研究了具有点质量负载的单四轴飞行器的运动控制问题。然而，其分析仅限于平面情况。</p><p>本文提出了一种可证明稳定的多轴四轴飞行器的分布式运动控制方法。这种方法的控制思路为：运输应用不需要对负载本身进行非常精确的运动控制，真正重要的是整个控制系统的鲁棒稳定性。比例导数PD控制器可以在不需要精确跟踪的情况下，为传统机械臂提供鲁棒稳定的运动控制，这要归功于控制器和机械臂子系统的<a href="?">能量无源性</a>。事实上，在机器人的控制中，这种无源性已经得到了广泛的应用<a href="https://ieeexplore.ieee.org/document/194594">Adaptive motion control of rigid robots: a tutorial </a>,<br><a href="https://ieeexplore.ieee.org/document/1618740">Passive Bilateral Teleoperation With Constant Time Delay</a>,<br><a href="https://link.springer.com/book/10.1007/978-3-319-15171-7">Passivity-Based Control and Estimation in Networked Robotics（重点，是一本书）</a>。本文提出的运动控制方法依赖于无论缆绳的状态如何，相互连接的无人机负载系统都具有<a href="?">能源被动性</a>的原理。该控制律由系统的无源性启发的李雅普诺夫函数导出，并考虑了无人机的欠驱动性。该控制方案可以使用局部位置/速度测量值以分布式方式在单个无人机上实施，不需要对负载进行的任何测量，也不假设缆绳张力的状态。</p><blockquote><p>摘要中系统控制方案为 decentralized control (分散式控制方案)，而引言中的系统控制方案为distributed motion control(分布式运动控制)。我认为decentralized其实是被distributed所包含的，不用特意区分，具体理解可参考<a href="https://blog.csdn.net/John1688888/article/details/82966807"> “去中心化(分散式)”和“分布式”的区别</a>。</p></blockquote><h2 id="3-系统建模"><a href="#3-系统建模" class="headerlink" title="3  系统建模"></a>3  系统建模</h2><p><img src="https://tva1.sinaimg.cn/large/007mx13gly1gwbfasj40rj309d05wwez.jpg" alt="多无人机运输绳系负载"></p><p>在本文中，我们用上标来表示表示矢量的所在的坐标系。上标’ 0 ‘表示固定的世界坐标系，为了简单起见，去掉了上标。该系统由非传统的四轴飞行器组成，通过柔性绳携带负载，如图1所示。每根缆绳的一端连接到无人机的质心。在系统动力学和控制器的开发中，忽略了缆绳质量。</p><p>根据图1，当缆绳处于张力时，下列运动学约束成立：$${q_i} - {q_L} = {R_L}(r_i^l - {l_i}e_i^l),\forall i \in \{ 1,...,n\} $$ $$\left\| {{q_i} - {q_L} - {R_L}r_i^l} \right\| &lt;  {l_i} $$其中， ${q_i}$和 ${q_L}$分别表示第 ${i}$个无人机质心和负载质心在世界坐标系中的三维位置； ${R_L}$是负载体坐标系(固定在负载上的坐标系)转换为世界坐标系对应的旋转矩阵； ${e_i^l}$是沿着第 ${i}$条缆绳连接且指向负载上相关连接点的单位向量，在负载体坐标系中表示； ${r_i^l}$是载荷的质心连接到第 ${i}$个附着点的矢量，并在负载体坐标系中表示； ${l_i}$表示第 ${i}$个无人机与负载连接的缆绳长度。而四旋翼的移动动力学方程如下所示：$${m_i}{\ddot q_i} = {f_i}{R_i}z - {m_i}gz + {T_i}{R_L}e_i^l$$其中 ${m_i}$， ${f_i}$分别表示无人机质量和推力； $g$为重力加速度； ${T_i}$为缆绳的拉力； ${R_i}$是第 ${i}$个无人机的机体坐标系(固定在四旋翼上的坐标系)转换为世界坐标系对应的旋转矩阵； $z = {\left[ {\matrix{   0 &amp; 0 &amp; 1  \cr  } } \right]^{\rm{T}}}$是在世界坐标系表示的单位向量。</p><p>四旋翼的姿态动力学方程如下所示：</p>$${M_i}({\eta _i}){\ddot \eta _i} + {C_i}({\eta _i},{\dot \eta _i}){\dot \eta _i} = \Psi {({\eta _i})^{\rm{T}}}{{\rm{\tau }}_i}$$<p>其中</p> $${\eta _i} = {\left[ {{\phi _i},{\theta _i},{\psi _i}} \right]^{\rm{T}}}$$$$\eqalign{  &amp; {M_i}({\eta _i}) = \Psi {({\eta _i})^{\rm{T}}}{J_i}\Psi ({\eta _i})  \cr   &amp; {C_i}({\eta _i},{{\dot \eta }_i}) = \Psi {({\eta _i})^{\rm{T}}}{J_i}\Psi ({\eta _i}) -  \Psi {({\eta _i})^{\rm{T}}}sk(\Psi ({\eta _i}){{\dot \eta }_i}){J_i}\Psi ({\eta _i})  \cr   &amp; \Psi ({\eta _i}) = \left[ {\matrix{   1 &amp; 0 &amp; { - \sin ({\theta _i})}  \cr    0 &amp; {\cos ({\phi _i})} &amp; {\cos ({\theta _i})\sin ({\phi _i})}  \cr    0 &amp; {\sin ({\phi _i})} &amp; {\cos ({\theta _i})\cos ({\phi _i})}  \cr  } } \right] \cr} $$ ${J_i}$是四轴飞行器在其固定坐标系中的转动矩阵， $τ$是机体坐标系中的被施加的扭矩。 $sk(·)$是所谓的[斜算子](?)。四旋翼的动力学方程主要参考[核心文章](https://arc.aiaa.org/doi/10.2514/1.43768)（文章推导主要依托的文章）。单刚体负载的移动动力学方程和姿态动力学方程可表示为：$$\eqalign{  &amp; {m_L}{{\ddot q}_L} =  - \sum\limits_{i = 1}^n {{T_i}{R_L}{e_i}}  - {m_L}gz  \cr   &amp; J_L^l\dot \Omega _L^l + sk(\Omega _L^l)J_L^l\Omega _L^l = \sum\limits_{i = 1}^n {sk(r_i^l)( - {T_i}e_i^l)}  \cr} $$<p>其中，其中 $J_L^l$是负载相对于质心的恒定惯量， ${m_L}$是负载的质量，  $\Omega _L^l$在其负载体坐标系中表示的负载的角速度。</p><h2 id="4-控制器设计与稳定性分析"><a href="#4-控制器设计与稳定性分析" class="headerlink" title="4 控制器设计与稳定性分析"></a>4 控制器设计与稳定性分析</h2><h3 id="控制器设计"><a href="#控制器设计" class="headerlink" title="控制器设计"></a>控制器设计</h3><p>控制器设计从单个无人机的姿态控制开始。设 $\det \left( {\Psi \left( {{\eta _i}} \right)} \right) \ne 0$，采用以下反馈线性化控制律:</p>$${{\rm{\tau }}_i} = {(\psi {({\eta _i})^{\rm{T}}})^{ - 1}}({M_i}({\eta _i}){v_i} + {C_i}({\eta _i},{\dot \eta _i}){\dot \eta _i})$$ ${v_i}$的定义如下$${v_i} = {{\ddot \eta }_{{d_i}}} - {K_v}{{\dot e}_{{\eta _i}}} - {K_c}{e_{{\eta _i}}}$$ ${e_{{\eta _i}}}$定义如下$${e_{{\eta _i}}} = {\eta _i} - {\eta _{{d_i}}}$$<p>其中 ${\eta _{{d_i}}}$(<u>原文中的是 ${\eta _{{i}}}$，我怀疑是有错误，因为前文已经定义了 ${\eta _{{i}}}$</u>)为期望姿态将在后文定义。${K_v},{K_c} \in {\mathbb{R}^{3 \times 3}}$为正常量参数，该控制器的控制目标为：</p>$${{\ddot e}_{{\eta _i}}} + {K_v}{{\dot e}_{{\eta _i}}} + {K_c}{e_{{\eta _i}}} = 0,t \ge 0 \tag{9}$$<p>反过来，</p>$$\left\| {{e_{{\eta _i}}}(t)} \right\| \le {k_1}\left\| {{\eta _{{0_i}}}} \right\|\exp ( - \alpha t),t \ge 0$$<p>其中 ${k_1}，\alpha$为正常量。</p><p>空中运输系统的目标是从点A到点B运输负载。为了实现这一目标，为每架无人机分配一个参考虚拟点。控制律将被推导出来，这样无人机就会沿着虚拟点的轨迹从原点到终点。当无人机完全驱动时，简单的比例导数pd控制器作为无人机与参考虚拟点之间的虚拟弹簧阻尼器耦合来实现控制目标。这里提出的控制律是建立在这个简单的概念，且考虑到无人机欠驱动。</p><p>参考虚拟点的轨迹记为${{\dot q}_{{v_i}}}(t) \in {C^2}[0,\infty )$，其中${C^2}$为有一、二阶连续导数的连续实值函数空间。参考虚拟点的轨迹规划细节不在本文讨论范围内，但作以下假设。</p>$$\eqalign{  &amp; {{\dot q}_{{v_i}}} \buildrel \Delta \over = {{\dot q}_v} \in {l_\infty },i \in \{ 1,...,n\}   \cr   &amp; {{\ddot q}_{{v_i}}} \buildrel \Delta \over = {{\ddot q}_v} \in {l_\infty },i \in \{ 1,...,n\}  \cr} $$上述假设简单地暗示了参考虚拟点在飞行过程中保持其空间配置。这将有助于减少无人机之间发生碰撞的可能性。参考虚拟点加速度的选取规则为${{\ddot q}_v} \in {l_1}$和${\lim _{t \to \infty }}{{\ddot q}_v} = 0$。无人机期望推力为<img src="https://tvax3.sinaimg.cn/large/007mx13gly1gwcer09os9j30it01lwek.jpg" style="zoom:50%;">其中，$\tilde q \buildrel \Delta \over = q - {q_{{v_i}}}$，${K_p},{K_d} \in {\mathbb{R}^{3 \times 3}}$为表示虚拟弹簧-阻尼器的刚度和阻尼系数的正定矩阵。然而，考虑到无人机的力欠驱动，实际推力可能不完全遵循期望推力，即$${f_i}R({\eta _i})z = {f_i}R({\eta _{{d_i}}} + {e_{{\eta _i}}})z \buildrel \Delta \over = {f_i}R({\eta _{{d_i}}})z + {f_i}H({\eta _{{d_i}}},{e_{{\eta _i}}}) = {\mu _i} + {f_i}H({\eta _{{d_i}}},{e_{{\eta _i}}})$$<p>其中$H({\eta _{{d_i}}},{e_{{\eta _i}}}) \in {\mathbb{R}^{3}} $，$H({\eta _{{d_i}}},0) = 0$。上面等式的左边表示实际的推力。右手边的第一项是期望推力，第二项是推力误差。根据<a href="https://arc.aiaa.org/doi/10.2514/1.43768">核心文章</a>可以证明</p>$$\left\| {H({\eta _{{d_i}}},{e_{{\eta _i}}})} \right\| \le {k_2}\left\| {{e_{{\eta _i}}}} \right\|,{k_2} \in {\mathbb{R}^{+}}$$<p>三个非线性方程的集合为</p>$${f_i}R({\eta _{{d_i}}})z = {\mu _i} = {\left[ {\matrix{   {{\mu _{{x_i}}}} &amp; {{\mu _{{y_i}}}} &amp; {{\mu _{{z_i}}}}  \cr  } } \right]^{\rm{T}}}$$<p>其中包含四个未知量：推力的大小${f_i}$，三个欧拉角${\eta _{{d_i}}} = {\left[ {{\phi _{{d_i}}},{\theta _{{d_i}}},{\psi _{{d_i}}}} \right]^{\rm{T}}}$,这些方程可以解得拉力${f_i}$，两个欧拉角${{\phi _{{d_i}}}}$和${{\theta _{{d_i}}}}$。而剩下的期望欧拉角而${{\psi _{{d_i}}}}$被选着为线性运动的独立变量。</p><p>注意，从无人机期望推力方程可以得出推力大小满足不等式：</p><p><img src="https://tva2.sinaimg.cn/large/007mx13gly1gwcerbvp0xj30n80243yn.jpg" style="zoom:50%;"></p>${\cal M} \buildrel \Delta \over = \mathop {\max }\limits_{i \in \{ 1,...,n\} } {m_i}$表示编队中最大的无人机质量。#### 稳定性分析稳定性分析是使用<u>李雅普诺夫第二法</u>进行分析的。定义无人机运输系统的能量函数E如下：<img src="https://tvax4.sinaimg.cn/large/007mx13gly1gwceyoalizj30kz0eywg1.jpg" style="zoom:50%;">能量函数非负证明：其中$\mathcal{k}$调整重力势能参考点的正常数，${E_1}$明显大于0。已知${q_{{v_i}}}$的有界性($\left\| {{q_i} - {q_L} - {R_L}r_i^l} \right\| &lt;  {l_i}$)，我们还可以证明${E_2}$是下界的，所以通过选择适当的$\mathcal{k}$可以使${E_2}$非负。能量函数导数小于0证明：不管缆绳的状态如何，联合无人机-缆绳-负载系统的无源性可以被利用：无人机闭环姿态动力学如公式9所示。联合如下公式$${m_i}{\ddot q_i} = {f_i}{R_i}z - {m_i}gz + {T_i}{R_L}e_i^l$$<img src="https://tvax3.sinaimg.cn/large/007mx13gly1gwcer09os9j30it01lwek.jpg" style="zoom:50%;">$${f_i}R({\eta _i})z = {f_i}R({\eta _{{d_i}}} + {e_{{\eta _i}}})z \buildrel \Delta \over = {f_i}R({\eta _{{d_i}}})z + {f_i}H({\eta _{{d_i}}},{e_{{\eta _i}}}) = {\mu _i} + {f_i}H({\eta _{{d_i}}},{e_{{\eta _i}}})$$<p>可以得到无人机的闭环移动动力学</p><p><img src="https://tva3.sinaimg.cn/large/007mx13gly1gwcgnmpuq4j30fw02bwel.jpg" style="zoom: 67%;"></p><p>在任何给定的时间，以下两个约束中的一个适用于每根缆绳。</p><ul><li><p>如果绳子不受到拉力作用，则${T_i} = 0$</p></li><li><p>如果绳子不受到拉力作用，则${T_i} &gt; 0$，且存在如下关系：</p>$${({R_L}{e_i})^{\rm{T}}}({\dot q_i} - {\dot q_L} - {R_L}sk({\Omega _L}){r_i}) = 0$$<p>从而对能量函数求导得到：</p><p><img src="https://tva2.sinaimg.cn/large/007mx13gly1gwch7dahafj30be076aau.jpg" style="zoom: 80%;"></p><p>经过一系列操作后得到</p><p><img src="https://tva4.sinaimg.cn/large/007mx13gly1gwchbmlfo7j30hi06vt9e.jpg" style="zoom:67%;"></p><p>利用向量的内积和外积的性质，可以得到：</p>$$\sum\limits_{i = 1}^n {{{(sk({\Omega _L}){r_i})}^{\rm{T}}}( - {T_i}{e_i})}  = \sum\limits_{i = 1}^n {{{({R_L}sk({\Omega _L}){r_i})}^{\rm{T}}}( - {T_i}{R_L}{e_i})} $$<p>则有：</p><p><img src="https://tva4.sinaimg.cn/large/007mx13gly1gwchjrkl82j30hu04d74x.jpg" style="zoom:67%;"></p><p>无论缆绳张力的状态，最后一项始终是零，则得到最简单化的能量函数导数</p><p><img src="https://tvax1.sinaimg.cn/large/007mx13gly1gwchlpu6qzj30h503fq38.jpg" style="zoom:80%;"></p><p>注意，第三项是由于系统欠驱动导致的。</p><p>接下来证明能量函数的有界性。</p><p>根据前面证明的约束条件：</p><p><img src="https://tva2.sinaimg.cn/large/007mx13gly1gwcerbvp0xj30n80243yn.jpg" style="zoom:50%;"></p>$$\left\| {H({\eta _{{d_i}}},{e_{{\eta _i}}})} \right\| \le {k_2}\left\| {{e_{{\eta _i}}}} \right\|,{k_2} \in {\mathbb{R}^{+}}$$<p>可以得到：</p><p><img src="https://tvax2.sinaimg.cn/large/007mx13gly1gwcibvregfj30ho03o0t1.jpg" style="zoom:80%;"></p><p>对于任意的$\left\| {{{\dot q}_L}} \right\| \ge 1$，其服从于$\left\| {{e_{{\eta _i}}}(t)} \right\| \le {k_1}\left\| {{\eta _{{0_i}}}} \right\|\exp ( - \alpha t),t \ge 0$和<a href="https://www.sciencedirect.com/science/article/pii/S0045790616301999">A novel position and force coordination approach in four channel nonlinear teleoperation - ScienceDirect</a>中的不等式，从而可以得到</p><p><img src="https://tvax1.sinaimg.cn/large/007mx13gly1gwcm201p0tj30fq04mq3a.jpg" style="zoom: 80%;"></p></li></ul><p>  其中${I_3}$为单位矩阵，上式的上界为以能量函数组成的式子，其中${K_1,K_2}$为大于0的常数</p><p>  <img src="https://tvax4.sinaimg.cn/large/007mx13gly1gwcir5ybmqj30bv025q2z.jpg" style="zoom:67%;"></p><p>  由<a href="https://www.tandfonline.com/doi/full/10.1080/00207179.2013.826385">Full article: Defending the beauty of the Invariance Principle (tandfonline.com)</a>中的Gronwall-Bellman引理可以得到</p><p>  <img src="https://tva4.sinaimg.cn/large/007mx13gly1gwcitoc9gpj30du03ydg0.jpg" style="zoom: 67%;"></p><p>  其中，$f(t) \buildrel \Delta \over = {K_1}\exp ( - \alpha t) + {K_3}\left\| {{{\ddot q}_v}} \right\|$，$g(t) \buildrel \Delta \over = {K_2}\exp ( - \alpha t)\ddot q_v^T + {m_L}\left\| {{{\dot q}_v}} \right\|\left\| {{{\ddot q}_v}} \right\|$</p><p>  因为${{\ddot q}_v} \in {l_1}$，所以$\int\limits_0^t {f(\tau )d} \tau $收敛，即右边的第一项是有界的。对于第二项有  $$\int_0^t {\exp (\int_r^t {f(\tau )} d\tau )} g(r)dr &lt; {{{\cal M}}_1}{{{\cal M}}_2}({{{\cal K}}_2} + {m_L})\int_0^t {\left\| {{{\ddot q}_v}(t)} \right\|} dr$$  其中    $$\eqalign{    &amp; {{{\cal M}}_1} \buildrel \Delta \over = {\sup _{[0,\infty )}}\exp (\int_r^t {f(\tau )} d\tau )  \cr     &amp; {{{\cal M}}_2} = {\sup _{[0,\infty )}}(\exp ( - \alpha t)\left\| {{{\ddot q}_v}} \right\| + \left\| {{{\dot q}_v}} \right\|) \cr} $$</p><p>  从而证明了本文所提出的能量函数E的有界性。因此，下列信号都是有界的，且属于${l_\infty }$<u>（本质有界函数全体?）</u></p><p>  <img src="https://tva1.sinaimg.cn/large/007mx13gly1gwckz6g7izj307x01bjra.jpg" style="zoom:67%;"></p><p>  现在，可以直接清楚地得到：</p>  $$\dot E \le {W_1} + {W_2}$$<p>  <img src="https://tva1.sinaimg.cn/large/007mx13gly1gwcl8ikfj0j30c403tq38.jpg" style="zoom:80%;"></p><p>  根据非自治系统的修正不变性原理<a href="https://www.sciencedirect.com/science/article/pii/S2405896317320190">Almost Sure Attitude Consensus in Multispacecraft Systems With Stochastic Communication Links - ScienceDirect</a>，可以得到</p><p>  <img src="https://tvax2.sinaimg.cn/large/007mx13gly1gwclcx5uz8j30bm01ct8n.jpg" alt=""></p><p>  上式的物理表述为无人机和负载在行程结束时达到静止稳态状态。这种状态可以确定为参考虚拟点的最终位置、无人机的质量和控制增益$k_p$的函数。由于篇幅关系，最后部分的证明和稳态分析的细节省略了。</p><h2 id="5-实验简述"><a href="#5-实验简述" class="headerlink" title="5 实验简述"></a>5 实验简述</h2><p>  在三无人机负载运输系统（结构如下图2）上进行了实验，验证了所提控制器的有效性。 0.23kg的负载通过缆绳连接到无人机上。每架带电池的无人机重量为0.75kg。目标是在两点之间运输负载。无人机位置由动态捕捉系统获得。三个参考虚拟点的期望轨迹被设计成一个固定三角形的顶点，以固定的方向平行于地面移动。</p><p>  <img src="https://tvax2.sinaimg.cn/large/007mx13gly1gwclik3cl5j30f70ebq6z.jpg" alt=""></p><p>  未完待更新~~~</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无人机 </tag>
            
            <tag> PS论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ego-planner代码精读(1)-simple_run_launch文件</title>
      <link href="/2021/10/26/ego-planner-dai-ma-jing-du-simple-run-launch-wen-jian/"/>
      <url>/2021/10/26/ego-planner-dai-ma-jing-du-simple-run-launch-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>完整代码：<a href="https://github.com/ZJU-FAST-Lab/ego-planner">GitHub - ZJU-FAST-Lab/ego-planner</a></p><p>对应文章：<a href="https://ieeexplore.ieee.org/document/9309347">EGO-Planner: An ESDF-Free Gradient-Based Local Planner for Quadrotors | IEEE Journals &amp; Magazine | IEEE Xplore</a></p><p>为区分注释，注意源码中文为本人注释，英文为源码自带</p><h2 id="simple-run-launch文件"><a href="#simple-run-launch文件" class="headerlink" title="simple_run.launch文件"></a>simple_run.launch文件</h2><h3 id="定位源码文件"><a href="#定位源码文件" class="headerlink" title="定位源码文件"></a>定位源码文件</h3><p>simple_run.launch基本上实现了论文中各个算法的功能，我们从该文件了解系统如何运行。</p><p>首先根据launch文件中定义的节点定位launch中用到的源码文件cpp(节选)(<a href="https://caodong-street.github.io/2021/10/26/li-cheng-ji-hua-ti-du-qu/">odom_topic里程计话题读取</a>)</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">    <span class="token comment">&lt;!-- 此文件为ego-planner基本启动文件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- size of map, change the size inflate x, y, z according to your application --&gt;</span>    <span class="token comment">&lt;!-- 定义仅在launch文件中起作用的局部变量大小，即地图大小--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_size_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40.0<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_size_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40.0<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_size_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> 3.0<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- topic of your odometry such as VIO or LIO --&gt;</span>  <span class="token comment">&lt;!-- 这里的odom_topic的value是由odom_world重映射得到，再将其value发布到/visual_slam/odom供给终端读取相应数值--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odom_topic<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/visual_slam/odom<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- main algorithm params --&gt;</span>  <span class="token comment">&lt;!--嵌套复用advanced_param.xml，从而引入主要优化参数 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find ego_planner)/launch/advanced_param.xml<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_size_x_<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg map_size_x)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_size_y_<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg map_size_y)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_size_z_<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg map_size_z)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odometry_topic<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg odom_topic)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>      <span class="token comment">&lt;!-- camera pose: transform of camera frame in the world frame --&gt;</span>    <span class="token comment">&lt;!-- depth topic: depth image, 640x480 by default --&gt;</span>    <span class="token comment">&lt;!-- don't set cloud_topic if you already set these ones! --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_pose_topic<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/pcl_render_node/camera_pose<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>depth_topic<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/pcl_render_node/depth<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- topic of point cloud measurement, such as from LIDAR  --&gt;</span>    <span class="token comment">&lt;!-- don't set camera pose and depth, if you already set this one! --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cloud_topic<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/pcl_render_node/cloud<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- intrinsic params of the depth camera --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cx<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>321.04638671875<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cy<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>243.44969177246094<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fx<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>387.229248046875<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fy<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>387.229248046875<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- maximum velocity and acceleration the drone will reach --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>max_vel<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>max_acc<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--always set to 1.5 times grater than sensing horizen--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>planning_horizon<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>7.5<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>     <span class="token comment">&lt;!-- 1: use 2D Nav Goal to select goal  --&gt;</span>    <span class="token comment">&lt;!-- 2: use global waypoints below  --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flight_type<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!-- global waypoints --&gt;</span>    <span class="token comment">&lt;!-- It generates a piecewise min-snap traj passing all waypoints --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point_num<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point0_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-15.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point0_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point0_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point1_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point1_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point1_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point2_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point2_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point2_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point3_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point3_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-15.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point3_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point4_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-15.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point4_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point4_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- trajectory server --&gt;</span> <span class="token comment">&lt;!-- 节点所在的链接包ego_planner，节点对应的可执行文件名称traj_server， 节点运行时对应的名称为traj_server，将节点的标准输出打印到终端屏幕screen --&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ego_planner<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>traj_server<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>traj_server<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/position_cmd<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>planning/pos_cmd<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/odom_world<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg odom_topic)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>traj_server/time_forward<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>double<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 节点所在的链接包waypoint_generator，节点对应的可执行文件名称waypoint_generator， 节点运行时对应的名称为waypoint_generator，将节点的标准输出打印到终端屏幕screen --&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>waypoint_generator<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>waypoint_generator<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>waypoint_generator<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>~odom<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg odom_topic)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>~goal<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/move_base_simple/goal<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>~traj_start_trigger<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/traj_start_trigger<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>waypoint_type<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manual-lonely-waypoint<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>节点所在的链接包，节点对应的可执行文件名称是找到源码文件的关键。</p><p>我们可以通过搜索节点对应的可执行文件名称定位到源码文件名称(在CMakeList.txt中)</p></blockquote><p>例如搜索可执行文件名称traj_server可以得到在CMakeList.txt的如下结果(节选)</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># catkin_package(CATKIN_DEPENDS message_runtime)</span><span class="token function">catkin_package</span><span class="token punctuation">(</span> INCLUDE_DIRS include LIBRARIES ego_planner<span class="token comment"># 此处是源码文件(cpp)生成的可执行文件对应的链接库</span> CATKIN_DEPENDS plan_env path_searching bspline_opt traj_utils message_runtime<span class="token comment">#  DEPENDS system_lib</span><span class="token punctuation">)</span><span class="token keyword">include_directories</span><span class="token punctuation">(</span>  include  SYSTEM  <span class="token punctuation">${</span>catkin_INCLUDE_DIRS<span class="token punctuation">}</span> <span class="token punctuation">${</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">}</span>/include  <span class="token punctuation">${</span>EIGEN3_INCLUDE_DIR<span class="token punctuation">}</span>  <span class="token punctuation">${</span>PCL_INCLUDE_DIRS<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>ego_planner_node  src/ego_planner_node.cpp   src/ego_replan_fsm.cpp  src/planner_manager.cpp  <span class="token punctuation">)</span>  <span class="token comment">#源码文件为：src/ego_planner_node.cpp</span>  <span class="token comment">#           src/ego_replan_fsm.cpp</span>  <span class="token comment">#           src/planner_manager.cpp     </span>  <span class="token comment">#可执行文件为 ego_planner_node</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>ego_planner_node   <span class="token punctuation">${</span>catkin_LIBRARIES<span class="token punctuation">}</span>  <span class="token punctuation">)</span>  <span class="token comment">#可执行文件为 ego_planner_node</span>  <span class="token comment">#对应的链接库catkin_LIBRARIES为catkin_package中的ego_planner，即可执行文件放置在工作空间的~/ego-planner/devel/lib/ego_planner下</span><span class="token keyword">add_dependencies</span><span class="token punctuation">(</span>ego_planner_node <span class="token punctuation">${</span><span class="token punctuation">${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span>_EXPORTED_TARGETS<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment"># 添加对本package消息的依赖</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>traj_server src/traj_server.cpp<span class="token punctuation">)</span>  <span class="token comment">#源码文件为：src/traj_server.cpp    </span>  <span class="token comment">#可执行文件为 traj_server</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>traj_server <span class="token punctuation">${</span>catkin_LIBRARIES<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">add_dependencies</span><span class="token punctuation">(</span>traj_server <span class="token punctuation">${</span><span class="token punctuation">${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span>_EXPORTED_TARGETS<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment"># 添加对本package消息的依赖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到CMakeList.txt中的链接库ego_planner以及可执行文件名称traj_server都与simple_run.launch文件一一对应，再定位到代码行<code>add_executable(traj_server src/traj_server.cpp)</code>可以得到源码文件为src下的traj_server.cpp。</p><h3 id="确定嵌套复用文件"><a href="#确定嵌套复用文件" class="headerlink" title="确定嵌套复用文件"></a>确定嵌套复用文件</h3><p>嵌套服用文件中也存在需要运行的节点、各类需要用到的参数信息、或者直接是另外一个launch文件。simple_run.launch嵌套复用文件如下：</p><p>advanced_param.xml：包括主要的算法参数</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- main algorithm params --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find ego_planner)/launch/advanced_param.xml<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_size_x_<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg map_size_x)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_size_y_<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg map_size_y)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_size_z_<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg map_size_z)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odometry_topic<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg odom_topic)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- camera pose: transform of camera frame in the world frame --&gt;</span>  <span class="token comment">&lt;!-- depth topic: depth image, 640x480 by default --&gt;</span>  <span class="token comment">&lt;!-- don't set cloud_topic if you already set these ones! --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_pose_topic<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/pcl_render_node/camera_pose<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>depth_topic<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/pcl_render_node/depth<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- topic of point cloud measurement, such as from LIDAR  --&gt;</span>  <span class="token comment">&lt;!-- don't set camera pose and depth, if you already set this one! --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cloud_topic<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/pcl_render_node/cloud<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- intrinsic params of the depth camera --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cx<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>321.04638671875<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cy<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>243.44969177246094<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fx<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>387.229248046875<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fy<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>387.229248046875<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- maximum velocity and acceleration the drone will reach --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>max_vel<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>max_acc<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!--always set to 1.5 times grater than sensing horizen--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>planning_horizon<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>7.5<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>   <span class="token comment">&lt;!-- 1: use 2D Nav Goal to select goal  --&gt;</span>  <span class="token comment">&lt;!-- 2: use global waypoints below  --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flight_type<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- global waypoints --&gt;</span>  <span class="token comment">&lt;!-- It generates a piecewise min-snap traj passing all waypoints --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point_num<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point0_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-15.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point0_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point0_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point1_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point1_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point1_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point2_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point2_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point2_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point3_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point3_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-15.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point3_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point4_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-15.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point4_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point4_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>simulator.xml:包括仿真中需要用到的节点。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- use simulator --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find ego_planner)/launch/simulator.xml<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_size_x_<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg map_size_x)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_size_y_<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg map_size_y)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_size_z_<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg map_size_z)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c_num<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p_num<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>min_dist<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odometry_topic<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg odom_topic)<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>rviz.launch:启动仿真环境rviz</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find ego_planner)/launch/rviz.launch<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="确定可运行文件名称"><a href="#确定可运行文件名称" class="headerlink" title="确定可运行文件名称"></a>确定可运行文件名称</h3><p>通过launch文件及其嵌套复用文件我们可以确定出可运行文件名称，从而找到我们需要重点阅读的源码程序cpp。</p><p>定义的全部节点为：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ego_planner<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>traj_server<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>traj_server<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>waypoint_generator<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>waypoint_generator<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>waypoint_generator<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mockamap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mockamap_node<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mockamap_node<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>so3_quadrotor_simulator<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quadrotor_simulator_so3<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quadrotor_simulator_so3<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nodelet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nodelet<span class="token punctuation">"</span></span> <span class="token attr-name">args</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>standalone so3_control/SO3ControlNodelet<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>so3_control<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odom_visualization<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odom_visualization<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odom_visualization<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>local_sensing_node<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pcl_render_node<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pcl_render_node<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rviz<span class="token punctuation">"</span></span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rviz<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rviz<span class="token punctuation">"</span></span> <span class="token attr-name">args</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-d $(find ego_planner)/launch/default.rviz<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的可执行文件(依次执行)为</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">traj_serverwaypoint_generatormockamap_nodequadrotor_simulator_so3standalone so3_control/SO3ControlNodeletodom_visualizationpcl_render_node/launch/default.rviz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目代码学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>里程计话题读取</title>
      <link href="/2021/10/26/li-cheng-ji-hua-ti-du-qu/"/>
      <url>/2021/10/26/li-cheng-ji-hua-ti-du-qu/</url>
      
        <content type="html"><![CDATA[<h2 id="源代码加注释"><a href="#源代码加注释" class="headerlink" title="源代码加注释"></a>源代码加注释</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">    <span class="token comment">&lt;!-- 此文件为ego-planner基本启动文件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- size of map, change the size inflate x, y, z according to your application --&gt;</span>    <span class="token comment">&lt;!-- 定义仅在launch文件中起作用的局部变量大小，即地图大小--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_size_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40.0<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_size_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40.0<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_size_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> 3.0<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- topic of your odometry such as VIO or LIO --&gt;</span>  <span class="token comment">&lt;!-- 这里的odom_topic的value是由odom_world重映射得到，再将其value发布到/visual_slam/odom供给终端读取相应数值--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odom_topic<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/visual_slam/odom<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- main algorithm params --&gt;</span>  <span class="token comment">&lt;!--嵌套复用advanced_param.xml，从而引入主要优化参数 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find ego_planner)/launch/advanced_param.xml<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_size_x_<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg map_size_x)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_size_y_<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg map_size_y)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map_size_z_<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg map_size_z)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odometry_topic<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg odom_topic)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>      <span class="token comment">&lt;!-- camera pose: transform of camera frame in the world frame --&gt;</span>    <span class="token comment">&lt;!-- depth topic: depth image, 640x480 by default --&gt;</span>    <span class="token comment">&lt;!-- don't set cloud_topic if you already set these ones! --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera_pose_topic<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/pcl_render_node/camera_pose<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>depth_topic<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/pcl_render_node/depth<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- topic of point cloud measurement, such as from LIDAR  --&gt;</span>    <span class="token comment">&lt;!-- don't set camera pose and depth, if you already set this one! --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cloud_topic<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/pcl_render_node/cloud<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- intrinsic params of the depth camera --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cx<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>321.04638671875<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cy<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>243.44969177246094<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fx<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>387.229248046875<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fy<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>387.229248046875<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- maximum velocity and acceleration the drone will reach --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>max_vel<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>max_acc<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--always set to 1.5 times grater than sensing horizen--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>planning_horizon<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>7.5<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>     <span class="token comment">&lt;!-- 1: use 2D Nav Goal to select goal  --&gt;</span>    <span class="token comment">&lt;!-- 2: use global waypoints below  --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flight_type<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!-- global waypoints --&gt;</span>    <span class="token comment">&lt;!-- It generates a piecewise min-snap traj passing all waypoints --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point_num<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point0_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-15.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point0_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point0_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point1_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point1_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point1_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point2_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point2_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point2_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point3_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point3_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-15.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point3_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point4_x<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-15.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point4_y<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point4_z<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- trajectory server --&gt;</span> <span class="token comment">&lt;!-- 节点所在的链接包ego_planner，节点对应的可执行文件名称traj_server， 节点运行时对应的名称为traj_server，将节点的标准输出打印到终端屏幕screen --&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ego_planner<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>traj_server<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>traj_server<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/position_cmd<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>planning/pos_cmd<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/odom_world<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg odom_topic)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>traj_server/time_forward<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>double<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 节点所在的链接包waypoint_generator，节点对应的可执行文件名称waypoint_generator， 节点运行时对应的名称为waypoint_generator，将节点的标准输出打印到终端屏幕screen --&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>waypoint_generator<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>waypoint_generator<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>waypoint_generator<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>~odom<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg odom_topic)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>~goal<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/move_base_simple/goal<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>~traj_start_trigger<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/traj_start_trigger<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>waypoint_type<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manual-lonely-waypoint<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="odom-topic里程计话题读取"><a href="#odom-topic里程计话题读取" class="headerlink" title="odom_topic里程计话题读取"></a>odom_topic里程计话题读取</h2><h3 id="1-查看话题"><a href="#1-查看话题" class="headerlink" title="1.查看话题"></a>1.查看话题</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">rostopic list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-打开rqt"><a href="#2-打开rqt" class="headerlink" title="2.打开rqt"></a>2.打开rqt</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">rqt_plot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-添加topic"><a href="#3-添加topic" class="headerlink" title="3.添加topic"></a>3.添加topic</h3><p>在topic处删掉/，然后打出/选择将要显示的话题，点击+按钮。</p><p>注意：如果添加了话题，无法点击+按钮添加，可能是话题数据的消息格式不对或者没有将话题选择到最底层。</p><p>解决办法：将要显示的话题数据保存到名为xxx.txt中，查看该话题的消息格式。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">rostopic echo /topic_name <span class="token punctuation">&gt;</span> xxx.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后根据消息格式在rqt的topic中补全即可。</p><p>例如：我们想看里程计odom中xyz数据，但是rostopic list得出的话题名称为：/visual_slam/odom，在rqt中输入该话题后无法点击+按钮。<br>解决办法：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">rostopic echo /visual_slam/odom <span class="token punctuation">&gt;</span> odom.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据得到的txt文档可以看出我们需要得到的xyz数据位于odom话题中的pose/pose/position下。所以我们应该在rqt中这样添加topic：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">/visual_slam/odom/pose/pose/position/x/visual_slam/odom/pose/pose/position/y/visual_slam/odom/pose/pose/position/z<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参考博客：<a href="https://blog.csdn.net/weixin_42591529/article/details/115323836">里程计话题读取</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目代码学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fast-planner初代论文笔记1</title>
      <link href="/2021/10/25/fast-planner-chu-dai-lun-wen-bi-ji-1/"/>
      <url>/2021/10/25/fast-planner-chu-dai-lun-wen-bi-ji-1/</url>
      
        <content type="html"><![CDATA[<p>对应代码地址：<a href="https://github.com/HKUST-Aerial-Robotics/Fast-Planner">GitHub - HKUST-Aerial-Robotics/Fast-Planner: A Robust and Efficient Trajectory Planner for Quadrotors</a></p><p>对应文章地址：<a href="https://ieeexplore.ieee.org/abstract/document/8758904">Robust and Efficient Quadrotor Trajectory Generation for Fast Autonomous Flight | IEEE Journals &amp; Magazine | IEEE Xplore</a></p><h2 id="1-摘要"><a href="#1-摘要" class="headerlink" title="1 摘要"></a>1 摘要</h2><p>利用b样条的凸包特性，结合欧几里得距离场的梯度信息和动态约束，采用b样条优化算法提高了轨迹的光滑性和间隙。最后，通过将最终轨迹表示为非均匀b样条，采用迭代时间调整方法保证轨迹的动态可行性和非保守性。</p><h2 id="2-相关工作"><a href="#2-相关工作" class="headerlink" title="2 相关工作"></a>2 相关工作</h2><h3 id="硬约束方法"><a href="#硬约束方法" class="headerlink" title="硬约束方法"></a>硬约束方法</h3><p>硬约束方法的首创是最小snap轨迹生成<a href="https://ieeexplore.ieee.org/document/5980409">Minimum snap trajectory generation and control for quadrotors | IEEE Conference Publication | IEEE Xplore</a>.，其中轨迹表示为分段多项式，并通过求解二次规划( quadratic programming, QP)问题生成。硬约束方法通过凸形式保证全局最优性。然而，忽略了自由空间中与障碍物的距离，这往往导致轨迹接近障碍物。此外，动力学约束是保守的，使轨迹速度不足，以快速飞行。</p><h3 id="软约束方法-本文选用的"><a href="#软约束方法-本文选用的" class="headerlink" title="软约束方法(本文选用的)"></a>软约束方法(本文选用的)</h3><p>也有方法将轨迹生成作为一个非线性优化问题，考虑平滑和安全。软约束方法利用梯度信息推动轨迹远离障碍物，但存在局部极小问题，没有很强的成功率和动力学可行性保证。我们的优化方法还利用梯度信息提高了轨迹的安全性。然而，与以往计算昂贵的沿轨迹线积分的方法不同，基于b样条的凸包特性，将公式设计得更加简单。它大大提高了计算效率和收敛速度。</p><h2 id="3-运动动力学路径搜索"><a href="#3-运动动力学路径搜索" class="headerlink" title="3 运动动力学路径搜索"></a>3 运动动力学路径搜索</h2><p>前端运动学路径搜素源于自动汽车的混合A*(hybrid-state A*)搜索算法，其可再体素网格网络中搜索一个安全的，运动学可行的、且相对时间以及控制成本最低的轨迹。</p><p>未完待续~~~</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fast planner </tag>
            
            <tag> 无人机 </tag>
            
            <tag> 轨迹优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ego-planner的无人机编队：EGO-Swarm</title>
      <link href="/2021/10/23/ji-yu-ego-planner-de-wu-ren-ji-bian-dui-ego-swarm/"/>
      <url>/2021/10/23/ji-yu-ego-planner-de-wu-ren-ji-bian-dui-ego-swarm/</url>
      
        <content type="html"><![CDATA[<p>论文源码：<a href="https://github.com/ZJU-FAST-Lab/ego-planner-swarm">ZJU-FAST-Lab/ego-planner-swarm: An efficient single/multi-agent trajectory planner for multicopters. (github.com)</a></p><p>论文原文：<a href="https://arxiv.org/abs/2011.04183v1">EGO-Swarm: A Fully Autonomous and Decentralized Quadrotor Swarm System in Cluttered Environments (arxiv.org)</a></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>提出了一种分散的、异步的多机器人自主导航系统解决方案，用于未知障碍场景下仅使用板载资源的多机器人自主导航。</p><ol><li>该规划系统是在基于梯度的局部规划框架下制定的，其中通过将碰撞风险作为非线性优化问题的惩罚来实现避碰。(此方法与ego-planner相同，ego-planner的详细方案见<a href="https://caodong-street.github.io/2021/10/21/ji-yu-fast-planner-gai-jin-de-suan-fa-ego-planner-yue-du-bi-ji/">基于fast-planner改进的算法(1)-ego_planner阅读笔记 | Cao Dong (caodong-street.github.io)</a> )</li><li>为了提高鲁棒性和避免局部极小值，我们引入了一种轻量级的拓扑轨迹生成方法。</li><li>针对智能体所使用一个不可靠的轨迹共享网络，仅在几毫秒内生成安全、平滑、动态可行的轨迹。且利用深度图像中的智能体检测来校正智能体间的相对定位漂移。</li></ol><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h2><p>文章主要：</p><ol><li><p>扩展了之前的所作出的工作EGO-Planner。首先提出了一种新的、鲁棒的拓扑规划方法，几乎不需要额外的计算，避免了图3中的因局部最小值导致的动力学不可行以及导航碰撞问题。其次通过在目标函数中加入群碰撞的加权惩罚，实现了去中心化的互相避撞。</p><p><img src="https://tva3.sinaimg.cn/large/007mx13gly1gvpex6qfgbj60hn09stcq02.jpg" alt="原文图3"></p></li><li><p>我们提出了一种分散的、异步的且对不可靠的通信和定位漂移不敏感的无人机编队结构。</p></li><li><p>将提出的方法集成到一个全自主四旋翼系统中，并发布了硬件和软件。</p></li></ol><h2 id="2-相关工作"><a href="#2-相关工作" class="headerlink" title="2 相关工作"></a>2 相关工作</h2><h3 id="A-单四旋翼局部路径规划"><a href="#A-单四旋翼局部路径规划" class="headerlink" title="A. 单四旋翼局部路径规划"></a>A. 单四旋翼局部路径规划</h3><p>基于梯度的运动规划是四旋翼飞行器局部规划的主流。</p><h3 id="B-拓扑规划"><a href="#B-拓扑规划" class="headerlink" title="B. 拓扑规划"></a>B. 拓扑规划</h3><p>采用拓扑规划来避免局部极小值，进一步加速拓扑规划的前端。</p><h3 id="C-分散的无人机群"><a href="#C-分散的无人机群" class="headerlink" title="C. 分散的无人机群"></a>C. 分散的无人机群</h3><p>现有的无人机编队算法是通过仿真验证的，没有集成传感、映射和规划能力，且无法在野外环境中实现完全自主地运动。</p><h2 id="3-针对基于梯度的局部路径规划的隐式拓扑轨迹生成"><a href="#3-针对基于梯度的局部路径规划的隐式拓扑轨迹生成" class="headerlink" title="3 针对基于梯度的局部路径规划的隐式拓扑轨迹生成"></a>3 针对基于梯度的局部路径规划的隐式拓扑轨迹生成</h2><h3 id="3-1-基于EGO-PLANNER的局部路径规划"><a href="#3-1-基于EGO-PLANNER的局部路径规划" class="headerlink" title="3.1 基于EGO-PLANNER的局部路径规划"></a>3.1 基于EGO-PLANNER的局部路径规划</h3><p>ego-planner的详细方案见<a href="https://caodong-street.github.io/2021/10/21/ji-yu-fast-planner-gai-jin-de-suan-fa-ego-planner-yue-du-bi-ji/">基于fast-planner改进的算法(1)-ego_planner阅读笔记 | Cao Dong (caodong-street.github.io)</a> ，ego-planner主要是将轨迹生成问题作为一个非线性优化问题进行处理，权衡平滑性惩罚项$J_s$、碰撞惩罚项$J_c$、动力学可行性惩罚项$J_d$和终端进展惩罚项$J_t$(全称为terminal progress，我在ego-planer未完全看出其体现)。</p><p>但本文重新定义了描述惩罚项的函数类型：最小误差型和软单边约束型</p><blockquote><p>最小误差型惩罚项包括平滑性惩罚项$J_s$和终端进展惩罚项$J_t$</p><p>最小误差型惩罚项是指使决策变量的线性变换<em>L(Q)</em>与期望值<em>D</em>之间的总误差最小的惩罚项，其描述公式为：</p></blockquote>$${J_r} = \sum\limits_{\mathrm{Q} \in \Phi } {\left\| {L(\mathrm{Q}) -\mathcal{D}} \right\|_n^n} $$<blockquote><p>软单边约束型惩罚项包括碰撞惩罚项$J_c$和动力学可行性惩罚项$J_d$</p><p>软单边约束型惩罚项是用于惩罚超过特定阈值的决策变量的惩罚项$\mathcal{T}$，其描述公式为：</p></blockquote> $${J_r} = \sum\limits_{{\rm{Q}} \in \Phi } {\left\{ {\matrix{ {\left\| {{{L(Q) - ({\cal T} - \varepsilon )} \over S}} \right\|_n^n} &amp; {L(Q) &gt; ({\cal T} - \varepsilon )}  \cr  0 &amp; {L(Q) \le ({\cal T} - \varepsilon )}  \cr  } } \right.} $$<h3 id="3-2-隐式拓扑轨迹生成"><a href="#3-2-隐式拓扑轨迹生成" class="headerlink" title="3.2 隐式拓扑轨迹生成"></a>3.2 隐式拓扑轨迹生成</h3><p>定义1：</p><p>均匀的可见性不同形(uniform visibility deformation,UVD)(详细见<a href="https://caodong-street.github.io/2021/10/20/fast-planner-chu-dai-lun-wen-bi-ji-2/">fast-planner初代论文笔记2 | Cao Dong (caodong-street.github.io)</a>)的定义：</p><p>存在两条可以被s∈[0,1]参数化的轨迹τ1(s)、 τ2(s)并且满足τ1(0) =τ2(0)， τ1(1) =τ2(1)，如果对所有情况，连接τ1(s)、τ2(s)的线段是无碰撞的。那么这两条轨迹属于均匀的可见性不同形(UVD)类。</p><p>本文通过反演v得到来${{\rm{v}}_{new}} =  - {\rm{v}}$构造不同方向的距离场，再由图4(c)所示得到了新的$\left\{ {{{\rm{p}}_{new}}{\rm{,}}{{\rm{v}}_{new}}} \right\}$对。再如图4(b)所示，根据新的$\left\{ {{{\rm{p}}_{new}}{\rm{,}}{{\rm{v}}_{new}}} \right\}$对也得到了一条新的轨迹。这新旧两条轨迹之间明显是不满足定义1，从而可以说生成一条新的拓扑轨迹。采用该的轨迹生成方法没有采用直接搜索不同的拓扑路径的轨迹生成方法(详细见<a href="https://caodong-street.github.io/2021/10/20/fast-planner-chu-dai-lun-wen-bi-ji-2/">fast-planner初代论文笔记2 | Cao Dong (caodong-street.github.io)</a>)，而是通过之前生成的{p,v}对信息得到新拓扑轨迹，故称为<u>隐式拓扑轨迹生成</u>方法。</p><p><img src="https://tvax1.sinaimg.cn/large/007mx13gly1gvpeiyyn50j60n90nydo602.jpg" alt="原文图4"></p><h2 id="4-无人机编队导航"><a href="#4-无人机编队导航" class="headerlink" title="4 无人机编队导航"></a>4 无人机编队导航</h2><h3 id="A-无人机相互避撞"><a href="#A-无人机相互避撞" class="headerlink" title="A. 无人机相互避撞"></a>A. 无人机相互避撞</h3><h4 id="a-主要思路"><a href="#a-主要思路" class="headerlink" title="a 主要思路"></a>a 主要思路</h4><p>首先，我们给出无人机避障的主要思路：如图6所示，单无人机自身<u>通过比较在相同轨迹时间内收到的其周围无人机的轨迹的距离</u>得到一条轨迹，从而实现避撞。</p><p><img src="https://tva1.sinaimg.cn/large/007mx13gly1gvpgz7pzlej60zr0g2n2t02.jpg" alt="原文图6"></p><h4 id="b-问题建模"><a href="#b-问题建模" class="headerlink" title="b 问题建模"></a>b 问题建模</h4><p>此时我们对处于轨迹规划中的单无人机<em>k</em>构造编队碰撞惩罚项${J_{w,k}}$，软单边约束型构造编队碰撞惩罚项，其描述如下(dt代表微分)</p><p><img src="https://tvax2.sinaimg.cn/large/007mx13gly1gvpi6tyfd7j61a108swgq02.jpg" alt=""></p><p>其他不处于轨迹规划中的单无人机对应下标系数为<em>i</em>，$\Phi (t)$表示无人机在轨迹时间<em>t</em>的位置，$t_s$与$t_e$表示全局轨迹规划的开始时间和终止时间，${d_{k,t}}(t)$为定义的无人机k与无人机i之间的距离，$C{\rm{ + }}\epsilon $为无人机k与无人机i的机体安全距离之和，E=diag(1,1,1/c)表示一个对角矩阵（即指除了主对角线外的元素均为零的方阵），<u>c&gt;1将欧氏距离转换为z轴主轴较短的椭球型距离，以减轻下冲风险</u>。</p><blockquote><p>上述下滑线内容较抽象，我们推一下${d_{k,t}}(t)$的计算公式就可以明白这句话的意思了。</p><p>如下推导可得，最后的的{d_{k,t}}(t)的计算公式中z对应的系数为1/c，说明降低了z对应的惩罚权重，减少z轴的位移，以减轻下冲风险（障碍物里面不包括地面或者天花板，以免撞到地面或者天花板）。</p><p>椭球型距离是指$\sqrt {{x^2} + {y^2} + {{{z^2}} \over c}} $的计算项。</p></blockquote>$$\eqalign{  &amp; {E^{1/2}} = \left[ {\matrix{   1 &amp; 0 &amp; 0  \cr    0 &amp; 1 &amp; 0  \cr    0 &amp; 0 &amp; {{1 \over {\sqrt c }}}  \cr  } } \right],  \cr   &amp; let{\rm{  }}{\Phi _k}(t) - {\Phi _i}(t) = {[x,y,z]^T},  \cr   &amp; {E^{1/2}}({\Phi _k}(t) - {\Phi _i}(t)) = {[x,y,{z \over {\sqrt c }}]^T}  \cr   &amp; \left\| {{E^{1/2}}({\Phi _k}(t) - {\Phi _i}(t))} \right\| = \sqrt {{x^2} + {y^2} + {{{z^2}} \over c}}   \cr   &amp; {d_{k,t}}(t) = \sqrt {{x^2} + {y^2} + {{{z^2}} \over c}}  - (C + \epsilon ) \cr} $$<p>将加权的编队碰撞惩罚项${J_{w,k}}$与单个无人机的进行ego-planner对应的惩罚项${J_{EGO}}$得到每个单无人机的总优化问题：</p>$$\mathop {\min }\limits_Q J = {J_{EGO}} + {\lambda _w}{J_{w,k}}$$<p>本文利用均匀b样条参数化轨迹(详细参考<a href="https://ieeexplore.ieee.org/abstract/document/8758904">Robust and Efficient Quadrotor Trajectory Generation for Fast Autonomous Flight | IEEE Journals &amp; Magazine | IEEE Xplore</a>，<a href="https://github.com/CaoDong-street/Bspline">B样条曲线绘制项目</a>)</p><h3 id="B-定位漂移补偿"><a href="#B-定位漂移补偿" class="headerlink" title="B 定位漂移补偿"></a>B 定位漂移补偿</h3><h4 id="a-背景介绍"><a href="#a-背景介绍" class="headerlink" title="a 背景介绍"></a>a 背景介绍</h4><p>由于个体在未知环境下进行定位(没有可靠的高频回路闭合)，所以定位漂移会在飞行过程中积累。<a href="https://ieeexplore.ieee.org/document/9196944">Decentralized Visual-Inertial-UWB Fusion for Relative State Estimation of Aerial Swarm | IEEE Conference Publication | IEEE Xplore（港科大组）</a>提出了一种附加超宽带距离测量的空中群状态估计方法，实现了精确的协同定位。然而，我们更多地关注于遍历障碍环境，必须为其他应用程序保留计算和通信资源。因此，受<a href="https://ieeexplore.ieee.org/document/9196944">Decentralized Visual-Inertial-UWB Fusion for Relative State Estimation of Aerial Swarm | IEEE Conference Publication | IEEE Xplore（港科大组）</a>的启发，通过比较接收到的无人机轨迹估计的预测位置和记录无人机深度图像的测量位置，提出了一种简化的、轻量级的相对漂移估计方法。当轨迹跟踪误差可以忽略不计，且任意两个无人机中至少有一个可能会看到另一个时，这种策略就会起作用。因此，我们使用<a href="https://ieeexplore.ieee.org/document/5980409">Minimum snap trajectory generation and control for quadrotors | IEEE Conference Publication | IEEE Xplore</a>的控制器进行精确跟踪，并使用广角摄像机减少丢失无人机的可能性。<u>(机器视觉的知识)</u></p><h4 id="b-漂移消除过程"><a href="#b-漂移消除过程" class="headerlink" title="b 漂移消除过程"></a>b 漂移消除过程</h4><blockquote><p>(这部分真的读不懂，关于无人机的slam知识了)</p></blockquote><p>在利用VIO估计单无人机i的当前位置$\Phi ({t_{now}})$后，由$\Phi ({t_{now}})$为球心，以R为半径(R是一个经验参数，表示实验估计的典型漂移的上界,这个与机体安全距离相关的)确定出球形信任区域S。然后将S映射到当前捕获的深度图像，即区域${S^\prime }$，映射关系如下：</p>$$\eqalign{  &amp; z{\left[ {\matrix{   {{s^\prime }^{\rm{T}}} &amp; 1  \cr  } } \right]^{\rm{T}}} = {\rm{KT}}_{\rm{w}}^{\rm{c}}{\left[ {\matrix{   {{s^{\rm{T}}}} &amp; 1  \cr  } } \right]^{\rm{T}}}  \cr   &amp; {s^\prime } \in {S^\prime },s \in S \cr} $$<p><script type="math/tex">{\rm{K}}</script>和<script type="math/tex">{\rm{T}}_{\rm{w}}^{\rm{c}}</script>是相机的内在矩阵和外在矩阵。z是沿主光轴与光中心的偏差。${S^\prime }$是一个需要经过复杂计算才能得到的椭圆圆锥截面。因此，我们采用近似的轴向椭圆${\overline{S} ^\prime}$来代替精确的${S^\prime }$(<u>这里是不是能直接映射中心，然后画圆，减小算法量</u>)。由于信任区域只是一个经验区域，因此没有必要对其进行精确的定义。</p><p>然后我们将${\overline{S} ^\prime}$内的每一个点投射到世界框架中，收集属于S的点，就得到一个点簇$\mathcal{P}$⊂S。然后将无人机观测的位置P视为$\mathcal{P}$的中心(第一个原始矩)，即</p>$${\rm{P = }}\mu _1^\prime ({\cal P})$$<p>上式认为如果$\mathcal{P}$只包含相应的无人机的观察，没有任何不相关的对象，这是不能保证的。然而，由于每个无人机计划的轨迹都与附近的物体有一定的距离，所以上式在大多数情况下都适用。为了提高无人机检测的鲁棒性，还增加了像素数、$\mathcal{P}$的第二个中心矩、当前测量值与前一次测量值的偏差等判据。更严格的标准增加了假阴性率，但由于定位漂移变化缓慢，假阴性率是无害的。最后，误差将$\Phi ({t_{now}})$和P输入给一个滤波器，然后从滤波器获得估计的漂移。</p><blockquote><p>简单来说，VIO漂移是在从接收轨迹估计的预测位置和信任区域内深度图像中的观测位置比较估计得到的。</p></blockquote><h3 id="C-从深度图像中去除无人机"><a href="#C-从深度图像中去除无人机" class="headerlink" title="C 从深度图像中去除无人机"></a>C 从深度图像中去除无人机</h3><p>我们使用占用网格图来存储静态障碍物，并使用深度图像进行地图融合。 移动无人机在第四节 -A 中得到处理。 因此，记录移动无人机并将其视为地图构建中的障碍是没有必要的，甚至是有害的。 </p><blockquote><p>因为这里的障碍物是ego planner中的碰撞项针对的障碍对象，而移动无人机的问题已经再本文提出的编队碰撞惩罚项中处理了，所以移动无人机不能视作地图构建中的障碍。</p></blockquote><p>为了消除移动物体的影响，我们从深度图像中屏蔽并移除在第四节-B 中检测到的无人机的像素，如图 7 所示。 除此之外，覆盖大部分视图的移动物体会干扰视觉惯性里程计（visual-inertial odometry，VIO，<a href="https://blog.csdn.net/qq_40213457/article/details/81298696"> VIO学习总结</a>）。 因此，灰度图像上的无人机也被删除，使用相应的深度图像的相同掩码。 这里使用的无人机检测标准不太严格，因为误报比漏报更有害。 </p><p><img src="https://tvax2.sinaimg.cn/large/007mx13gly1gvpn27eqmcj60z10khqnw02.jpg" alt="原文图7"></p><h2 id="5-系统结构"><a href="#5-系统结构" class="headerlink" title="5 系统结构"></a>5 系统结构</h2><p>系统架构如图8所示，其中包含了单无人机和无人机编队通信系统的详细架构。</p><p><img src="https://tvax3.sinaimg.cn/large/007mx13gly1gvq6phj44zj60en098add02.jpg" alt="图8"></p><h3 id="A-单无人机导航系统"><a href="#A-单无人机导航系统" class="headerlink" title="A.单无人机导航系统"></a>A.单无人机导航系统</h3><p>单无人机系统(包括硬件和软件设置)基于我们之前的工作EGO-Planner构造的，但包括有一个额外的模块，用于补偿VIO漂移并删除图像上的目击到的其他无人机。所有组件集成到一个自组装的250毫米轴距四旋翼。对于未知环境下的轨迹生成，采用局部规划方法。当当前轨迹与新发现的障碍物发生碰撞，或无人机接近当前轨迹的末端时(<u>后者这里的末端没懂</u>)，启动规划。</p><h3 id="B-通信框架"><a href="#B-通信框架" class="headerlink" title="B. 通信框架"></a>B. 通信框架</h3><p>两个网络将系统连接起来，一个是共享轨迹的广播网络，另一个是同步时间戳和管理顺序启动的链网络。</p><h4 id="1-广播网络"><a href="#1-广播网络" class="headerlink" title="1) 广播网络"></a>1) 广播网络</h4><p>当一个无人机生成一条新的无碰撞轨迹时，立即广播给所有无人机。然后其他无人机接收并存储这些轨迹，以便在必要时为自己生成安全的轨迹。这种闭环策略在连接稳定且延迟可以忽略的理想情况下可以正常工作。然而，这在实践中并不能保证。因此，我们提出了两种方法来减少碰撞的可能性。</p><p>首先，在网络容量下，<u>以给定的频率广播一条轨迹</u>。这不会造成计算负担，因为包含3-D路径点和其他参数的典型轨迹小于0.5KB。相比之下，现代的无线网络如蓝牙可以达到1Mbps以上的速度。其次，<u>各智能体从广播网络接收到一条碰撞轨迹后立即进行碰撞检测，如果检测到潜在的碰撞，则生成新的无碰撞轨迹</u>;该策略可以解决多个无人机在关闭时间内生成轨迹时由于延迟或丢包导致的不接收其他无人机轨迹的问题。</p><p>此外，还考虑了计算复杂度随着无人机数量的增加而增加的问题。在规划之前，每个无人机将其当前位置与接收到的周围无人机的轨迹进行比较，任何超出规划范围的轨迹都将被忽略。</p><h4 id="2-链网络"><a href="#2-链网络" class="headerlink" title="2) 链网络"></a>2) 链网络</h4><p>基于连接的稳定链网络，用于时间戳同步和系统启动管理。<u>在系统启动时，无人机按照预定义的顺序生成轨迹。每个无人机通过链网络接收到优先级更高的无人机的轨迹后，生成自己的初始轨迹。</u>该策略避免了系统启动时由于无人机没有其他轨迹信息而同时生成轨迹而引起的混沌。</p><h2 id="6-源码精读"><a href="#6-源码精读" class="headerlink" title="6 源码精读"></a>6 源码精读</h2><p>未完待续</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fast planner </tag>
            
            <tag> ego planner </tag>
            
            <tag> 无人机 </tag>
            
            <tag> 编队控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于fast-planner改进的算法(1)-ego_planner阅读笔记</title>
      <link href="/2021/10/21/ji-yu-fast-planner-gai-jin-de-suan-fa-ego-planner-yue-du-bi-ji/"/>
      <url>/2021/10/21/ji-yu-fast-planner-gai-jin-de-suan-fa-ego-planner-yue-du-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>对应文章：<a href="https://ieeexplore.ieee.org/document/9309347">EGO-Planner: An ESDF-Free Gradient-Based Local Planner for Quadrotors | IEEE Journals &amp; Magazine | IEEE Xplore</a></p><p>对应代码：<a href="https://github.com/ZJU-FAST-Lab/ego-planner">GitHub - ZJU-FAST-Lab/ego-planner</a></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ol><li>通过确定物体与障碍物表面距离，得到惩罚函数中的碰撞项</li><li>轨迹优化器只提取当前轨迹撞到的障碍物的信息，降低算法复杂度</li><li>如果某段轨迹动力学不可行，则延长该段轨迹分配的时间</li><li>异性曲线拟合算法——在保持原有轨迹形状的情况下降低轨迹的阶数</li></ol><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>传统的基于梯度的运动规划算法需要构建所需的ESDF地图，然而构建地图花费了整个规划算法70%的时间，从而限制了在有限资源情况下的运动规划方法的使用。</p><p>ESDF的构建方式有全局增量式和批量本地计算两种方式，但他们并不是专门用于运动规划而构建的，也就是说对于运动规划来说现有的两种方法构建出的ESDF地图是多余的、不必要的。从图1中可以看出轨迹仅仅覆盖小范围的ESDF地图，大部分都是没用的。简单地手动减小ESDF地图范围，缺乏理论依据，也包含不必要的计算。</p><p><img src="https://pic1.zhimg.com/80/v2-e1d868a854700092790fc67caefede4c_720w.jpg" alt="原文图1"></p><p>EGO-Planer主要由基于梯度的样条曲线优化器和细化过程组成。</p><h3 id="1-1基于梯度的样条曲线优化器"><a href="#1-1基于梯度的样条曲线优化器" class="headerlink" title="1.1基于梯度的样条曲线优化器"></a>1.1基于梯度的样条曲线优化器</h3><p>使用平滑性、碰撞性和动力学可行性项优化轨迹。碰撞项的构成通过比较障碍物内的轨迹与无碰撞的引导路径，然后用梯度信息将碰撞到障碍物的轨迹拉出障碍物，从而算法只需要计算碰撞处的障碍物梯度即可。</p><h3 id="1-2细化过程"><a href="#1-2细化过程" class="headerlink" title="1.2细化过程"></a>1.2细化过程</h3><p>当某段轨迹动力学不可行时，激活细化过程，即增大该轨迹分配的时间。新生成的B样条曲线平衡了动力学可行性与拟合之前动力学不可行轨迹的准确性。在轴向和径向上拟合的准确性惩罚并不一样，以提高模型的鲁棒性。</p><h2 id="二、相关工作"><a href="#二、相关工作" class="headerlink" title="二、相关工作"></a>二、相关工作</h2><h3 id="2-1基于梯度的运动规划"><a href="#2-1基于梯度的运动规划" class="headerlink" title="2.1基于梯度的运动规划"></a>2.1基于梯度的运动规划</h3><h3 id="2-2带符号的欧式距离场（ESDF）"><a href="#2-2带符号的欧式距离场（ESDF）" class="headerlink" title="2.2带符号的欧式距离场（ESDF）"></a>2.2带符号的欧式距离场（ESDF）</h3><h2 id="三、避撞力的估计"><a href="#三、避撞力的估计" class="headerlink" title="三、避撞力的估计"></a>三、避撞力的估计</h2><p>定义B样条曲线的控制点为Q，一开始生成一条满足终端约束但不考虑障碍物的B样条曲线 $\Phi$，接着，对于每段被检测到的碰撞的线段，用优化程序（这里使用的是A星算法）生成一个无碰撞的路径 $\Gamma$  。对于发生碰撞的线段的每个控制点 ${Q_i}$ 都会生成一个在障碍物表面的定位点（anchor point） $p_{ij}$ ，且对应一个排斥单位方向向量  ${v_i}$与  ${Q_i}{p_{ij}}$同向(<strong>这里不应该是相等</strong>，${v_i}$为单位方向向量)。每对 {p,v}  对都对应一个特定的控制点Q。算法1为{p,v} 对的生成过程。</p><blockquote><p>这里{p,v} 对的生成过程可以通过图3读懂，但是读到这里没懂没有关系，论文把大量关键点放到最后的实验内容才讲清楚。</p></blockquote><p><img src="https://pic1.zhimg.com/80/v2-d6026bb43ab95c45706b88ea954f22d8_720w.jpg" alt="原文图3"></p><p>算法1伪代码：</p><p><img src="https://pic2.zhimg.com/80/v2-85b714bbfadf3d640020d52b8e8c0461_720w.jpg" alt="优化算法1"></p><p>算法1伪代码说明：</p><p><code>FindConsecutiveCollidingSegment(Q)</code>找到与Q发生碰撞的障碍物，并判断其是否存在</p><p><code>GetCollisionSegment()</code>提取出与Q发生碰撞的障碍物</p><p><code>.push_back()</code>将<code>障碍物</code>添加入<code>障碍物</code>集合中</p><p><code>PathSearch()</code>针对障碍物生成一个无碰撞的路径</p><p><code>Find_p_v_Pairs    (Q,path)</code>根据控制点与无碰撞路径确定匹配的{p,v}对</p><p> ${Q_i}$ 到第 j个障碍物的距离如下，需要注意单位向量v在第一次生成后就不会再次发生改变，所以${d_{ij}} $的值是分正负的。</p><p><img src="https://www.zhihu.com/equation?tex=+++d_%7Bij%7D%3D%28Q_i-p_%7Bij%7D%29v_%7Bij%7D+%5Ctag%7B1%7D+%5C%5C" alt=""></p><p>为了防止轨迹被拉出当前障碍物前，迭代过程中反复生成  {p,v}  对，判断是否为新障碍物的标准是：如果控制点${Q_i}$ 处于障碍物中时，并且对于当前得到的所有障碍物 <em>j</em>满足${d_{ij}} &gt; 0$，则该障碍物为新发现的障碍物。从而<u>只计算影响轨迹的障碍物信息</u>，减少运行时间。</p><p>为了将必要的环境意识融入当地的规划中，我们需要明确地构建一个目标函数(设计基于梯度的轨迹优化器)，使轨道远离障碍。ESDF提供了这种至关重要的碰撞信息，但代价是沉重的计算负担。此外，如图2所示，由于ESDF反馈的错误信息不足，基于ESDF的规划者很容易陷入局部最小值，无法逃脱障碍。为了避免这种情况，额外的前端总是需要提供一个无碰撞的初始轨迹。由于明确设计的斥力对于不同的任务和环境都是相当有效的，所以上述方法在提供避免碰撞的重要信息方面优于ESDF。</p><p><img src="https://pic3.zhimg.com/80/v2-d5111b783f90ebb2eb29ab431245e2da_720w.jpg" alt="原文图2"></p><h2 id="四、基于梯度的轨迹优化器"><a href="#四、基于梯度的轨迹优化器" class="headerlink" title="四、基于梯度的轨迹优化器"></a>四、基于梯度的轨迹优化器</h2><h3 id="4-1问题建模"><a href="#4-1问题建模" class="headerlink" title="4.1问题建模"></a>4.1问题建模</h3><p>本文使用均匀B样条曲线 $\Phi$来表示轨迹（均匀B样条曲线可以参考<a href="https://github.com/CaoDong-street/Bspline">B样条曲线绘制项目</a>进行学习），其阶数为${p_b}$，均匀B样条曲线的每个节点有相同的时间间隔 。</p><p><u>B样条曲线的凸包性质</u>表明，某段曲线只与${p_b}+1$个连续的控制点有关，并且曲线被包含在这些点构成的凸包内。B样条曲线的k阶导数是 ${p_b}-k$ 阶B样条曲线。轨迹  $\Phi$ 的一阶、二阶、三阶导数的控制点分别为</p><p><img src="https://www.zhihu.com/equation?tex=++V_i%3D%5Cfrac%7BQ_%7Bi%2B1%7D-Q_i%7D%7B%5CDelta+t%7D%2CA_i%3D%5Cfrac%7BV_%7Bi%2B1%7D-V_i%7D%7B%5CDelta+t%7D%EF%BC%8CJ_i%3D%5Cfrac%7BA_%7Bi%2B1%7D-A_i%7D%7B%5CDelta+t%7D+++%5Ctag%7B2%7D%5C%5C" alt=""></p><p>根据无人机的微分平坦特性降低要规划的变量，优化问题可以被定义为</p><p><img src="https://www.zhihu.com/equation?tex=Q%3Dargmin%5C+J%3D%5Clambda_sJ_s%2B%5Clambda_cJ_c%2B%5Clambda_dJ_d++%5Ctag%7B3%7D%5C%5C" alt=""></p><p>${J_s}$为光滑项惩罚， ${J_c}$为碰撞项惩罚，${J_d}$为动力学可行项惩罚，  $\lambda $ 为惩罚项的权值。</p><h4 id="4-1-1光滑项惩罚"><a href="#4-1-1光滑项惩罚" class="headerlink" title="4.1.1光滑项惩罚"></a>4.1.1光滑项惩罚</h4><p>在<a href="https://www.researchgate.net/publication/314258063_Real-Time_Trajectory_Replanning_for_MAVs_using_Uniform_B-splines_and_3D_Circular_Buffer">Real-Time Trajectory Replanning for MAVs using Uniform B-splines and 3D Circular Buffer (researchgate.net)</a>中提出，光滑性惩罚被公式化为轨迹参数(加速度、加加速度等)的平方导数上的时间积分。由于<u>B样条曲线的凸包性</u>质，只要最小化轨迹 $\Phi$ 的二阶和三阶控制点的平方和就能够有效地减小加速度和加加速度的平方和。</p><p><img src="https://www.zhihu.com/equation?tex=J_s%3D%5Csum_%7Bi%3D1%7D%5E%7BN_c-2%7D%5Cleft%7C%5Cleft%7C+A_i+%5Cright%7C+%5Cright%7C_2%5E2%2B%5Csum_%7Bi%3D1%7D%5E%7BN_c-3%7D%5Cleft%7C%5Cleft%7C+J_i+%5Cright%7C+%5Cright%7C_2%5E2+%5Ctag%7B4%7D%5C%5C" alt=""></p><h4 id="4-1-2碰撞项惩罚"><a href="#4-1-2碰撞项惩罚" class="headerlink" title="4.1.2碰撞项惩罚"></a>4.1.2碰撞项惩罚</h4><p>碰撞惩罚使控制点远离障碍物，这是通过采用安全间隙和惩罚控制点${d_{ij}}&lt; {s_f}$来实现的。为了进一步优化，我们构造了一个二次连续可微惩罚函数，并随着${d_{ij}}$的减小而抑制其斜率，从而得到分段函数</p><p><img src="https://www.zhihu.com/equation?tex=j_c%28i%2Cj%29+%3D+%5Cbegin%7Bcases%7D+0%2C+%26+c_%7Bij%7D%5Cleq0+%5C%5C+c_%7Bij%7D%5E3%2C+%26+0%5Cleq+c_%7Bij%7D%5Cleq+s_f+++%5C%5C+3s_fc_%7Bij%7D%5E2-3s_f%5E2c_%7Bij%7D%2Bs_f%5E3%2C%26+c_%7Bij%7D%3Es_f+%5C%5C+%5Cend%7Bcases%7D%5C%5C++%5Ctag%7B5%7D" alt=""></p><p> <img src="https://www.zhihu.com/equation?tex=c_%7Bij%7D%3Ds_f-d_%7Bij%7D" alt=""> </p><p>对所有控制点的惩罚求和得到总的碰撞项惩罚</p><p><img src="https://www.zhihu.com/equation?tex=J_c%3D%5Csum_%7Bi%3D1%7D%5E%7BN_c%7Dj_c%28Q_i%29+%5Ctag%7B6%7D%5C%5C" alt=""></p><p>相比于传统用三线性插值的方法求碰撞项的梯度，我们直接计算二次连续可微惩罚函数对${Q_i}$的导数来得到梯度：</p><p><img src="https://www.zhihu.com/equation?tex=%5Cfrac%7B%5Cpartial%7Bj_c%7D%7D%7B%5Cpartial%7BQ_i%7D%7D+%3D%5Csum_%7Bi%3D1%7D%5E%7BN_c%7D%5Csum_%7Bj%3D1%7D%5E%7BN_p%7D+%5Cbegin%7Bcases%7D+0%2C+%26+c_%7Bij%7D%5Cleq0+%5C%5C+-3c_%7Bij%7D%5E2%2C+%26+0%5Cleq+c_%7Bij%7D%5Cleq+s_f+++%5C%5C+-6s_fc_%7Bij%7D%2B3s_f%5E2%2C%26+c_%7Bij%7D%3Es_f+%5C%5C+%5Cend%7Bcases%7D%5C%5C++%5Ctag%7B7%7D" alt=""></p><h4 id="4-1-3可行项惩罚"><a href="#4-1-3可行项惩罚" class="headerlink" title="4.1.3可行项惩罚"></a>4.1.3可行项惩罚</h4><p>通过限制轨迹在每一维上的高阶导数来保证其可行性。由于<u>凸包的性质</u>，对控制点的导数进行约束足以约束整个b样条。<code>F()</code>为为每个维度的高阶导数构造的惩罚函数。</p><p><img src="https://www.zhihu.com/equation?tex=J_d%3D%5Csum_%7Bi%3D1%7D%5E%7BN_c-1%7D%5Comega_vF%28V_i%29%2B%5Csum_%7Bi%3D1%7D%5E%7BN_c-2%7D%5Comega_aF%28A_i%29%2B%5Csum_%7Bi%3D1%7D%5E%7BN_c-3%7D%5Comega_jF%28J_i%29%5Ctag%7B8%7D+%5C%5C" alt=""></p><p><img src="https://www.zhihu.com/equation?tex=F%28C%29%3D%5Csum_%7Br%3Dx%2Cy%2Cz%7Df%28c_r%29%5Ctag%7B9%7D%5C%5C" alt=""></p><p><img src="https://www.zhihu.com/equation?tex=f%28c_r%29%3D%5Cbegin%7Bcases%7D+a_1c_r%5E2%2Bb_1c_r%2Bc_1%2C+%26+c_r%3C-c_j+%5C%5C+%28-%5Clambda+c_m-c_r%29%5E3%2C+%26+-c_j+%3C+c_r+%3C+-%5Clambda+c_m+++%5C%5C+0%2C%26+-%5Clambda+c_m+%5Cleq+c_r+%5Cleq+%5Clambda+c_m+%5C%5C+%28c_r-%5Clambda+c_m%29%5E3%2C+%26+%5Clambda+c_m+%3C+c_r+%3C+c_j+++%5C%5C+a_2c_r%5E2%2Bb_2c_r%2Bc_2%2C%26+c_r%3Ec_j+%5C%5C+%5Cend%7Bcases%7D%5C%5C++%5Ctag%7B10%7D" alt=""></p><blockquote><p>可以看出问题建模中应用的惩罚函数全部是多项式和，这有利于降低求解最优化问题的复杂度。（轻量化算法）</p></blockquote><h3 id="4-2最优化求解方法"><a href="#4-2最优化求解方法" class="headerlink" title="4.2最优化求解方法"></a>4.2最优化求解方法</h3><p>目标函数 <em>J</em>会随着新障碍物的加入而不断改变，这就要求求解器能够快速重启，并且目标函数主要由二次项组成，所以Hessian（黑塞矩阵）信息能够加快收敛速度。但得到精确的Hessian消耗大量计算机资源。所以我们使用拟牛顿法（ quasi-Newton methods)从梯度信息中来近似计算Hessian。</p><p>在对比了<code>Barzilai-Borwein method</code>、<code>truncated Newton method</code>和<code>L-BFGS methodh</code>后发现，<code>L-BFGS</code>表现最好，平衡了重启损失和逆Hessian估计的准确性。L-BFGS从以前的目标函数评估近似Hessian，但需要一系列的迭代，以达到一个相对准确的估计。</p><blockquote><p>上述几种最优化求解方法在我们的最优化课本中就有提及</p></blockquote><h2 id="五、时间重分配和轨迹细化"><a href="#五、时间重分配和轨迹细化" class="headerlink" title="五、时间重分配和轨迹细化"></a>五、时间重分配和轨迹细化</h2><p>基于<strong>四节</strong>中得到的安全轨迹生成一条时间分配合理的均匀B样条曲线轨迹  ${\Phi_s}$ ，然后使用各向异性曲线拟合方法（an anisotropic curve fifitting method）使 ${\Phi_f}$ 自由地优化其控制点，以满足高阶导数约束，同时保持与 ${\Phi_s}$几乎相同的导数形状。</p><p>首先计算超过限制(下标m表示限制的最大值)的比例,</p><p><img src="https://www.zhihu.com/equation?tex=r_e%3Dmax%5C%7B+%5Cleft%7C+V_%7Bi%2Cr%7D%2Fv_m+%5Cright%7C%2C%5Csqrt%7B%5Cleft%7C+A_%7Bj%2Cr%7D%2Fa_m+%5Cright%7C%7D%2C%5Csqrt%5B3%5D%7B%5Cleft%7C+J_%7Bk%2Cr%7D%2Fj_m+%5Cright%7C%7D%2C1+%5C%7D%5Ctag%7B14%7D" alt=""></p><p>  ${r_s}$  表明相对于 ${\Phi_s}$ ，  ${\Phi_f}$  需要分配多少时间。  ${V_i}$ ， ${A_j}$ 和 ${J_k}$  分别与  ${\triangle{t}}$ 的一次、二次和三次成反比，通过与时间的反比关系可以降低速度及其导数，则 ${\Phi_f}$ 的新时间间隔为</p><p><img src="https://www.zhihu.com/equation?tex=%5CDelta+t%27%3Dr_e%5CDelta+t+%5Ctag%7B15%7D" alt=""></p><p>通过求解一个如下的闭式的最小二乘问题，在速度及其导数的约束下初始生成时间跨度为${\triangle{t}^{\prime}}$  的轨迹${\Phi_f}$ ，同时保持与 ${\Phi_s}$  相同的形状和控制点数。然后重新计算光滑项惩罚和可行性项惩罚得到新的目标函数</p><p><img src="https://www.zhihu.com/equation?tex=Q%3Dargmin%5C+J%E2%80%99%3D%5Clambda_sJ_s%2B%5Clambda_dJ_d%2B%5Clambda_fJ_f++%5Ctag%7B16%7D" alt=""></p><p>${J_f}$   被定义为从 ${{\Phi_f}(\alpha T^{\prime})}$ 到 ${{\Phi_s}(\alpha T)}$各向异性位移的积分，其中 $T$  和 $T^{\prime}$ 为轨迹  ${\Phi_s}$ 和  ${\Phi_f}$ 的时长，  其中$\alpha  \in \left[ {0,1} \right]$。</p><p>由于拟合的对象曲线 ${\Phi_s}$ 已经无碰撞，对于两条曲线，我们用带有低权重的轴向位移 ${d_a}$ 来放宽光滑调整限制，用高权重的径向位移 ${d_r}$ 来<u>防止碰撞</u>。如图5所示，我们使用球状度量来使在同一球体表面的位移产生相同的惩罚。<u>(关于径向位移和轴向位移应该在具体算法中了解，目前我认为轴向位移为该点的切线方向，而径向方向为该切线的垂线方向)</u></p><p><img src="https://pic2.zhimg.com/80/v2-8e5a619734086459c284ecb62fdd20a5_720w.jpg" alt="原文图5"></p><p>用于度量 ${{\Phi_f}(\alpha T^{\prime})}$ 惩罚大小的椭圆体是一个以  ${{\Phi_f}(\alpha T^{\prime})}$  为中心的椭圆，其半长轴长度为a、其半短轴长度为b。则轴向位移  ${d_a}$  和径向位移 ${d_r}$  为</p><p><img src="https://www.zhihu.com/equation?tex=d_a%28%5Calpha+T%27%29%3D%28%5CPhi_f%28%5Calpha+T%27%29-%5CPhi_s%28%5Calpha+T%29%29%5Ccdot+%5Cfrac%7B%5Cdot%7B%5CPhi_s%7D%28%5Calpha+T%29%7D%7B%5Cleft%7C+%5Cleft%7C+%5Cdot%7B%5CPhi_s%7D%28%5Calpha+T%29+%5Cright%7C+%5Cright%7C%7D%5C%5C++d_r%28%5Calpha+T%27%29%3D%5Cleft%7C+%5Cleft%7C+%28%5CPhi_f%28%5Calpha+T%27%29-%5CPhi_s%28%5Calpha+T%29%29%5Ctimes+%5Cfrac%7B%5Cdot%7B%5CPhi_s%7D%28%5Calpha+T%29%7D%7B%5Cleft%7C+%5Cleft%7C+%5Cdot%7B%5CPhi_s%7D%28%5Calpha+T%29+%5Cright%7C+%5Cright%7C%7D+%5Cright%7C+%5Cright%7C+%5Ctag%7B17%7D" alt=""></p><p>则拟合惩罚项可表示为为<img src="https://www.zhihu.com/equation?tex=J_f%3D%5Cint_%7B0%7D%5E%7B1%7D%5Cleft%5B+%5Cfrac%7Bd_a%28%5Calpha+T%27%29%5E2%7D%7Ba%5E2%7D%2B%5Cfrac%7Bd_r%28%5Calpha+T%27%29%5E2%7D%7Bb%5E2%7D+%5Cright%5Dd%5Calpha+%5Ctag%7B18%7D" alt=""></p><p>其中a和b分别是椭圆的半长轴和半短轴，径向位移对应的半短轴b使径向位移的惩罚权重增大以防止<u>防止碰撞</u>。</p><p>式18被离散化为有限个数的点  ${\Phi _f}(\alpha \Delta {t^\prime })$ 和  ${\Phi _s}(\alpha \Delta t)$  ，其中</p><p> <img src="https://www.zhihu.com/equation?tex=k+%5Cin+%5Cmathbb%7BR%7D" alt=""> </p><p> <img src="https://www.zhihu.com/equation?tex=0+%5Cleq+k+%5Cleq+%5Clfloor+T%2F%5CDelta+t+%5Crfloor" alt=""> </p><h2 id="六、实验结果"><a href="#六、实验结果" class="headerlink" title="六、实验结果"></a>六、实验结果</h2><h3 id="6-1实验细节"><a href="#6-1实验细节" class="headerlink" title="6.1实验细节"></a>6.1实验细节</h3><p>规划算法框架如算法2所示。</p><p><img src="https://pic2.zhimg.com/80/v2-b6480d2395342827e87fa79dbf6313d9_720w.jpg" alt="算法2"></p><p>算法2伪代码说明</p><p><code>FindInit(Q,G)</code>生成一条满足终端约束但不考虑障碍物的B样条曲线 $\Phi$对应的控制点</p><p><code>IsCollisionFree(E，Q)</code>判断控制点是否在环境中是无碰撞的，有碰撞时输出false</p><p><code>CheckAndAddObstacleInfo(E,Q)</code>检测控制点所在障碍物，并添加障碍物信息({p,v}对以及距离场)</p><p><code>EvaluatePenalty(Q)</code>根据问题建模构造控制点相应惩罚项J以及对应的梯度</p><p><code>OneStepOptimize(J,G)</code>求解惩罚项的最小化问题，即最优化求解，从而得到满足惩罚项的最小化的控制点位置，即完成第一步的轨迹优化</p><p><code>IsFeasible(Q)</code>判断由控制点Q决定的轨迹是否可行(主要是速度以及其多阶导数否超过限制最大值)</p><p><code>ReAllocateTime(Q)</code>通过重新分配由控制点Q决定的轨迹的时间降低速度以及其多阶导数，使其满足各类速度约束。</p><p><code>CurveFittingOptimize(Q)</code>将之前的惩罚中碰撞项替换为曲线拟合项，求解惩罚项最优化问题。使其在满足新时间间隔的前提下，拟合由旧控制点构成的轨迹得到新轨迹，在继承旧轨迹的无碰撞特性的前提下实现约束下可行性。</p><p>我们设置B样条曲线的阶数${p_b} = 3$，控制点的个数 ${N_c}$ 为25左右，具体由规划预期距离（大约7m）和初始的邻近点间距（大约0.3m）决定。这些参数根据经验通过平衡了问题的复杂度和自由度而得到。 </p><p>因为根据B样条曲线的性质，一个控制点只影响周围的轨迹，所以算法的时间复杂度为 $O({N_c})$。</p><p>L-BFGS的复杂性在相同的相对公差上也是线性的。(The complexity of L-BFGS is also linear on the same relative tolerance)</p><p>在无碰撞路径搜索中，我们采用A星算法进行轨迹优化，而它生成的轨迹$\Gamma $常常贴着障碍物。因此，我们可以直接在A星算法生成的轨迹$\Gamma $上选择定位点（anchor point）p 而不用搜索障碍物的表面(这里才真正解释出了<u>第三节中A星算法</u>的作用)。对于图3b中定义的向量$R_i $，通过均匀b样条参数化的性质，可以推导出</p><p><img src="https://www.zhihu.com/equation?tex=R_i%3D%5Cfrac%7BQ_%7Bi%2B1%7D-Q_%7Bi-1%7D%7D%7B2%5Ctriangle+t%7D+%5Ctag%7B19%7D" alt=""></p><p>这里的$R_i$是图3中确定{p,v}对的关键。</p><blockquote><p>读到这里，我们再看看论文中的图3。</p><p>第一步：根据生成一条满足终端约束但不考虑障碍物的B样条曲线 $\Phi$，依靠A星算法生成的轨迹$\Gamma $。</p><p>第二步：根据公式(19)通过B样条曲线的控制点计算出向量$R_i $，再做出垂直于$R_i $的平面$\Psi $，平面$\Psi $与依靠A星算法生成的轨迹$\Gamma $相交于定位点（anchor point）p，连接对应的定位点（anchor point）p与控制点Q，才得到直线<em>l</em>,而向量v是向量<em>l</em>对应的由起点控制点Q到终点定位点p对应的<u>单位向量</u>。(v可能是生成以后不会再变化的)。到这里才生成了{p,v}对。</p><p>论文第3节的内容到第6节才彻底解释清楚，真是折磨死我了！！！</p><p>note：思考问题：关于{p,v}对过程中，为什么将定位点p定位到A星算法生成的贴着障碍物的轨迹上，而不直接定位在障碍物表面？</p><p>我的理解：在A星算法生成的轨迹(线)定位的算力成本比直接定位在障碍物表面(面)低。</p></blockquote><p><img src="https://pic1.zhimg.com/80/v2-d6026bb43ab95c45706b88ea954f22d8_720w.jpg" alt="原文图3"></p><p>为了进一步保证安全，对最终轨迹周围具有固定半径的圆形管道进行碰撞检查，以保证轨迹和障碍物之间有足够的距离，优化程序在未检测到碰撞时停止。</p><p>真实世界的实验环境与<a href="https://link.zhihu.com/?target=https%3A//github.com/HKUST-Aerial-Robotics/Teach-Repeat-Replan">Teach-Repeat-Replan</a>相同，此外，我们还修改了Intel  RealSense的ROS驱动程序，使激光发射器每隔一帧频闪。这使得该设备在发射器的帮助下输出高质量的深度图像，以及不受激光干扰的双目图像。修改后的驱动也是开源的。</p><h3 id="6-2优化算法的比较"><a href="#6-2优化算法的比较" class="headerlink" title="6.2优化算法的比较"></a>6.2优化算法的比较</h3><h3 id="6-3有-无ESDF的轨迹生成"><a href="#6-3有-无ESDF的轨迹生成" class="headerlink" title="6.3有/无ESDF的轨迹生成"></a>6.3有/无ESDF的轨迹生成</h3><h3 id="6-4多个规划器的比较"><a href="#6-4多个规划器的比较" class="headerlink" title="6.4多个规划器的比较"></a>6.4多个规划器的比较</h3><h3 id="6-5真实世界实验"><a href="#6-5真实世界实验" class="headerlink" title="6.5真实世界实验"></a>6.5真实世界实验</h3><h2 id="七、结论和未来的工作"><a href="#七、结论和未来的工作" class="headerlink" title="七、结论和未来的工作"></a>七、结论和未来的工作</h2><p>该方法仍然存在一些缺陷，即A*搜索引入的局部最小值和统一时间重新分配引入的保守轨迹。因此，我们将致力于执行拓扑规划，以逃避局部最小值，并重新制定问题，以生成接近最优的轨迹。规划器为静态环境设计，无需处理缓慢移动的障碍物（低于0.5m/s）。在未来，我们将通过移动对象检测和拓扑规划来研究动态环境导航。</p><p>以上内容根据博客：<a href="https://zhuanlan.zhihu.com/p/366372048">EGO-Planner论文阅读笔记 - 知乎 (zhihu.com)</a>进行补充与修改。</p><h2 id="源码精读"><a href="#源码精读" class="headerlink" title="源码精读"></a>源码精读</h2><p>未完待更新</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fast planner </tag>
            
            <tag> ego planner </tag>
            
            <tag> 无人机 </tag>
            
            <tag> 轨迹优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无人机智能化的实现路径(高飞大佬)</title>
      <link href="/2021/10/21/wu-ren-ji-zhi-neng-hua-de-shi-xian-lu-jing/"/>
      <url>/2021/10/21/wu-ren-ji-zhi-neng-hua-de-shi-xian-lu-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="轻量化"><a href="#轻量化" class="headerlink" title="轻量化"></a>轻量化</h2><p>减少算法中的冗余部分以保持无人机的良好性能。 </p><p>相关论文：</p><p>fast-planner相关文章:</p><p><a href="https://ieeexplore.ieee.org/document/9422918">RAPTOR: Robust and Perception-Aware Trajectory Replanning for Quadrotor Fast Flight | IEEE Journals &amp; Magazine | IEEE Xplore</a></p><p><a href="https://ieeexplore.ieee.org/abstract/document/8758904">Robust and Efficient Quadrotor Trajectory Generation for Fast Autonomous Flight | IEEE Journals &amp; Magazine | IEEE Xplore</a></p><p><a href="https://ieeexplore.ieee.org/document/9196996">Robust Real-time UAV Replanning Using Guided Gradient-based Optimization and Topological Paths | IEEE Conference Publication | IEEE Xplore</a></p><p>ego-planner相关文章：</p><p><a href="https://ieeexplore.ieee.org/abstract/document/9309347">EGO-Planner: An ESDF-Free Gradient-Based Local Planner for Quadrotors | IEEE Journals &amp; Magazine | IEEE Xplore</a></p><p>ESDF相关文章</p><p><a href="https://ieeexplore.ieee.org/document/8968199">FIESTA: Fast Incremental Euclidean Distance Fields for Online Motion Planning of Aerial Robots | IEEE Conference Publication | IEEE Xplore</a></p><h2 id="鲁棒性"><a href="#鲁棒性" class="headerlink" title="鲁棒性"></a>鲁棒性</h2><p>增强无人机抗干扰能力，使之安全可靠。</p><p>相关论文：</p><p> <a href="https://link.springer.com/chapter/10.1007/978-3-030-71151-1_4">CMPCC: Corridor-Based Model Predictive Contouring Control for Aggressive Drone Flight | SpringerLink</a>       </p><p><a href="https://ieeexplore.ieee.org/document/9560898">VID-Fusion: Robust Visual-Inertial-Dynamics Odometry for Accurate External Force Estimation | IEEE Conference Publication | IEEE Xplore</a>                                       </p><p><a href="https://ieeexplore.ieee.org/document/9531427">External Forces Resilient Safe Motion Planning for Quadrotor | IEEE Journals &amp; Magazine | IEEE Xplore</a></p><p><a href="https://ieeexplore.ieee.org/document/8721075">VIMO: Simultaneous Visual Inertial Model-Based Odometry and Force Estimation | IEEE Journals &amp; Magazine | IEEE Xplore</a>（非高飞组）</p><p><a href="https://ieeexplore.ieee.org/document/8968126">Robust Trajectory Planning for a Multirotor against Disturbance based on Hamilton-Jacobi Reachability Analysis | IEEE Conference Publication | IEEE Xplore</a>（非高飞组）</p><h2 id="敏捷化"><a href="#敏捷化" class="headerlink" title="敏捷化"></a>敏捷化</h2><p>在一定约束条件下，使无人机实时且可行地通过快速调整姿态完成规划任务。</p><p>相关论文：</p><p><a href="https://ieeexplore.ieee.org/document/9102390">Teach-Repeat-Replan: A Complete and Robust System for Aggressive Flight in Complex Environments | IEEE Journals &amp; Magazine | IEEE Xplore</a></p><p><a href="https://arxiv.org/abs/2103.00190v2">[2103.00190v2] Geometrically Constrained Trajectory Optimization for Multicopters (arxiv.org)</a></p><p><a href="https://arxiv.org/abs/2105.10276v2">[2105.10276v2] Fast-Racing: An Open-source Strong Baseline for SE(3) Planning in Autonomous Drone Racing (arxiv.org)</a></p><p><a href="https://ieeexplore.ieee.org/document/7138978">Efficient mixed-integer planning for UAVs in cluttered environments | IEEE Conference Publication | IEEE Xplore</a>（非高飞组）</p><p><a href="https://ieeexplore.ieee.org/document/5980409">Minimum snap trajectory generation and control for quadrotors | IEEE Conference Publication | IEEE Xplore</a>（非高飞组）</p><p><a href="https://journals.sagepub.com/doi/full/10.1177/1756829320924528">Robust autonomous flight in cluttered environment using a depth sensor - Liang Lu, Alexander Yunda, Adrian Carrio, Pascual Campoy, 2020 (sagepub.com)</a>（非高飞组）</p><p><a href="https://experts.illinois.edu/en/publications/fast-uav-trajectory-optimization-using-bilevel-optimization-with-">Fast UAV Trajectory Optimization using Bilevel Optimization with Analytical Gradients — University of Illinois Urbana-Champaign</a>（非高飞组）</p><p><a href="https://dl.acm.org/doi/10.1145/2558904">GPOPS-II: A MATLAB Software for Solving Multiple-Phase Optimal Control Problems Using hp-Adaptive Gaussian Quadrature Collocation Methods and Sparse Nonlinear Programming: ACM Transactions on Mathematical Software: Vol 41, No 1</a>（非高飞组）</p><h2 id="多无人机编队"><a href="#多无人机编队" class="headerlink" title="多无人机编队"></a>多无人机编队</h2><p>实现<strong>微小</strong>、<strong>智能</strong>、<strong>合作</strong>、<strong>去中心化</strong>的<strong>无人机编队</strong></p><p>相关论文：</p><p><a href="https://arxiv.org/abs/2011.04183v1">[2011.04183v1] EGO-Swarm: A Fully Autonomous and Decentralized Quadrotor Swarm System in Cluttered Environments (arxiv.org)</a></p><p><a href="https://export.arxiv.org/abs/2109.07682">[2109.07682] Distributed Swarm Trajectory Optimization for Formation Flight in Dense Environments (arxiv.org)</a></p><p><a href="https://arxiv.org/abs/2106.12481">[2106.12481] Decentralized Spatial-Temporal Trajectory Planning for Multicopter Swarms (arxiv.org)</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>轻量化、强鲁棒性、敏捷化常常互相关联，而这三者是实现<strong>微小</strong>、<strong>智能</strong>、<strong>合作</strong>、<strong>去中心化</strong>的<strong>无人机编队</strong>的关键所在。</p><p>未完待补充~~~</p><p>参考：<a href="https://www.bilibili.com/video/BV1Jq4y1T7QD?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click">Fastlab实验室高飞大佬讲解的导论内容</a></p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无人机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fast-planner初代论文笔记2</title>
      <link href="/2021/10/20/fast-planner-chu-dai-lun-wen-bi-ji-2/"/>
      <url>/2021/10/20/fast-planner-chu-dai-lun-wen-bi-ji-2/</url>
      
        <content type="html"><![CDATA[<p>对应代码地址：<a href="https://github.com/HKUST-Aerial-Robotics/Fast-Planner">GitHub - HKUST-Aerial-Robotics/Fast-Planner: A Robust and Efficient Trajectory Planner for Quadrotors</a></p><p>对应文章地址：<a href="https://ieeexplore.ieee.org/document/9196996">Robust Real-time UAV Replanning Using Guided Gradient-based Optimization and Topological Paths | IEEE Conference Publication | IEEE Xplore</a></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p> 基于梯度的轨迹优化(GTO)在四旋翼飞行器的轨迹重新规划中得到了广泛的应用。但是它存在局部极小值，这不仅对安全是致命的，而且不利于航行的顺利进行。本文提出了一种基于GTO的再规划方法，系统地解决了这一问题。针对不可行的局部极小点，提出了一种<strong>路径引导优化(PGO)方法</strong>，大大提高了重规划的成功率。提出了一种<strong>拓扑路径搜索算法</strong>，用于捕获三维环境中不同的有用路径集合，每条路径引导一个独立的轨迹优化。它激活了对解决方案空间的更全面的探索，并输出了更优的重新规划的轨迹。基准评估结果表明，该方法在重新规划成功率和最优性方面优于目前最先进的方法。给出了具有挑战性的主动自主飞行实验，证明了该方法的鲁棒性。</p><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><h3 id="基于梯度的路径优化"><a href="#基于梯度的路径优化" class="headerlink" title="基于梯度的路径优化"></a>基于梯度的路径优化</h3><p> GTO是一种主要的路径生成算法，把路径生成看作一个最小化目标函数的非线性优化问题。问题：局部最小值</p><h3 id="拓扑路径规划"><a href="#拓扑路径规划" class="headerlink" title="拓扑路径规划"></a>拓扑路径规划</h3><p> 已经有人利用拓扑上不同路径的思想进行规划，其中寻找属于不同的同伦(同调)或可见不用形状类的路径。缺点：要么对象是二维平面，要么对象在3维空间，但是算法的复杂度过高。</p><h2 id="路径引导轨迹优化"><a href="#路径引导轨迹优化" class="headerlink" title="路径引导轨迹优化"></a>路径引导轨迹优化</h2><p>PATH-GUIDED    TRAJECTORY    OPTIMIZATION    ,PGO</p><h3 id="A-优化失效分析"><a href="#A-优化失效分析" class="headerlink" title="A. 优化失效分析"></a>A. 优化失效分析</h3><p> 如下图所示，优化失败的典型例子，当轨迹穿过ESDF(用橙色虚线表示)的“谷”(a)或“脊”(b)时，轨迹的相邻部分被推向相反的方向。红色箭头表示ESDF的梯度，黄色箭头表示目标函数的梯度。这个目标函数就是我们B问题公式化需要产生的函数。<br><img src="https://img-blog.csdnimg.cn/20210511103645488.png" alt=""> </p><p>对于这种情况，仅仅靠ESDF的梯度并不够，需要额外的信息(目标函数)。</p><h3 id="B-问题公式化-PGO的实现方法的数学形式"><a href="#B-问题公式化-PGO的实现方法的数学形式" class="headerlink" title="B. 问题公式化(PGO的实现方法的数学形式)"></a>B. 问题公式化(PGO的实现方法的数学形式)</h3><p> 文中提出的PGO方法是对上面GTO的改进，它把路径用B样条来表示。对于PGO方法，分为两步，第一个阶段产生一个过渡的预热轨迹（warmup trajectory），然后对这个warmup trajectory的平滑度以及与间隙值(与障碍物之间的)再进行优化。两个阶段如下图：<br><img src="https://img-blog.csdnimg.cn/20210511104613350.png" alt=" "><br> 第一阶段：a图的绿色是初始B样条轨迹，橙色的是几何引导路径，几何引导路径把初始轨迹拉到没有碰撞的地方形成预热路径（蓝色)</p><p>​    第二阶段：b图中，对预热路径再进一步进行平滑度和间隙值(与障碍物之间的)的优化，得到红色最终轨迹。这个几何引导路径通过A<em>或者RRT</em>等传统方法就可以得到，但本文用的是<strong>采样</strong>的方法(拓扑路径搜索 ,    TOPOLOGICAL    PATH    SEARCHING)得到这条引导路径。</p><p> 第一阶段的优化目标函数是：<br><img src="https://img-blog.csdnimg.cn/20210522155741955.png" alt=""><br>这里 f_s是轨迹平滑性惩罚函数，而f_g是引导路径和b样条轨迹之间的距离的惩罚代价，其定义如下，主要是利用模拟弹性力来构造惩罚函数：<br><img src="https://img-blog.csdnimg.cn/2021052215582930.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/2021052215593092.png" alt=""></p><p>第二阶段的优化目标函数如下，f_s是轨迹平滑性惩罚(成本)函数，f_c是在ESDF上评估的碰撞成本函数，当轨迹接近障碍物时，ESDF的碰撞成本迅速增长。再利用惩罚函数f_v与f_a对速度和加速度的不可行程度进行量化，第二阶段的主要内容参考<a href="https://ieeexplore.ieee.org/document/8758904">fast-planner文章：Robust and Efficient Quadrotor Trajectory Generation for Fast Autonomous Flight | IEEE Journals &amp; Magazine | IEEE Xplore</a>。</p><p><img src="https://img-blog.csdnimg.cn/20210522160705169.png" alt=""></p><h2 id="拓扑路径搜索"><a href="#拓扑路径搜索" class="headerlink" title="拓扑路径搜索"></a>拓扑路径搜索</h2><p>TOPOLOGICAL    PATH    SEARCHING</p><p>上面讲了用一个几何引导路径得到了一条相对最优的路径，但是这条路径可能并不是最好的。本文提出了一个采样的方法来寻找几条不同的路径来引导上面PGO。</p><h3 id="A-拓扑等价关系"><a href="#A-拓扑等价关系" class="headerlink" title="A. 拓扑等价关系"></a>A. 拓扑等价关系</h3><p>通过改进<a href="https://www.researchgate.net/publication/220122862_Path_Deformation_Roadmaps_Compact_Graphs_with_Useful_Cycles_for_Motion_Planning"> Path Deformation Roadmaps: Compact Graphs with Useful Cycles for Motion Planning </a>中的可见性不同形(visibility deformation，VD)</p><blockquote><p>可见性不同形：两条终点起点相同的轨迹，两者之间无障碍物(连线无碰撞，即可见)，但形状不相同</p></blockquote><p>对于等价性检查来说，VD的计算代价很高,要测试VD关系，应该计算一个可见性图，并在其中进行路径搜索，这比测试UVD的复杂性更高。</p><p>因此，提出一种均匀的可见性不同形(uniform visibility deformation,UVD)的定义：</p><p>存在两条可以被s∈[0,1]参数化的轨迹τ1(s)、 τ2(s)并且满足τ1(0) =τ2(0)， τ1(1) =τ2(1)，如果对所有情况，连接τ1(s)、τ2(s)的线段是无碰撞的。那么这两条轨迹属于均匀的可见性不同形(UVD)类。</p><p><img src="https://img-blog.csdnimg.cn/20210522163233453.png" alt=""></p><h3 id="B-拓扑路径图"><a href="#B-拓扑路径图" class="headerlink" title="B. 拓扑路径图"></a>B. 拓扑路径图</h3><p>设计拓扑路径的算法伪代码：</p><p><img src="https://img-blog.csdnimg.cn/20210522162830452.png" alt=""></p><p>设计拓扑路径的算法伪代码中函数的解释：</p><p><code>AddGuard(G,b)</code>增加guard节点到G中</p><p><code>sample()</code>通过采样节点，</p><p><code>VisibleGuard(G，Ps)</code>得到G中能观测到Ps的所有节点</p><p><code>.size(a)</code>计算节点个数（能观测到Ps）</p><p><code>Path(g1,c,g2)</code>连接connector点与guard点生成路径</p><p><code>SharedNeighbors(G,g1,g2)</code>从G体提取能够与g1、g2连接的连接点集</p><p><code>Equivalent(p1，p2)</code>判断是否的拓扑连接是是否相同</p><p><code>len(p)</code>计算路径长度</p><p><code>Replace(G，p，n)</code>替换connector点（p换下n）</p><p><code>distinct</code>bool型数据，true表示拓扑连接有差别，false表示拓扑连接无差别</p><p><code>t_max</code>时间限制</p><p><code>N_max</code>采样个数限制</p><p><code>G</code>所有guard点以及connect点的集合</p><p>在设计拓扑路径图中，我们引入了两种不同的图节点，即guard和connector，类似于Visibility-PRM。guard负责探索自由空间的不同部分，任何两个guard点g1和g2是彼此是不可见的(连接g1和g2的线段存在碰撞)。在主循环之前，在起始点和结束点创建两个guard点。每当采样点对所有其他guard都不可见时，就会在此点创建一个新的guard(第6-7行)。为了形成路线图的路径，使用连接器连接不同的guard(第7-19行)。当采样点恰好对两个guard可见时，就会创建一个新connector，要么连接guard以形成拓扑上不同的连接(第19-20行)，要么替换现有connector以创建更短的路径(第16-17行)。设置时间限制(t_max)或采样次数限制(N_max)来终止循环。其中起始点和终点之间的结点搜索算法参考<a href="https://www.sciencedirect.com/science/article/pii/S0921889016300495">Integrated online trajectory planning and optimization in distinctive topologies - ScienceDirect</a>。</p><p><img src="https://img-blog.csdnimg.cn/20210524113127738.png" alt=""></p><p>拓扑路径生成图如上，任何两个guard节点之间是看不到的，也就是它们的连线是碰撞的。每次在地图上采样一个点，如果这个点另外的任何一个guard都看不到，那么这个点就记作一个新的guard点。然后继续采样，如果一个采样点刚好可以被两个guard点看到，那么就把这个点记作connector，然后把这个connector和这两个guard点连起来。连接好以后做两个事：如果这是一条全新的拓扑路径，那么就保留，否则判断两条拓扑路径的长度，把长的那条去掉。</p><h3 id="C-路径缩短和修剪"><a href="#C-路径缩短和修剪" class="headerlink" title="C. 路径缩短和修剪"></a>C. 路径缩短和修剪</h3><p>如图7(e)所示，由算法1得到的一些路径可能会绕行。导致PGO的第一阶段会使轨迹过度变形，使轨迹变得不光滑。因此，需要通过算法2为深度优先搜索得到的每条路径P_r找到一个拓扑上等效的捷径路径P_s(如图8所示)。该算法首先将路径P_r一致地离散化为一组P_d点，而P_r的第一个点即为P_s的第一个点。在每次迭代中，如果P_s中的前一个点看不见P_d中的一个点(两点连线被障碍物占据的体素挡住了)(Line 3,4)，则第一个阻塞了P_s中的前一个点的视野的障碍物对应的占据的体素的中心点就可以被找到(Line 5)。然后通过以垂直于l_d与且与ESDF梯度共面的方向推离障碍物中心点得到新点P_o(Line 6)。之后，这个新点被添加Ps中(第7行)。这个过程一直持续到最后一个点。(离开的点)</p><p><img src="https://img-blog.csdnimg.cn/20210524114458852.png" alt=""></p><p>算法2伪代码函数</p><p><code>Disecreze(P)</code>将轨迹统一离散为点集</p><p><code>.front()</code>取点集中的前一个点</p><p><code>Line(a,b)</code>得到连接a和b的线段</p><p><code>LineVisib(l)</code>判断线段是否被障碍物遮挡</p><p><code>BlockPoint(l)</code>得到遮挡线段障碍物的体素的中心点</p><p><code>PushAwayObs(p,l)</code>以l方向推离点得到新点P_o</p><p><code>.push_back(p)</code>将P点加入点集</p><p><img src="https://img-blog.csdnimg.cn/20210524115705594.png" alt=""></p><h2 id="实时拓扑路径规划"><a href="#实时拓扑路径规划" class="headerlink" title="实时拓扑路径规划"></a>实时拓扑路径规划</h2><p>路径引导轨迹优化的算法输出了一组有效的路径，可以指导轨迹优化。我们将它们与PGO进行适当的集成，以便实时重新规划。在飞行过程中，特定视界内的一段全球轨道会被定期检查以确保安全。一旦检测到碰撞，拓扑路线图的构建就会在一个立方体内触发，这是由段的开始和结束位置以及(rx, ry, rz)指定立方体的大小决定的。从路线图中提取的路径被缩短和修剪，之后每条路径调用一个独立的PGO。</p><p>值得注意的是，可选择的UVD类的数量随着障碍的数量呈指数增长。因此，在复杂的环境中，为所有路径进行优化可能是很难的。由于这个原因，我们只选择第一次中的k_max中的最短路径，长度超过最短路径rmax的数倍的路径也被排除在外。这种策略限制了复杂性，不会导致潜在最优性的缺失，因为非常长的路径不太可能产生最优轨迹。在实际应用中，我们发现kmax = 5是充分的。</p><p>以上内容，本文参考<a href="https://blog.csdn.net/qq_39366151/article/details/116642551"> Robust Real-time UAV Replanning Using Guided Gradient-based Optimization and Topological Paths_无心留踪迹的博客-CSDN博客</a>进行修正与补充。</p><h2 id="源码精读"><a href="#源码精读" class="headerlink" title="源码精读"></a>源码精读</h2><p>未完待续~~~</p><p>参考文章：<a href="https://ieeexplore.ieee.org/document/9196996">Robust Real-time UAV Replanning Using Guided Gradient-based Optimization and Topological Paths | IEEE Conference Publication | IEEE Xplore</a></p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fast planner </tag>
            
            <tag> 无人机 </tag>
            
            <tag> 轨迹优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS中的CMakeLists.txt与package.xml</title>
      <link href="/2021/10/18/ros-zhong-de-cmakelists-txt-yu-package-xml/"/>
      <url>/2021/10/18/ros-zhong-de-cmakelists-txt-yu-package-xml/</url>
      
        <content type="html"><![CDATA[<h2 id="CMakeLists-txt文件编辑说明"><a href="#CMakeLists-txt文件编辑说明" class="headerlink" title="CMakeLists.txt文件编辑说明"></a>CMakeLists.txt文件编辑说明</h2><h3 id="编译功能包"><a href="#编译功能包" class="headerlink" title="编译功能包"></a>编译功能包</h3><p>节点的代码已经完成，C++是一种编译语言，在运行之前需要将代码编译成可执行文件，如果使用Python等解析语言编写代码，则不需要进行编译，可以省去此步骤。</p><p>ROS中的编译器使用的是CMake，编译规则通过功能包中的CMakeLists.txt文件设置，使用catkin命令创建的功能包中会自动生成该文件，已经配置多数编译选项，并且包含详细的注释，我们几乎不用查看相关的说明手册，稍作修改就可以编译自己的代码。</p><p>打开功能包中的CMakeLists.txt文件，找到以下配置项，去掉注释并稍作修改：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">include_directories(include  ${catkin_INCLUDE_DIRS})add_executable(talker  src/talker.cpp)target_link_libraries(talker  ${catkin_LIBRARIES})add_dependencies(talker  ${PROJECT_NAME}_generate_messages_cpp)    add_executable(listener  src/listener.cpp)target_link_libraries(listener  ${catkin_LIBRARIES})add_dependencies(talker  ${PROJECT_NAME}_generate_messages_cpp)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于这个较为简单的功能包，主要用到了以下四种编译配置项。</p><p>（1）include_directories</p><p>用于设置头文件的相对路径。全局路径默认是功能包的所在目录，比如功能包的头文件一般会放到功能包根目录下的include文件夹中，所以此处需要添加该文件夹。此外，该配置项还包含ROS catkin编译器默认包含的其他头文件路径，比如ROS默认安装路径、Linux系统路径等。</p><p>（2）add_executable</p><p>用于设置需要编译的代码和生成的可执行文件。第一个参数为期望生成的可执行文件的名称，后边的参数为<u>参与编译的源码文件（cpp）</u>，如果需要多个代码文件，则可在后面依次列出，中间使用空格进行分隔。</p><p>（3）target_link_libraries</p><p>用于设置链接库。很多功能需要使用系统或者第三方的库函数，通过该选项可以配置执行文件链接的库文件，其第一个参数与add_executable相同，是可执行文件的名称，后面依次列出需要链接的库。此处编译的Publisher和Subscriber没有使用其他库，添加默认链接库即可。</p><p>（4）add_dependencies</p><p>用于设置依赖。在很多应用中，我们需要定义语言无关的消息类型，消息类型会在编译过程中产生相应语言的代码，如果编译的可执行文件依赖这些动态生成的代码，则需要使用add_dependencies添加<code>${PROJECT_NAME}_generate_messages_cpp</code>配置，即该功能包动态产生的消息代码。该编译规则也可以添加其他需要依赖的功能包。<br>以上编译内容会帮助系统生成两个可执行文件：talker和listener，放置在工作空间的~/catkin_ws/devel/lib/<package name="">路径下。</package></p><h3 id="自定义话题消息"><a href="#自定义话题消息" class="headerlink" title="自定义话题消息"></a>自定义话题消息</h3><p>打开功能包的CMakeLists.txt文件，在find_package中添加消息生成依赖的功能包message_generation，这样在编译时才能找到所需要的文件：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">find_package(catkin  REQUIRED  COMPONENTS             geometry_msgs             roscpp             rospy             std_msgs             message_generation)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>catkin依赖也需要进行以下设置：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">catkin_package(……               CATKIN_DEPENDS  geometry_msgs  roscpp  rospy  std_msgs  message_runtime               ……)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后设置需要编译的msg文件：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">add_message_files(    FILES    Person.msg)generate_messages(DEPENDENCIES    std_msgs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相关热门文章</p><p><a href="https://blog.csdn.net/buzaishihaizi/article/details/78524929">ROS中的CMakelists_buzaishihaizi的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_44095441/article/details/88643752">ROS中的CMakeLists.txt详解_听涯的博客-CSDN博客</a></p><h2 id="package-xml文件编辑说明"><a href="#package-xml文件编辑说明" class="headerlink" title="package.xml文件编辑说明"></a>package.xml文件编辑说明</h2><p>参考热门文章</p><p><a href="https://blog.csdn.net/qq_43247439/article/details/107101646">ROS中的package.xml的使用_Alex的博客-CSDN博客</a></p><p><a href="https://sychaichangkun.gitbooks.io/ros-tutorial-icourse163/content/chapter2/2.5.html">package.xml · 中国大学MOOC———《机器人操作系统入门》讲义 (gitbooks.io)</a></p>]]></content>
      
      
      <categories>
          
          <category> ROS学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS中的launch启动文件</title>
      <link href="/2021/10/18/ros-zhong-de-launch-qi-dong-wen-jian/"/>
      <url>/2021/10/18/ros-zhong-de-launch-qi-dong-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="launch启动文件"><a href="#launch启动文件" class="headerlink" title="launch启动文件"></a>launch启动文件</h1><p>到目前为止，每当我们需要运行一个ROS节点或工具时，都需要打开一个新的终端运行一个命令。当系统中的节点数量不断增加时，“每个节点一个终端”的模式会变得非常麻烦。那么有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的。</p><p>启动文件（Launch File）便是ROS中一种同时启动多个节点的途径，它还可以自动启动ROS Master节点管理器，并且可以实现每个节点的各种配置，为多个节点的操作提供很大便利。</p><h2 id="1-基本元素"><a href="#1-基本元素" class="headerlink" title="1 基本元素"></a>1 基本元素</h2><p>·首先来看一个简单的launch文件，对其产生初步的概念。</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;launch&gt;    &lt;node  pkg="turtlesim"  name="sim1"  type="turtlesim_node"/&gt;    &lt;node  pkg="turtlesim"  name="sim2"  type="turtlesim_node"/&gt;&lt;/launch&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个简单而完整的launch文件，采用XML的形式进行描述，包含一个根元素<code>&lt;launch&gt;</code>和两个节点元素<code>&lt;node&gt;</code>。</p><h3 id="1-1-lt-launch-gt"><a href="#1-1-lt-launch-gt" class="headerlink" title="1.1 <launch>"></a>1.1 <code>&lt;launch&gt;</code></h3><p>XML文件必须包含一个根元素，launch文件中的根元素采用<launch>标签定义，文件中的其他内容都必须包含在这个标签中：</launch></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">&gt;</span></span>  …  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-lt-node-gt"><a href="#1-2-lt-node-gt" class="headerlink" title="1.2 <node>"></a>1.2 <code>&lt;node&gt;</code></h3><p>启动文件的核心是启动ROS节点，采用<code>&lt;node&gt;</code>标签定义，语法如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span>  <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>package-name<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>executable-name<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node-name<span class="token punctuation">"</span></span>  <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从上面的定义规则可以看出，<u>在启动文件中启动一个节点需要三个属性：pkg、type和name。其中pkg定义节点所在的功能包名称，type定义节点的可执行文件名称，这两个属性等同于在终端中使用rosrun命令执行节点时的输入参数。name属性用来定义节点运行的名称</u>，将覆盖节点中init()赋予节点的名称。这是三个最常用的属性，在某些情况下，我们还有可能用到以下属性。<br>·output=”screen”：将节点的标准输出打印到终端屏幕，默认输出为日志文档。<br>·respawn=”true”：复位属性，该节点停止时，会自动重启，默认为false。<br>·required=”true”：必要节点，当该节点终止时，launch文件中的其他节点也被终止。<br>·ns=”namespace”：命名空间，为节点内的相对名称添加命名空间前缀。<br>·args=”arguments”：节点需要的输入参数。<br>实际应用中的launch文件往往会更加复杂，使用的标签也会更多，如本书后续内容中一个启动机器人的launch文件如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span>  <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mrobot_bringup<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mrobot_bringup<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mrobot_bringup<span class="token punctuation">"</span></span>  <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>  <span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span>  <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>urdf_file<span class="token punctuation">"</span></span>  <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find  xacro)/xacro  --inorder  <span class="token punctuation">'</span>$(find  mrobot_  description)/urdf/mrobot_with_rplidar.urdf.xacro<span class="token punctuation">'</span><span class="token punctuation">"</span></span>  <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_description<span class="token punctuation">"</span></span>  <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg  urdf_file)<span class="token punctuation">"</span></span>  <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>joint_state_publisher<span class="token punctuation">"</span></span>  <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>joint_state_publisher<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>joint_state_publisher<span class="token punctuation">"</span></span>  <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span>  <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_state_publisher<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_state_publisher<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>state_publisher<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish_frequency<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>double<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5.0<span class="token punctuation">"</span></span>  <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base2laser<span class="token punctuation">"</span></span>  <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tf<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>static_transform_publisher<span class="token punctuation">"</span></span>  <span class="token attr-name">args</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0  0  0  0  0  0  1  /base_link  /laser  50<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span>  <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_pose_ekf<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_pose_ekf<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_pose_ekf<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span>  <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robot_pose_ekf/odom_combined<span class="token punctuation">"</span></span>  <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odom_combined<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>freq<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10.0<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sensor_timeout<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish_tf<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odom_used<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imu_used<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vo_used<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>output_frame<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odom<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span>  <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find  mrobot_bringup)/launch/rplidar.launch<span class="token punctuation">"</span></span>  <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目前，我们只关注其中的标签元素，除了上面介绍的<code>&lt;launch&gt;</code>和<code>&lt;node&gt;</code>，这里还出现了<code>&lt;arg&gt;</code>、<code>&lt;param&gt;</code>、<code>&lt;remap&gt;</code>，这些都是常用的标签元素。</p><h2 id="2-参数设置"><a href="#2-参数设置" class="headerlink" title="2　参数设置"></a>2　参数设置</h2><p>为了方便设置和修改，launch文件支持参数设置的功能，类似于编程语言中的变量声明。关于参数设置的标签元素有两个：<code>&lt;param&gt;</code>和<code>&lt;arg&gt;</code>，一个代表parameter，另一个代表argument。这两个标签元素翻译成中文都是“参数”的意思，但是这两个“参数”的意义是完全不同的。</p><h3 id="2-1-lt-param-gt"><a href="#2-1-lt-param-gt" class="headerlink" title="2.1  <param>"></a>2.1  <code>&lt;param&gt;</code></h3><p>parameter是ROS系统运行中的参数，存储在参数服务器中。在launch文件中通过<param>元素加载parameter；launch文件执行后，parameter就加载到ROS的参数服务器上了。每个活跃的节点都可以通过ros：：param：：get()接口来获取parameter的值，用户也可以在终端中通过rosparam命令获得parameter的值。<br><code>&lt;param&gt;</code>的使用方法如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>output_frame<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>odom<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行launch文件后，output_frame这个parameter的值就设置为odom，并且加载到ROS参数服务器上了。但是在很多复杂的系统中参数的数量很多，如果这样一个一个地设置会非常麻烦，ROS也为我们提供了另外一种类似的参数（<code>&lt;rosparam&gt;</code>）加载方式：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rosparam</span>  <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(find  2dnav_pr2)/config/costmap_common_params.yaml<span class="token punctuation">"</span></span>  <span class="token attr-name">command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>load<span class="token punctuation">"</span></span>  <span class="token attr-name">ns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>local_costmap<span class="token punctuation">"</span></span>  <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>&lt;rosparam&gt;</code>可以帮助我们将一个YAML格式文件中的参数全部加载到ROS参数服务器中，需要设置command属性为“load”，还可以选择设置命名空间“ns”。</p><h3 id="2-2-lt-arg-gt"><a href="#2-2-lt-arg-gt" class="headerlink" title="2.2<arg>"></a>2.2<code>&lt;arg&gt;</code></h3><p>argument是另外一个概念，类似于launch文件内部的<code>局部变量</code>，仅限于launch文件使用，便于launch文件的重构，与ROS节点内部的实现没有关系。<br>设置argument使用<code>&lt;arg&gt;</code>标签元素，语法如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>arg-name<span class="token punctuation">"</span></span>  <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>  <span class="token punctuation">"</span>arg-value<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>launch文件中需要使用到argument时，可以使用如下方式调用：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg  arg-name)<span class="token punctuation">"</span></span>  <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span>  <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>package<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type  <span class="token punctuation">"</span></span>  <span class="token attr-name">args</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(arg  arg-name)<span class="token punctuation">"</span></span>  <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-重映射机制"><a href="#3-重映射机制" class="headerlink" title="3　重映射机制"></a>3　重映射机制</h2><p>ROS的设计目标是提高代码的复用率，所以ROS社区中的很多功能包我们都可以拿来直接使用，而不需要关注功能包的内部实现。那么问题来了，别人的功能包的接口不一定和我们的系统兼容呀？<br>ROS提供一种重映射的机制，简单来说就是取别名，类似于C++中的别名机制，我们不需要修改别人的功能包的接口，只需要将接口名称重映射一下，取一个别名，我们的系统就认识了（接口的数据类型必须相同）。launch文件中的<code>&lt;remap&gt;</code>标签可以帮助我们实现这个重映射功能。<br>比如turtlebot的键盘控制节点发布的速度控制指令话题可能是/turtlebot/cmd_vel，但是我们自己的机器人订阅的速度控制话题是/cmd_vel，这时使用<remap>就可以轻松解决问题，将/turtlebot/cmd_vel重映射为/cmd_vel，我们的机器人就可以接收到速度控制指令了：</remap></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remap</span>  <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/turtlebot/cmd_vel<span class="token punctuation">"</span></span>  <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/cmd_vel<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重映射机制在ROS中的使用非常广泛，也非常重要，方法不止这一种，也可以在终端中实现重映射。</p><h2 id="4-嵌套复用"><a href="#4-嵌套复用" class="headerlink" title="4　嵌套复用"></a>4　嵌套复用</h2><p>在复杂的系统中，launch文件往往有很多，这些launch文件之间也会存在依赖关系。如果要直接复用一个已有launch文件中的内容，可以使用<code>&lt;include&gt;</code>标签包含其他launch文件，这与C语言中的include几乎是一样的。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span>  <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(dirname)/other.launch<span class="token punctuation">"</span></span>  <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>launch是ROS框架中非常实用、灵活的功能，它类似于一种高级编程语言，可以帮助我们管理启动系统时的方方面面。在使用ROS的过程中，很多情况下我们并不需要编写大量代码，仅需要使用已有的功能包，编辑一下launch文件就可以完成很多机器人功能。<br>本节仅介绍了launch中最为常用的一些标签元素，还有更多高级的标签元素可以通过访问<a href="http://wiki.ros.org/roslaunch/XML">roslaunch/XML - ROS Wiki</a>来学习。</p><p>参考文献：</p><p>[1] ROS机器人开发实践，古月居</p>]]></content>
      
      
      <categories>
          
          <category> ROS学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无人机学习规划</title>
      <link href="/2021/10/16/wu-ren-ji-xue-xi/"/>
      <url>/2021/10/16/wu-ren-ji-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h2><p>这个下载一本工具书来随时查随时用就可以了，大部分时候我都是网上查指令。</p><p>推荐书籍: Linux命令行与shell脚本编程大全.第3版.pdf</p><h2 id="ROS"><a href="#ROS" class="headerlink" title="ROS"></a>ROS</h2><p>初学肯定是看古月居的</p><p>参考<a href="https://www.bilibili.com/video/BV1zt411G7Vn?from=search&amp;seid=17947951904162855689&amp;spm_id_from=333.337.0.0">【古月居】古月·ROS入门21讲 | 一学就会的ROS机器人入门教程_哔哩哔哩_bilibili</a></p><p>现在我推荐ros melodic（大部分开源兼容版本）+VSC编程</p><p>参考<a href="https://zhuanlan.zhihu.com/p/275654322">vscode开发ROS1(3)-创建第一个ROS项目 - 知乎 (zhihu.com)</a></p><h2 id="无人机入门"><a href="#无人机入门" class="headerlink" title="无人机入门"></a>无人机入门</h2><p><a href="https://www.bilibili.com/video/BV1my4y1v7yC">多旋翼飞行器设计与控制[官方原版]_哔哩哔哩_bilibili</a></p><p>上面是相当于研究基础，现在就要涉及无人机知识，北航全权组是无人机控制入门讲得最好的组，我本科毕业设计很多内容是来源于他们组。图书馆应该也有全权老师的书，尽量接过来看。</p><h2 id="阿木实验室Prometheus项目跑起来"><a href="#阿木实验室Prometheus项目跑起来" class="headerlink" title="阿木实验室Prometheus项目跑起来"></a>阿木实验室Prometheus项目跑起来</h2><p><a href="https://github.com/amov-lab/Prometheus/wiki/">Home · amov-lab/Prometheus Wiki (github.com)</a></p><p>重点学习</p><p>Demo学习 - 规划模块</p><p>Demo学习 - 规划模块</p><p>Demo学习 - SLAM模块</p><p>这里就是涉及到无人机控制、无人机轨迹优化、无人机SLAM等可以发文章的部分了，里面无人机多机等的研究价值不大了，可以跑着玩。</p><h2 id="浙大高飞组"><a href="#浙大高飞组" class="headerlink" title="浙大高飞组"></a>浙大高飞组</h2><p>这个是现在无人机届的真神，很多人都在看他，他发表了很多篇文章在IROS，ICRA等顶刊上面，而且注意所有代码都是开源的，而且大多数项目不是仿真全部都是有实践性！开发能力贼恐怖，所在在FASTlab实验室真的可以说是中国大陆无人机第一所。而高飞博士所在所就是大疆创始人汪涛所在的香港科技大学HKUST-Aerial-Robotics实验室，高飞很多文章是和大疆直接合作开发的。</p><p>高飞老师的无人机研发思路可以参考<a href="https://www.bilibili.com/video/BV1Jq4y1T7QD?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click">网课</a>，高飞老师最强的是无人机轨迹优化，其他的文章的创新也是很牛，现在也开始做多无人机的编队运动了。</p><p>高飞老师的开源项目横跨这两个所，所以都要给出。</p><h1 id="HKUST-Aerial-Robotics-Group："><a href="#HKUST-Aerial-Robotics-Group：" class="headerlink" title="HKUST Aerial Robotics Group："></a>HKUST Aerial Robotics Group：</h1><p><a href="https://github.com/HKUST-Aerial-Robotics/">HKUST Aerial Robotics Group (github.com)</a></p><h1 id="ZJU-FAST-Lab"><a href="#ZJU-FAST-Lab" class="headerlink" title="ZJU FAST Lab"></a>ZJU FAST Lab</h1><p><a href="https://github.com/ZJU-FAST-Lab/">ZJU FAST Lab (github.com)</a></p><p>高飞老师的文章都写在<a href="https://ustfei.com/">Dr. Fei Gao’s Home Page (ustfei.com)</a>，最好全部下载下来，仔细看，我最近看的是ego-planner比较多，但是高飞老师属于自成一派，一篇文章往往有很多文章的积累。</p><h2 id="无人机推荐连接"><a href="#无人机推荐连接" class="headerlink" title="无人机推荐连接"></a>无人机推荐连接</h2><p>下面是一些大组，但是了解不太多。</p><p><a href="https://www.kumarrobotics.org/">Vijay Kumar Lab (kumarrobotics.org)</a></p><p><a href="http://rpg.ifi.uzh.ch/">Robotics and Perception Group (uzh.ch)</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无人机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用PSP-CaRS框架撰写与工程相关的研究型文章</title>
      <link href="/2021/10/07/shi-yong-psp-cars-kuang-jia-zhuan-xie-yu-gong-cheng-xiang-guan-de-yan-jiu-xing-wen-zhang/"/>
      <url>/2021/10/07/shi-yong-psp-cars-kuang-jia-zhuan-xie-yu-gong-cheng-xiang-guan-de-yan-jiu-xing-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h2 id="1-CaRS与PSP简介"><a href="#1-CaRS与PSP简介" class="headerlink" title="1    CaRS与PSP简介"></a>1    CaRS与PSP简介</h2><h3 id="1-1-CaRS简介"><a href="#1-1-CaRS简介" class="headerlink" title="1.1 CaRS简介"></a>1.1 CaRS简介</h3><p>CaRS全称为Create a Research Space（创造研究空间），是研究人员用来分析研究型文章（Research article，RA）引言写作的一种标准化模型。本文以2004年的CaRS模型进行介绍，其特点为gap-focused（以不足为重点）。其整体结构如下图所示。</p><p><img src="https://tvax2.sinaimg.cn/large/007mx13gly1gv6v1vsn13j60sk0mgagv02.jpg" alt="英文原版CaRS结构"></p><p><img src="https://tva1.sinaimg.cn/large/007mx13gly1gv7120i76tj60sy0p3go402.jpg" alt="中文版CaRS结构"></p><p>但在学生将CaRs应用于引言写作中时常常出现“it was difficult for students to grasp the concept of “topic generalization of increasing specificity.”“（对学生难说，很难抓住越来越多的特殊研究对象中的共同主题的概念）的问题，其起因就在于it is abstract and thus difficult for some students to apply（这个共同主题太过抽象以至于学生很难去将其应用到具体问题。）</p><h3 id="1-2-PSP"><a href="#1-2-PSP" class="headerlink" title="1.2 PSP"></a>1.2 PSP</h3><p>一种不那么抽象因而更容易应用的方法是用一个问题和一个解决方案来描述一个人的研究，也就是问题解决方案模式（problem-solution patterns， PSP）。事实上，许多工程研究可以看作是解决问题的练习。由于问题-解决对在许多基于工程应用的研究中是自然和固有的，所以工科学生从问题解决的角度思考是很自然的，其特点是problem-focused（以问题为重点）。</p><h2 id="2-PSP-CaRS模型"><a href="#2-PSP-CaRS模型" class="headerlink" title="2 PSP-CaRS模型"></a>2 PSP-CaRS模型</h2><h3 id="2-1-PSP-CaRS结合的理论基础"><a href="#2-1-PSP-CaRS结合的理论基础" class="headerlink" title="2.1 PSP-CaRS结合的理论基础"></a>2.1 PSP-CaRS结合的理论基础</h3><p>在讨论PSP-CaRS模型之前，我们要先回答“引言撰写到底是gap-focused（以不足为重点，CaRS的特点）还是problem-focused（以问题为重点，PSP的特点）”的问题</p><p>首先，problems涉及作者认为应该解决的困难，而gap则凸显了目前研究的缺失，这两点都非常重要。</p><p>其次，进展和提出的解决方案通常是线性递增的。（Progress（对应gap-focused） and proposed solutions（对应problem-focused） are often incremental.）</p><p>举个例子，如果你家里有一面墙破了个洞，你面对的问题是怎么拿砖头放到堵上那面墙上洞的位置，然而当你一次一次通过用手搬砖头（proposed solutions，提出的解决方案）解决这个问题后，你其实也是补上了这个墙（progress，进展）。也就是说提出解决方案的过程也就是推进进展。（创造一种新的纳米材料来克服腐蚀或实现无线电力传输——经常演变成一个活跃的研究空间或领域）。</p><p>也就是说Progress与proposed solutions时常是相互关联的，所以gap-focused（以不足为重点）还是problem-focused（以问题为重点）在一篇文章中时常也是相互关联的。</p><p>所以我们应该结合PSP与CaRS来撰写引言，利用gap-focused与problem-focused的关联性使目前应该解决的问题以及目前研究的缺失都得以体现，并且通过PSP模型在工科学生群体的易用性解决利用CaRS撰写引言时主题过于抽象的问题。</p><h3 id="2-2-PSP-CaRS模型的具体结构"><a href="#2-2-PSP-CaRS模型的具体结构" class="headerlink" title="2.2 PSP-CaRS模型的具体结构"></a>2.2 PSP-CaRS模型的具体结构</h3><p>PSP-CaRS模型的具体结构如下图所示，接下来，我们介绍该模型在实际文章中的应用。</p><p><img src="https://tvax1.sinaimg.cn/large/007mx13gly1gv6wb3h073j60i80gajvl02.jpg" alt="英文版PSP-CaRS结构"></p><p><img src="https://tva1.sinaimg.cn/large/007mx13gly1gv711no0idj60sy0rnjuc02.jpg" alt="中文版PSP-CaRS结构"></p><h3 id="2-3-PSP-CaRS模型在引言中的实际应用"><a href="#2-3-PSP-CaRS模型在引言中的实际应用" class="headerlink" title="2.3 PSP-CaRS模型在引言中的实际应用"></a>2.3 PSP-CaRS模型在引言中的实际应用</h3><p><img src="https://tvax3.sinaimg.cn/large/007mx13gly1gv6wvl43sej60jz0hw7c302.jpg" alt="英文实际应用"></p><p>纳米结构(NS)金属和合金由于其高强度(或高硬度)而有望表现出高耐磨性[1-5]。<u>(SM1.1：背景描述)</u>然而，许多报道表明，与粗晶材料相比，NS材料的强度和硬度显著提高，但其磨损性能并没有改善甚至恶化[6-11]。<u>(SM1.2：问题描述)</u>这种现象可能是由于NS材料的延性较差，在滑动磨损时容易脆性断裂将材料从表面去除[6 - 9,12]。因此，在保持高强度的同时，提高塑性可以提高NS材料的耐磨性。</p><p>然而，强度和延性通常呈反比关系(即，增加强度牺牲延性，反之亦然)。幸运的是，通过在NS基体中引入粗晶粒，一些多模态结构(MMS)材料已经生产出来，在具有高强度的同时，塑性显著增强[13-14]。塑性的提高是由于粗晶粒的存在而增强应变硬化能力的结果。此外，晶粒尺寸的多模态分布，而不是均匀的晶粒尺寸分布，可能导致晶粒通过复杂的应变路径变形，这也有利于位错的储存和应变硬化[13]。这些发现表明了通过形成多模态结构来生产高耐磨NS材料的可能性。<u>(SM1.3：先前研究的解决方案评估以及描述)</u>虽然已经生产出了许多同时具有高强度和高延展性的MMS金属和合金[13-16]，但对MMS材料的磨损性能的研究却很少。<u>(SM2.1:指出现有研究的不足或增加已知内容或说明要解决的问题)</u></p><p>本研究旨在研究多模态结构对材料磨损性能的影响。<u>(SM3.1:通报当前研究内容)</u>通过强塑性变形(SPD)和后续热处理，制备了多模态层合(MML) TiZrAlV，提高了其在真空中的耐磨性。讨论了MML组织对磨损性能的影响。<u>(SM3.4+SM3.5：研究结果+研究思路)</u></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://ieeexplore.ieee.org/document/8245860">[1] Khaw L L ,  Tan W W . Establishing a Territory in the Introductions of Engineering Research Articles Using a Problem-Solution Patterns Approach[J]. IEEE Transactions on Professional Communication, 2018:1-18.</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章写作技巧与文献阅读查找经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习路线</title>
      <link href="/2021/09/26/c-xue-xi-lu-xian/"/>
      <url>/2021/09/26/c-xue-xi-lu-xian/</url>
      
        <content type="html"><![CDATA[<p>二  基础四大件：<br>1.数据结构与算法 《大话数据结构》c/c++  ，《算法第四版》 java ，《剑指offer》<br>2.计算机网络《tcp/ip详解》<br>3.操作系统  《深入理解操作系统》<br>4.设计模式 《大话设计模式》<br>三 应用于编程<br>1.linux使用<br>《linux就该这么学》<br>2.编译和调试<br>GUN官方GCC和GDB文档<br>《debugging  with gdb 》中文版<br>《跟我一起写makefile》陈皓<br>3.linux环境编程<br>《unix环境高级编程》<br>《linux高性能服务器编程》<br>《posix多线程程序设计》</p>]]></content>
      
      
      <categories>
          
          <category> 学习经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文献阅读</title>
      <link href="/2021/09/23/wen-xian-yue-du/"/>
      <url>/2021/09/23/wen-xian-yue-du/</url>
      
        <content type="html"><![CDATA[<h1 id="利用坚果云-pdf-expert实现文档云同步-可参考文献管理的多平台操作-Mendeley-坚果云-PDFexpert-——让iPad-pencil-成为科研生产力"><a href="#利用坚果云-pdf-expert实现文档云同步-可参考文献管理的多平台操作-Mendeley-坚果云-PDFexpert-——让iPad-pencil-成为科研生产力" class="headerlink" title="利用坚果云+pdf expert实现文档云同步,可参考文献管理的多平台操作(Mendeley +坚果云+PDFexpert) ——让iPad+pencil 成为科研生产力)"></a>利用坚果云+pdf expert实现文档云同步,可参考<a href="https://zhuanlan.zhihu.com/p/107061669">文献管理的多平台操作(Mendeley +坚果云+PDFexpert) ——让iPad+pencil 成为科研生产力)</a></h1><h1 id="使用endnote"><a href="#使用endnote" class="headerlink" title="使用endnote"></a>使用endnote</h1>]]></content>
      
      
      <categories>
          
          <category> 学习经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章写作技巧与文献阅读查找经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记（数据分析）</title>
      <link href="/2021/09/21/python-xue-xi-bi-ji/"/>
      <url>/2021/09/21/python-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="学习书籍-《利用Python进行数据分析·第2版》"><a href="#学习书籍-《利用Python进行数据分析·第2版》" class="headerlink" title="学习书籍: 《利用Python进行数据分析·第2版》"></a>学习书籍: <a href="https://www.bookstack.cn/read/pyda-2e-zh/README.md">《利用Python进行数据分析·第2版》</a></h1><h2 id="第02章-Python语法基础"><a href="#第02章-Python语法基础" class="headerlink" title="第02章 Python语法基础"></a><a href="https://www.bookstack.cn/read/pyda-2e-zh/2.md">第02章 Python语法基础</a></h2><h3 id="2-3-Python语法基础"><a href="#2-3-Python语法基础" class="headerlink" title="2.3 Python语法基础"></a><a href="https://www.bookstack.cn/read/pyda-2e-zh/2.3.md">2.3 Python语法基础</a></h3><h4 id="组织代码方式"><a href="#组织代码方式" class="headerlink" title="组织代码方式"></a>组织代码方式</h4><p><em>Python使用空白字符（tab和空格）来组织代码，而不是通过括号（）</em></p><p>例子：排序算法的for循环</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">for x in array</span><span class="token punctuation">:</span>    <span class="token key atrule">if x &lt; pivot</span><span class="token punctuation">:</span>        less.append(x)    <span class="token key atrule">else</span><span class="token punctuation">:</span>        greater.append(x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Python的语句不需要用分号结尾。但是，分号却可以用来给同在一行的语句切分</em></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">a = 5; b = 6; c = 7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="万物皆对象"><a href="#万物皆对象" class="headerlink" title="万物皆对象"></a>万物皆对象</h4><p>Python语言的一个重要特性就是它的对象模型的一致性。每个数字、字符串、数据结构、函数、类、模块等等，都是在Python解释器的自有“盒子”内，它被认为是Python对象。每个对象都有类型（例如，字符串或函数）和内部数据。在实际中，这可以让语言非常灵活，因为函数也可以被当做对象使用。</p><p><em>注释标记为#</em></p><p>例子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">results = <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">for line in file_handle</span><span class="token punctuation">:</span>    <span class="token comment"># keep the empty lines for now</span>    <span class="token comment"># if len(line) == 0:</span>    <span class="token comment">#   continue</span>    results.append(line.replace('foo'<span class="token punctuation">,</span> 'bar'))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="变量与参数传递"><a href="#变量与参数传递" class="headerlink" title="变量与参数传递"></a>变量与参数传递</h4><p>创建一个整数列表：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a = <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设将a赋值给一个新变量b：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b = a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在Python中，a和b实际上是同一个对象，即原有列表[1, 2, 3]。你可以在a中添加一个元素，然后检查b：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a.append(4)In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bOut<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p></p><h4 id="python是强类型化语言"><a href="#python是强类型化语言" class="headerlink" title="python是强类型化语言"></a>python是强类型化语言</h4><p><em>python是强类型化语言，意味着每个对象都有明确的类型（或类）（str型不能与int型相加），默许转换只会发生在特定的情况下（float型能与int型相加）</em><br>例子1：str型不能与int型相加<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> '5' + 5<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>TypeError                                 Traceback (most recent call last)&lt;ipython<span class="token punctuation">-</span>input<span class="token punctuation">-</span>16<span class="token punctuation">-</span>f9dbf5f0b234<span class="token punctuation">&gt;</span> in &lt;module<span class="token punctuation">&gt;</span>()<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 1 '5' + 5<span class="token key atrule">TypeError</span><span class="token punctuation">:</span> must be str<span class="token punctuation">,</span> not int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>例子2：loat型能与int型相加<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a = 4.5In <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b = 2<span class="token comment"># String formatting, to be visited later</span>In <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> print('a is <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> b is <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>'.format(type(a)<span class="token punctuation">,</span> type(b)))a is &lt;class 'float'<span class="token punctuation">&gt;</span><span class="token punctuation">,</span> b is &lt;class 'int'<span class="token punctuation">&gt;</span>In <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a / bOut<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2.25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p><strong><em>isinstance</em></strong>函数 : 检查对象是某个类型的实例,可以用类型元组，检查对象的类型是否在元组中</p><p><em>Python的对象通常都有属性（其它存储在对象内部的Python对象）和方法（对象的附属函数可以访问对象的内部数据）</em></p><h4 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h4><p><strong>Iterable object（可迭代对象）</strong><br>可迭代（Iterable） 对象是数组的泛化。这个概念是说任何对象都可以被定制为可在 for..of 循环中使用的对象。</p><p>数组是可迭代的。但不仅仅是数组。很多其他内建对象也都是可迭代的。例如字符串也是可迭代的。</p><p>如果从技术上讲，对象不是数组，而是表示某物的集合（列表，集合），for..of 是一个能够遍历它的很好的语法</p><p><strong><em>iter</em></strong>函数 : 判断对象是否是可迭代的</p><p>可定义<strong><em>isiterable</em></strong>函数<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def isiterable(obj)</span><span class="token punctuation">:</span>    <span class="token key atrule">try</span><span class="token punctuation">:</span>        iter(obj)        return True    <span class="token key atrule">except TypeError</span><span class="token punctuation">:</span> <span class="token comment"># not iterable</span>        return False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><strong><em>isiterable</em></strong>函数 ：返回字符串以及大多数Python集合类型为True<p></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> isiterable('a string')Out<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>In <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> isiterable(<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>In <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> isiterable(5)Out<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h4><p>在Python中，模块就是一个有.py扩展名、包含Python代码的文件。假设有以下模块：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># some_module.py</span>PI = 3.14159<span class="token key atrule">def f(x)</span><span class="token punctuation">:</span>    return x + 2def g(a<span class="token punctuation">,</span> <span class="token key atrule">b)</span><span class="token punctuation">:</span>    return a + b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>如果想从同目录下的另一个文件访问<em>some_module.py</em>中定义的变量和函数，可以：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">import some_moduleresult = some_module.f(5)pi = some_module.PI<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">from some_module import f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> PIresult = g(5<span class="token punctuation">,</span> PI)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用as关键词，你可以给引入起不同的变量名：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">import some_module as smfrom some_module import PI as pi<span class="token punctuation">,</span> g as gfr1 = sm.f(pi)r2 = gf(6<span class="token punctuation">,</span> pi)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二元运算符和比较运算符"><a href="#二元运算符和比较运算符" class="headerlink" title="二元运算符和比较运算符"></a>二元运算符和比较运算符</h4><p><em>要判断两个引用是否指向同一个对象，可以使用**</em>is<strong><em>方法。</em></strong>is not<strong><em>方法可以判断两个对象是不同的（因为</em></strong>list<em>**总是创建一个新的Python列表（即复制），我们可以断定c是不同于a的。使用is比较与==运算符不同，如下）：</em></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a = <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b = aIn <span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c = list(a)In <span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a is bOut<span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>In <span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a is not cOut<span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>In <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a == cOut<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tvax3.sinaimg.cn/large/007mx13gly1gum94jxbkuj60mj0elqao02.jpg" alt="二元运算符和比较运算符"></p><h4 id="可变与不可变对象"><a href="#可变与不可变对象" class="headerlink" title="可变与不可变对象"></a>可变与不可变对象</h4><p><em>Python中的大多数对象(列表、字典、NumPy数组，和用户定义的类型（类）)都是可变对象），即这些对象或包含的值可以被修改，而字符串和元组为不可变对象</em></p><p><img src="https://tva1.sinaimg.cn/large/007mx13gly1gumtsu38qdj60mg068n0l02.jpg" alt="标量类型"></p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#单引号或双引号来写字符串</span>a ='one way of writing a string'b ="another way"<span class="token comment">#对于有换行符的字符串，可以使用三引号，’’’或”””写字符串</span>    c ="""    This is a longer string that    spans multiple lines    """<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Python的字符串是不可变的，不能修改字符串</p><p>str函数：可以被转化为字符串</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a =5.6In<span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s = str(a)In<span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">]</span><span class="token punctuation">:</span>print(s)5.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>字符串是一个序列的Unicode字符，因此可以像其它序列，比如列表和元组一样处理：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s ='python'In<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(s)Out<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'n'</span><span class="token punctuation">]</span>In<span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'pyt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>语法s[:3]被称作切片，适用于许多Python序列。</p><p><em>反斜杠是转义字符</em></p><p>意思是它备用来表示特殊字符，比如换行符\n或Unicode字符。要写一个包含反斜杠的字符串，需要进行转义：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s ='12\\34'In<span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span>print(s)12\34<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p></p><p><em>可以在字符串前面加一个r(代表raw)，表明字符就是它自身</em></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a ='this is the first half 'In<span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b ='and this is the second half'In<span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a + bOut<span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'this is the first half and this is the second half'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>字符串对象有format方法，可以替换格式化的参数为字符串，产生一个新的字符串：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> template ='<span class="token punctuation">{</span>0<span class="token punctuation">:</span>.2f<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">:</span>s<span class="token punctuation">}</span> are worth US$<span class="token punctuation">{</span>2<span class="token punctuation">:</span>d<span class="token punctuation">}</span>'<span class="token comment">#{0:.2f}表示格式化第一个参数为带有两位小数的浮点数。</span><span class="token comment">#{1:s}表示格式化第二个参数为字符串。</span><span class="token comment">#{2:d}表示格式化第三个参数为一个整数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>要替换参数为这些格式化的参数，我们传递format方法一个序列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span> template.format(4.5560<span class="token punctuation">,</span><span class="token string">'Argentine Pesos'</span><span class="token punctuation">,</span>1)Out<span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'4.56 Argentine Pesos are worth US$1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="字节和Unicode"><a href="#字节和Unicode" class="headerlink" title="字节和Unicode"></a>字节和Unicode</h4><p>在Python 3及以上版本中，Unicode是一级的字符串类型，这样可以更一致的处理ASCII和Non-ASCII文本。在老的Python版本中，字符串都是字节，不使用Unicode编码。<br>相关函数：<strong><em>encode</em></strong> <strong><em>decode</em></strong></p><h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><p>Python中的布尔值有两个，True和False</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>str、bool、int和float也是函数，可以用来转换类型：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">91</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s ='3.14159'In<span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">:</span> fval = float(s)In<span class="token punctuation">[</span><span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">:</span> type(fval)Out<span class="token punctuation">[</span><span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">:</span> floatIn<span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">:</span> int(fval)Out<span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">3</span>In<span class="token punctuation">[</span><span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bool(fval)Out<span class="token punctuation">[</span><span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token boolean important">True</span>In<span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bool(0)Out<span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token boolean important">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="None"><a href="#None" class="headerlink" title="None"></a>None</h4><p>None是Python的空值类型。如果一个函数没有明确的返回值，就会默认返回None：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a =NoneIn<span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a isNoneOut<span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token boolean important">True</span>In<span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b =5In<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b isnotNoneOut<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token boolean important">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>None也常常作为函数的默认参数</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">def add_and_maybe_multiply(a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token key atrule">c=None)</span><span class="token punctuation">:</span>    result = a + b<span class="token key atrule">if c isnotNone</span><span class="token punctuation">:</span>        result = result * creturn result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，None不仅是一个保留字，还是唯一的NoneType的实例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">:</span> type(None)Out<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">:</span>NoneType<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h4><p>Python内建的datetime模块提供了datetime、date和time类型。datetime类型结合了date和time，是最常使用的：</p><p>Python内建的datetime模块提供了datetime、date和time类型。datetime类型结合了date和time，是最常使用的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">:</span>from datetime import datetime<span class="token punctuation">,</span> date<span class="token punctuation">,</span> timeIn<span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dt = datetime(2011<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>21)In<span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dt.dayOut<span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">29</span>In<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dt.minuteOut<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据datetime实例，你可以用date和time提取出各自的对象：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dt.date()Out<span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime.date(2011<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>29)In<span class="token punctuation">[</span><span class="token number">107</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dt.time()Out<span class="token punctuation">[</span><span class="token number">107</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime.time(20<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>21)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>strftime方法可以将datetime格式化为字符串：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dt.strftime('%m/%d/%Y %H<span class="token punctuation">:</span>%M')Out<span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'10/29/2011 20:30'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p></p><p>strptime可以将字符串转换成datetime对象：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime.strptime('20091031'<span class="token punctuation">,</span>'%Y%m%d')Out<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime.datetime(2009<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p></p><p><img src="https://tva3.sinaimg.cn/large/007mx13gly1gun84pnb4aj60j80b178b02.jpg" alt="格式化指令"></p><p><u>聚类或对时间序列进行分组</u>，替换datetimes的time字段有时会很有用。例如，用0替换分和秒：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dt.replace(minute=0<span class="token punctuation">,</span> second=0)Out<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime.datetime(2011<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为datetime.datetime是不可变类型，上面的方法会产生新的对象。</p><p>两个datetime对象的差会产生一个datetime.timedelta类型：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dt2 = datetime(2011<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span>30)In<span class="token punctuation">[</span><span class="token number">112</span><span class="token punctuation">]</span><span class="token punctuation">:</span> delta = dt2 <span class="token punctuation">-</span> dtIn<span class="token punctuation">[</span><span class="token number">113</span><span class="token punctuation">]</span><span class="token punctuation">:</span> deltaOut<span class="token punctuation">[</span><span class="token number">113</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime.timedelta(17<span class="token punctuation">,</span>7179)In<span class="token punctuation">[</span><span class="token number">114</span><span class="token punctuation">]</span><span class="token punctuation">:</span> type(delta)Out<span class="token punctuation">[</span><span class="token number">114</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime.timedelta<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果timedelta(17, 7179)指明了timedelta将17天、7179秒的编码方式。</p><p>将timedelta添加到datetime，会产生一个新的偏移datetime：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dtOut<span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime.datetime(2011<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>21)In<span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dt + deltaOut<span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime.datetime(2011<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span>30)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a><strong>控制流</strong></h4><p>Python有若干内建的关键字进行条件逻辑、循环和其它控制流操作。<br>if、elif和else</p><h5 id="if"><a href="#if" class="headerlink" title="if"></a><em>if</em></h5><p>if是最广为人知的控制流语句。它检查一个条件，如果为True，就执行后面的语句：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">if x &lt;0</span><span class="token punctuation">:</span>print('It's negative')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>if后面可以跟一个或多个elif，所有条件都是False时，还可以添加一个else：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">if x &lt;0</span><span class="token punctuation">:</span>print('It's negative')<span class="token key atrule">elif x == 0</span><span class="token punctuation">:</span>    print('Equal to zero')<span class="token key atrule">elif 0 &lt; x &lt; 5</span><span class="token punctuation">:</span>    print('Positive but smaller than 5')<span class="token key atrule">else</span><span class="token punctuation">:</span>    print('Positiveand larger than or equal to 5')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>如果某个条件为True，后面的elif就不会被执行。当使用and和or时，复合条件语句是从左到右执行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a =5; b =7In<span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c =8; d =4In<span class="token punctuation">[</span><span class="token number">119</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token key atrule">if a &lt; b or c &gt; d</span><span class="token punctuation">:</span><span class="token punctuation">...</span>..<span class="token punctuation">:</span>print('Made it')Made it<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，c &gt; d不会被执行，因为第一个比较是True：</p><p>也可以把比较式串在一起：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">:</span>4<span class="token punctuation">&gt;</span>3<span class="token punctuation">&gt;</span>2<span class="token punctuation">&gt;</span>1Out<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token boolean important">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p></p><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a><em>for循环</em></h5><p>for循环是在一个集合（列表或元组）中进行迭代，或者就是一个迭代器。for循环的标准语法是：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">for value in collection</span><span class="token punctuation">:</span><span class="token comment"># do something with value</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p></p><p>你可以用continue使for循环提前，跳过剩下的部分。看下面这个例子，将一个列表中的整数相加，跳过None：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">sequence =<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>None<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>None<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>total =0<span class="token key atrule">for value in sequence</span><span class="token punctuation">:</span><span class="token key atrule">if value isNone</span><span class="token punctuation">:</span>continue    total += value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>可以用break跳出for循环。下面的代码将各元素相加，直到遇到5：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">sequence =<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>total_until_5 =0<span class="token key atrule">for value in sequence</span><span class="token punctuation">:</span><span class="token key atrule">if value ==5</span><span class="token punctuation">:</span>break    total_until_5 += value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>break只中断for循环的最内层，其余的for循环仍会运行：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">121</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token key atrule">for i in range(4)</span><span class="token punctuation">:</span><span class="token key atrule">.....:for j in range(4)</span><span class="token punctuation">:</span><span class="token key atrule">.....:if j &gt; i</span><span class="token punctuation">:</span><span class="token punctuation">...</span>..<span class="token punctuation">:</span>break<span class="token punctuation">...</span>..<span class="token punctuation">:</span>print((i<span class="token punctuation">,</span> j))<span class="token key atrule">.....</span><span class="token punctuation">:</span>(0<span class="token punctuation">,</span>0)(1<span class="token punctuation">,</span>0)(1<span class="token punctuation">,</span>1)(2<span class="token punctuation">,</span>0)(2<span class="token punctuation">,</span>1)(2<span class="token punctuation">,</span>2)(3<span class="token punctuation">,</span>0)(3<span class="token punctuation">,</span>1)(3<span class="token punctuation">,</span>2)(3<span class="token punctuation">,</span>3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>如果集合或迭代器中的元素序列（元组或列表），可以用for循环将其方便地拆分成变量：<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">for a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token key atrule">c in iterator</span><span class="token punctuation">:</span><span class="token comment"># do something</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p></p><h5 id="While循环"><a href="#While循环" class="headerlink" title="While循环"></a><em>While循环</em></h5><p>while循环指定了条件和代码，当条件为False或用break退出循环，代码才会退出：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">x =256total =0<span class="token key atrule">while x &gt;0</span><span class="token punctuation">:</span><span class="token key atrule">if total &gt;500</span><span class="token punctuation">:</span>break    total += x    x = x //2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><h5 id="pass非操作语句"><a href="#pass非操作语句" class="headerlink" title="pass非操作语句"></a><em>pass非操作语句</em></h5><p>pass是Python中的非操作语句。代码块不需要任何动作时可以使用（作为未执行代码的占位符）；因为Python需要使用空白字符划定代码块，所以需要pass：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">if x &lt;0</span><span class="token punctuation">:</span>print('negative<span class="token tag">!')</span><span class="token key atrule">elif x ==0</span><span class="token punctuation">:</span><span class="token comment"># TODO: put something smart here</span>pass<span class="token key atrule">else</span><span class="token punctuation">:</span>print('positive<span class="token tag">!')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><h5 id="range函数"><a href="#range函数" class="headerlink" title="range函数"></a><em>range函数</em></h5><p>range函数返回一个迭代器，它产生一个均匀分布的整数序列：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span> range(10)Out<span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span> range(0<span class="token punctuation">,</span>10)In<span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(range(10))Out<span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>range的三个参数是（起点，终点，步进）：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(range(0<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>2))Out<span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span>In<span class="token punctuation">[</span><span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(range(5<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">-</span>1))Out<span class="token punctuation">[</span><span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>可以看到，<u>range产生的整数不包括终点</u>。range的常见用法是用序号迭代序列：<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">seq =<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token key atrule">for i in range(len(seq))</span><span class="token punctuation">:</span>    val = seq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>可以使用list来存储range在其他数据结构中生成的所有整数，默认的迭代器形式通常是你想要的。下面的代码对0到99999中3或5的倍数求和：<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">sum =0<span class="token key atrule">for i in range(100000)</span><span class="token punctuation">:</span><span class="token comment"># % is the modulo operator</span><span class="token key atrule">if i %3==0or i %5==0</span><span class="token punctuation">:</span>        sum += i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>虽然range可以产生任意大的数，但任意时刻耗用的内存却很小。<br>三元表达式</p><h4 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h4><p>Python中的三元表达式可以将if-else语句放到一行里。语法如下：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">value = true<span class="token punctuation">-</span>expr if condition else false<span class="token punctuation">-</span>expr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><p>true-expr或false-expr可以是任何Python代码。它和下面的代码效果相同：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">if condition</span><span class="token punctuation">:</span>    value = true<span class="token punctuation">-</span>expr<span class="token key atrule">else</span><span class="token punctuation">:</span>    value = false<span class="token punctuation">-</span>expr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>下面是一个更具体的例子：<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">126</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x =5In<span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">:</span>'Non<span class="token punctuation">-</span>negative'if x <span class="token punctuation">&gt;</span>=0else'Negative'Out<span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'Non-negative'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>和if-else一样，只有一个表达式会被执行。因此，三元表达式中的if和else可以包含大量的计算，但只有True的分支会被执行。因此，三元表达式中的if和else可以包含大量的计算，但只有True的分支会被执行。<p></p><p>虽然使用三元表达式可以压缩代码，但会降低<u>代码可读性</u>。</p><h2 id="第03章-Python的数据结构、函数和文件"><a href="#第03章-Python的数据结构、函数和文件" class="headerlink" title="第03章 Python的数据结构、函数和文件"></a><a href="https://www.bookstack.cn/read/pyda-2e-zh/3.md">第03章 Python的数据结构、函数和文件</a></h2><h3 id="3-1-数据结构和序列"><a href="#3-1-数据结构和序列" class="headerlink" title="3.1 数据结构和序列"></a><a href="https://www.bookstack.cn/read/pyda-2e-zh/3.1.md">3.1 数据结构和序列</a></h3><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>元组是<u>一个固定长度，不可改变的Python序列对象</u>。创建元组的最简单方式，是用<u>逗号分隔一列值</u>：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tup = 4<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tupOut<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> (4<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> 6)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>当用复杂的表达式定义元组，最好将值放到<u>圆括号</u>内，如下所示：<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> nested_tup = (4<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> 6)<span class="token punctuation">,</span> (7<span class="token punctuation">,</span> 8)In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> nested_tupOut<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ((4<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> 6)<span class="token punctuation">,</span> (7<span class="token punctuation">,</span> 8))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>用<u>tuple可以将任意序列或迭代器</u>转换成元组：<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tuple(<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> (4<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> 2)In <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tup = tuple('string')In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tupOut<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ('s'<span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> 'g')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>可以用方括号访问元组中的元素。和C、C++、JAVA等语言一样，<u>序列是从0开始的</u>：<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tup<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'s'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>元组中存储的对象可能是可变对象。<u>一旦创建了元组，元组中的对象就不能修改了</u>：<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tup = tuple(<span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean important">True</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tup<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> = False<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>TypeError                                 Traceback (most recent call last)&lt;ipython<span class="token punctuation">-</span>input<span class="token punctuation">-</span>10<span class="token punctuation">-</span>c7308343b841<span class="token punctuation">&gt;</span> in &lt;module<span class="token punctuation">&gt;</span>()<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 1 tup<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> = False<span class="token key atrule">TypeError</span><span class="token punctuation">:</span> 'tuple' object does not support item assignment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><u>如果元组中的某个对象是可变的，比如列表，可以在原位进行修改</u>：<p></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tup<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>.append(3)In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tupOut<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ('foo'<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以用<u>加号运算符将元组串联起来</u>：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> (4<span class="token punctuation">,</span> None<span class="token punctuation">,</span> 'foo') + (6<span class="token punctuation">,</span> 0) + ('bar'<span class="token punctuation">,</span>)Out<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> (4<span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> 'bar')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>元组乘以一个整数，像列表一样，会将几个元组的复制串联起来：<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ('foo'<span class="token punctuation">,</span> 'bar') * 4Out<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ('foo'<span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> 'bar')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><u>对象本身并没有被复制，只是引用了它</u>。<p></p><h5 id="拆分元组"><a href="#拆分元组" class="headerlink" title="拆分元组"></a>拆分元组</h5><p>如果你想将元组赋值给类似元组的变量，<u>Python会试图拆分等号右边的值</u>：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tup = (4<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> 6)In <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c = tupIn <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bOut<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>即使含有元组的元组也会被拆分：<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tup = 4<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> (6<span class="token punctuation">,</span> 7)In <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> (c<span class="token punctuation">,</span> d) = tupIn <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dOut<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>使用这个功能，你可以很容易地替换变量的名字，其它语言可能是这样：<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">tmp = aa = bb = tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>但是在<u>Python中，替换</u>可以这样做：<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span> b = 1<span class="token punctuation">,</span> <span class="token number">2</span>In <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> aOut<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span>In <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bOut<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span>In <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b<span class="token punctuation">,</span> a = a<span class="token punctuation">,</span> bIn <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> aOut<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span>In <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bOut<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>变量拆分常用来迭代元组或列表序列：<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq = <span class="token punctuation">[</span>(1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> 3)<span class="token punctuation">,</span> (4<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> 6)<span class="token punctuation">,</span> (7<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> 9)<span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> for a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token key atrule">c in seq</span><span class="token punctuation">:</span><span class="token key atrule">....</span><span class="token punctuation">:</span>     print('a=<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> b=<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> c=<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>'.format(a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c))a=1<span class="token punctuation">,</span> b=2<span class="token punctuation">,</span> c=3a=4<span class="token punctuation">,</span> b=5<span class="token punctuation">,</span> c=6a=7<span class="token punctuation">,</span> b=8<span class="token punctuation">,</span> c=9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>format的用法参考<a href="https://www.cnblogs.com/lovejh/p/9201219.html">python格式化输出之format用法</a><p></p><p>format基本用法参考<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> print('<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>'.format('hello'<span class="token punctuation">,</span>'world'))  <span class="token comment"># 不带字段</span>hello world<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> print('<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>'.format('hello'<span class="token punctuation">,</span>'world'))  <span class="token comment"># 带数字编号</span>hello world<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> print('<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>'.format('hello'<span class="token punctuation">,</span>'world'))  <span class="token comment"># 打乱顺序</span>hello world hello<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> print('<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>'.format('hello'<span class="token punctuation">,</span>'world'))world world hello<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> print('<span class="token punctuation">{</span>a<span class="token punctuation">}</span> <span class="token punctuation">{</span>tom<span class="token punctuation">}</span> <span class="token punctuation">{</span>a<span class="token punctuation">}</span>'.format(tom='hello'<span class="token punctuation">,</span>a='world'))  <span class="token comment"># 带关键字</span>world hello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>另一个常见用法是从函数返回多个值。后面会详解。</p><p>Python最近新增了更多高级的元组拆分功能，允许从元组的开头“摘取”几个元素。它使用了特殊的语法*rest，这也用在函数签名中以抓取任意长度列表的位置参数：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> values = 1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span>In <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token important">*rest</span> = valuesIn <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span> bOut<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> (1<span class="token punctuation">,</span> 2)In <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> restOut<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>rest的部分是想要舍弃的部分，rest的名字不重要。作为惯用写法，<u>许多Python程序员会将不需要的变量使用下划线</u>：<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token important">*_</span> = values<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><h5 id="tuple方法"><a href="#tuple方法" class="headerlink" title="tuple方法"></a>tuple方法</h5><p>因为元组的大小和内容不能修改，它的实例方法都很轻量。其中一个很有用的就是count（也适用于列表），它可以统计某个值得出现频率：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a = (1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> 2)In <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a.count(2)Out<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p></p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>与元组对比(括号定义，不能修改)，<u>列表的长度可变、内容可以被修改。你可以用方括号定义，或用list函数</u>：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a_list = <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> None<span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tup = ('foo'<span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> 'baz')In <span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_list = list(tup)In <span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_listOut<span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> = 'peekaboo'In <span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_listOut<span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'peekaboo'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>列表和元组的语义接近，在许多函数中可以交叉使用。<p></p><p>list函数常用来<u>在数据处理中实体化迭代器或生成器</u>：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">:</span> gen = range(10)In <span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> genOut<span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> range(0<span class="token punctuation">,</span> 10)In <span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(gen)Out<span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><h5 id="添加和删除元素"><a href="#添加和删除元素" class="headerlink" title="添加和删除元素"></a>添加和删除元素</h5><p>可以用<u>append</u>在列表末尾添加元素：<br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_list.append('dwarf')In <span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_listOut<span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'peekaboo'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">,</span> <span class="token string">'dwarf'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><u>insert</u>可以在特定的位置插入元素：<br><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_list.insert(1<span class="token punctuation">,</span> 'red')In <span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_listOut<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'peekaboo'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">,</span> <span class="token string">'dwarf'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>插入的序号必须在0和列表长度之间。<p></p><blockquote><p>警告：与append相比，insert耗费的计算量大，因为对后续元素的引用必须在内部迁移，以便为新元素提供空间。如果要在序列的头部和尾部插入元素，你可能需要使用collections.deque，一个双尾部队列。</p></blockquote><p>insert的逆运算是<u>pop</u>，它移除并返回指定位置的元素：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_list.pop(2)Out<span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'peekaboo'</span>In <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_listOut<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">,</span> <span class="token string">'dwarf'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以用remove去除某个值，remove会先寻找第一个值并除去：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_list.append('foo')In <span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_listOut<span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">,</span> <span class="token string">'dwarf'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_list.remove('foo')In <span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_listOut<span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">,</span> <span class="token string">'dwarf'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不考虑性能，使用<u>append和remove</u>，可以把Python的列表当做完美的“多重集”数据结构。</p><p>用in可以检查列表是否包含某个值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 'dwarf' in b_listOut<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>否定in可以再加一个not：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 'dwarf' not in b_listOut<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在列表中检查是否存在某个值远比字典和集合速度慢，因为Python是线性搜索列表中的值，但在字典和集合中，在同样的时间内还可以检查其它项（基于哈希表）。</p><h5 id="串联和组合列表"><a href="#串联和组合列表" class="headerlink" title="串联和组合列表"></a>串联和组合列表</h5><p>与元组类似，可以用加号将两个列表串联起来：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span> + <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> (2<span class="token punctuation">,</span> 3)<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> (2<span class="token punctuation">,</span> 3)<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果已经定义了一个列表，用extend方法可以追加多个元素：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x = <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x.extend(<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> (2<span class="token punctuation">,</span> 3)<span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span> xOut<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> (2<span class="token punctuation">,</span> 3)<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过加法将列表串联的计算量较大，因为要新建一个列表，并且要复制对象。用extend追加元素，尤其是到一个大列表中，更为可取。因此：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">everything = <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token key atrule">for chunk in list_of_lists</span><span class="token punctuation">:</span>    everything.extend(chunk)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>要比串联方法快：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">everything = <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token key atrule">for chunk in list_of_lists</span><span class="token punctuation">:</span>    everything = everything + chunk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><p>你可以用<u>sort函数</u>将一个列表原地排序（不创建新的对象）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a = <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a.sort()In <span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">]</span><span class="token punctuation">:</span> aOut<span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>sort有一些选项，有时会很好用。其中之一是<u>二级排序key</u>，可以用这个key进行排序。例如，我们可以按长度对字符串进行排序：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b = <span class="token punctuation">[</span><span class="token string">'saw'</span><span class="token punctuation">,</span> <span class="token string">'small'</span><span class="token punctuation">,</span> <span class="token string">'He'</span><span class="token punctuation">,</span> <span class="token string">'foxes'</span><span class="token punctuation">,</span> <span class="token string">'six'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b.sort(key=len)In <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bOut<span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'He'</span><span class="token punctuation">,</span> <span class="token string">'saw'</span><span class="token punctuation">,</span> <span class="token string">'six'</span><span class="token punctuation">,</span> <span class="token string">'small'</span><span class="token punctuation">,</span> <span class="token string">'foxes'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>稍后，我们会学习sorted函数，它可以产生一个排好序的序列副本。</p><h5 id="二分搜索和维护已排序的列表"><a href="#二分搜索和维护已排序的列表" class="headerlink" title="二分搜索和维护已排序的列表"></a>二分搜索和维护已排序的列表</h5><p><u>bisect模块支持二分查找</u>，和向已排序的列表插入值。bisect.bisect可以找到插入值后仍保证排序的位置，bisect.insort是向这个位置插入值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span> import bisectIn <span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c = <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bisect.bisect(c<span class="token punctuation">,</span> 2)Out<span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4</span>In <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bisect.bisect(c<span class="token punctuation">,</span> 5)Out<span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">6</span>In <span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bisect.insort(c<span class="token punctuation">,</span> 6)In <span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">:</span> cOut<span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>注意：bisect模块不会检查列表是否已排好序，进行检查的话会耗费大量计算。因此，对未排序的列表使用bisect不会产生错误，但结果不一定正确。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>用切边可以选取大多数序列类型的一部分，<u>切片的基本形式是在方括号中使用start:stop</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq = <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq<span class="token punctuation">[</span>1<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>切片也可以被序列赋值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq<span class="token punctuation">[</span>3<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> = <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seqOut<span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>切片的起始元素是包括的，<u>不包含结束元素</u>。因此，结果中包含的<u>元素个数是stop - start</u>。</p><p><u>start或stop都可以被省略，省略之后，分别默认序列的开头和结尾</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq<span class="token punctuation">[</span>3<span class="token punctuation">:</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><u>负数表明从后向前切片</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq<span class="token punctuation">[</span><span class="token punctuation">-</span>4<span class="token punctuation">:</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq<span class="token punctuation">[</span><span class="token punctuation">-</span>6<span class="token punctuation">:</span><span class="token number">-2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>需要一段时间来熟悉使用切片，尤其是当你之前学的是R或MATLAB。下图展示了正整数和负整数的切片。在图中，指数标示在边缘以表明切片是在哪里开始哪里结束的。</p><p><img src="https://tva1.sinaimg.cn/large/007mx13gly1guo30xjryij60yg0eswir02.jpg" alt="Python切片演示"></p><p>在<u>第二个冒号</u>后面使用<u>step</u>，可以隔一个取一个元素：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一个聪明的方法是<u>使用-1，它可以将列表或元组颠倒过来</u>：</p><pre><code>In [82]: seq[::-1]Out[82]: [1, 0, 6, 5, 3, 6, 3, 2, 7]</code></pre><h4 id="序列函数"><a href="#序列函数" class="headerlink" title="序列函数"></a>序列函数</h4><p>Python有一些有用的序列函数。</p><h5 id="enumerate函数"><a href="#enumerate函数" class="headerlink" title="enumerate函数"></a>enumerate函数</h5><p>迭代一个序列时，你可能想跟踪当前项的序号。手动的方法可能是下面这样：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">i = 0<span class="token key atrule">for value in collection</span><span class="token punctuation">:</span>   <span class="token comment"># do something with value</span>   i += 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为这么做很常见，Python内建了一个enumerate函数，可以返回(i, value)元组序列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">for i<span class="token punctuation">,</span> <span class="token key atrule">value in enumerate(collection)</span><span class="token punctuation">:</span>   <span class="token comment"># do something with value</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当你索引数据时，使用enumerate的一个好方法是计算序列（唯一的）dict映射到位置的值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">]</span><span class="token punctuation">:</span> some_list = <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mapping = <span class="token punctuation">{</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">85</span><span class="token punctuation">]</span><span class="token punctuation">:</span> for i<span class="token punctuation">,</span> <span class="token key atrule">v in enumerate(some_list)</span><span class="token punctuation">:</span>   <span class="token key atrule">....</span><span class="token punctuation">:</span>     mapping<span class="token punctuation">[</span>v<span class="token punctuation">]</span> = iIn <span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mappingOut<span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'bar'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token key atrule">'baz'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token key atrule">'foo'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="sorted函数"><a href="#sorted函数" class="headerlink" title="sorted函数"></a>sorted函数</h5><p>sorted函数可以从任意序列的元素返回一个新的排好序的列表：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sorted(<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sorted('horse race')Out<span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><u>sorted函数可以接受和sort相同的参数。</u></p><h5 id="zip函数"><a href="#zip函数" class="headerlink" title="zip函数"></a>zip函数</h5><p><u>zip可以将多个列表、元组或其它序列成对组合成一个元组列表</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq1 = <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq2 = <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">91</span><span class="token punctuation">]</span><span class="token punctuation">:</span> zipped = zip(seq1<span class="token punctuation">,</span> seq2)In <span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(zipped)Out<span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>('foo'<span class="token punctuation">,</span> 'one')<span class="token punctuation">,</span> ('bar'<span class="token punctuation">,</span> 'two')<span class="token punctuation">,</span> ('baz'<span class="token punctuation">,</span> 'three')<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>zip可以处理任意多的序列，元素的个数取决于最短的序列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq3 = <span class="token punctuation">[</span><span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">True</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(zip(seq1<span class="token punctuation">,</span> seq2<span class="token punctuation">,</span> seq3))Out<span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>('foo'<span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> False)<span class="token punctuation">,</span> ('bar'<span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> True)<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>zip的常见用法之一是同时迭代多个序列，可能结合enumerate使用：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">:</span> for i<span class="token punctuation">,</span> (a<span class="token punctuation">,</span> b) in enumerate(zip(seq1<span class="token punctuation">,</span> <span class="token key atrule">seq2))</span><span class="token punctuation">:</span>   <span class="token key atrule">....</span><span class="token punctuation">:</span>     print('<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>'.format(i<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b))   <span class="token key atrule">....</span><span class="token punctuation">:</span><span class="token key atrule">0</span><span class="token punctuation">:</span> foo<span class="token punctuation">,</span> one<span class="token key atrule">1</span><span class="token punctuation">:</span> bar<span class="token punctuation">,</span> two<span class="token key atrule">2</span><span class="token punctuation">:</span> baz<span class="token punctuation">,</span> three<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给出一个“被压缩的”序列，zip可以被用来解压序列。也可以当作把行的列表转换为列的列表。这个方法看起来有点神奇：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pitchers = <span class="token punctuation">[</span>('Nolan'<span class="token punctuation">,</span> 'Ryan')<span class="token punctuation">,</span> ('Roger'<span class="token punctuation">,</span> 'Clemens')<span class="token punctuation">,</span>   <span class="token key atrule">....</span><span class="token punctuation">:</span>             ('Schilling'<span class="token punctuation">,</span> 'Curt')<span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">:</span> first_names<span class="token punctuation">,</span> last_names = zip(<span class="token important">*pitchers)</span>In <span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">:</span> first_namesOut<span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ('Nolan'<span class="token punctuation">,</span> <span class="token string">'Roger'</span><span class="token punctuation">,</span> 'Schilling')In <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">:</span> last_namesOut<span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ('Ryan'<span class="token punctuation">,</span> <span class="token string">'Clemens'</span><span class="token punctuation">,</span> 'Curt')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="reversed函数"><a href="#reversed函数" class="headerlink" title="reversed函数"></a>reversed函数</h5><p>reversed可以<u>从后向前迭代一个序列</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(reversed(range(10)))Out<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要记住<u>reversed是一个生成器</u>（后面详细介绍），只有<u>实体化（即列表或for循环）之后才能创建翻转的序列</u>。</p><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>字典可能是Python最为重要的数据结构。它更为常见的名字是<u>哈希映射或关联数组</u>。它是<u>键值对的大小可变集合</u>，键和值都是Python对象。<u>创建字典的方法之一是使用尖括号，用冒号分隔键和值</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">:</span> empty_dict = <span class="token punctuation">{</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1 = <span class="token punctuation">{</span><span class="token key atrule">'a'</span> <span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1Out<span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你可以像访问<u>列表或元组中的元素一样，访问、插入或设定字典中的元素</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> = 'an integer'In <span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1Out<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token key atrule">7</span><span class="token punctuation">:</span> <span class="token string">'an integer'</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以用<u>检查列表和元组是否包含某个值的方法，检查字典中是否包含某个键</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">107</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 'b' in d1Out<span class="token punctuation">[</span><span class="token number">107</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以用del关键字或pop方法（返回值的同时删除键）删除值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> = 'some value'In <span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1Out<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token key atrule">7</span><span class="token punctuation">:</span> <span class="token string">'an integer'</span><span class="token punctuation">,</span> <span class="token key atrule">5</span><span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1<span class="token punctuation">[</span><span class="token string">'dummy'</span><span class="token punctuation">]</span> = 'another value'In <span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1Out<span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token key atrule">7</span><span class="token punctuation">:</span> <span class="token string">'an integer'</span><span class="token punctuation">,</span> <span class="token key atrule">5</span><span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token key atrule">'dummy'</span><span class="token punctuation">:</span> <span class="token string">'another value'</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">112</span><span class="token punctuation">]</span><span class="token punctuation">:</span> del d1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">113</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1Out<span class="token punctuation">[</span><span class="token number">113</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token key atrule">7</span><span class="token punctuation">:</span> <span class="token string">'an integer'</span><span class="token punctuation">,</span> <span class="token key atrule">'dummy'</span><span class="token punctuation">:</span> <span class="token string">'another value'</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">114</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ret = d1.pop('dummy')In <span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">]</span><span class="token punctuation">:</span> retOut<span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'another value'</span>In <span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1Out<span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token key atrule">7</span><span class="token punctuation">:</span> <span class="token string">'an integer'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><u>keys和values是字典的键和值的迭代器方法</u>。虽然键值对没有顺序，这两个方法可以用相同的顺序输出键和值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(d1.keys())Out<span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(d1.values())Out<span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'an integer'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用update方法可以将一个字典与另一个融合：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">119</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1.update(<span class="token punctuation">{</span><span class="token key atrule">'b'</span> <span class="token punctuation">:</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token key atrule">'c'</span> <span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">}</span>)In <span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1Out<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token key atrule">7</span><span class="token punctuation">:</span> <span class="token string">'an integer'</span><span class="token punctuation">,</span> <span class="token key atrule">'c'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>update方法是原地改变字典，因此任何传递给update的键的旧的值都会被舍弃。</p><h5 id="用序列创建字典"><a href="#用序列创建字典" class="headerlink" title="用序列创建字典"></a>用序列创建字典</h5><p>常常，你可能想将<u>两个序列配对组合成字典</u>。下面是一种写法：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">mapping = <span class="token punctuation">{</span><span class="token punctuation">}</span>for key<span class="token punctuation">,</span> value in zip(key_list<span class="token punctuation">,</span> <span class="token key atrule">value_list)</span><span class="token punctuation">:</span>    mapping<span class="token punctuation">[</span>key<span class="token punctuation">]</span> = value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为<u>字典本质上是2元元组的集合</u>，dict可以接受2元元组的列表：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">121</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mapping = dict(zip(range(5)<span class="token punctuation">,</span> reversed(range(5))))In <span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mappingOut<span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">0</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token key atrule">1</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token key atrule">2</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token key atrule">3</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token key atrule">4</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="dict-函数"><a href="#dict-函数" class="headerlink" title="dict() 函数"></a>dict() 函数</h5><p>函数输入输出实例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#输入：</span>dict0 = dict()  <span class="token comment"># 传一个空字典</span>print('dict0<span class="token punctuation">:</span>'<span class="token punctuation">,</span> dict0)dict1 = dict(<span class="token punctuation">{</span><span class="token key atrule">'three'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token key atrule">'four'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span>)  <span class="token comment"># 传一个字典</span>print('dict1<span class="token punctuation">:</span>'<span class="token punctuation">,</span> dict1)dict2 = dict(five=5<span class="token punctuation">,</span> six=6)  <span class="token comment"># 传关键字</span>print('dict2<span class="token punctuation">:</span>'<span class="token punctuation">,</span> dict2)dict3 = dict(<span class="token punctuation">[</span>('seven'<span class="token punctuation">,</span> 7)<span class="token punctuation">,</span> ('eight'<span class="token punctuation">,</span> 8)<span class="token punctuation">]</span>)  <span class="token comment"># 传一个包含一个或多个元祖的列表</span>print('dict3<span class="token punctuation">:</span>'<span class="token punctuation">,</span> dict3)dict5 = dict(zip(<span class="token punctuation">[</span><span class="token string">'eleven'</span><span class="token punctuation">,</span> <span class="token string">'twelve'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span>))  <span class="token comment"># 传一个zip()函数</span>print('dict5<span class="token punctuation">:</span>'<span class="token punctuation">,</span> dict5)<span class="token comment">#输出：</span><span class="token key atrule">dict0</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">dict1</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'four'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token key atrule">'three'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token key atrule">dict2</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'five'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token key atrule">'six'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token key atrule">dict3</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'seven'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token key atrule">'eight'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token key atrule">dict5</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'twelve'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token key atrule">'eleven'</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面会谈到dict comprehensions，另一种构建字典的优雅方式。<br>默认值</p><p>下面的逻辑很常见：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">if key in some_dict</span><span class="token punctuation">:</span>    value = some_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token key atrule">else</span><span class="token punctuation">:</span>    value = default_value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因此，dict的方法get和pop可以取默认值进行返回，上面的if-else语句可以简写成下面：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">value = some_dict.get(key<span class="token punctuation">,</span> default_value)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>get默认会返回None，如果不存在键，pop会抛出一个例外。关于设定值，常见的情况是在字典的值是属于其它集合，如列表。例如，你可以通过首字母，将一个列表中的单词分类：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span> words = <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'atom'</span><span class="token punctuation">,</span> <span class="token string">'book'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span> by_letter = <span class="token punctuation">{</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">for word in words</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     letter = word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     <span class="token key atrule">if letter not in by_letter</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>         by_letter<span class="token punctuation">[</span>letter<span class="token punctuation">]</span> = <span class="token punctuation">[</span>word<span class="token punctuation">]</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     <span class="token key atrule">else</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>         by_letter<span class="token punctuation">[</span>letter<span class="token punctuation">]</span>.append(word)   <span class="token key atrule">.....</span><span class="token punctuation">:</span>In <span class="token punctuation">[</span><span class="token number">126</span><span class="token punctuation">]</span><span class="token punctuation">:</span> by_letterOut<span class="token punctuation">[</span><span class="token number">126</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'atom'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'book'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>setdefault方法就正是用于单词分类。前面的for循环可以改写为：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">for word in words</span><span class="token punctuation">:</span>    letter = word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    by_letter.setdefault(letter<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>).append(word)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>collections模块有一个很有用的类，defaultdict，它可以进一步简化上面。传递类型或函数以生成每个位置的默认值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">from collections import defaultdictby_letter = defaultdict(list)<span class="token key atrule">for word in words</span><span class="token punctuation">:</span>    by_letter<span class="token punctuation">[</span>word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>.append(word)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="如何使用defaultdict"><a href="#如何使用defaultdict" class="headerlink" title="如何使用defaultdict"></a>如何使用defaultdict</h5><p>defaultdict接受一个工厂函数作为参数，如下来构造：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">dict =defaultdict( factory_function)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个factory_function可以是list、set、str等等，作用是当key不存在时，返回的是工厂函数的默认值，比如list对应[ ]，str对应的是空字符串，set对应set( )，int对应0，如下举例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">from collections import defaultdictdict1 = defaultdict(int)dict2 = defaultdict(set)dict3 = defaultdict(str)dict4 = defaultdict(list)dict1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> ='two'print(dict1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>)print(dict2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>)print(dict3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>)print(dict4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>)<span class="token comment">#输出为</span>0set()<span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="有效的键类型"><a href="#有效的键类型" class="headerlink" title="有效的键类型"></a>有效的键类型</h5><p>字典的值可以是任意Python对象，而键通常是不可变的标量类型（<u>整数、浮点型、字符串</u>）或<u>元组（元组中的对象必须是不可变的）</u>，这被称为“可哈希性。可以用<u>hash函数可检测一个对象是否是可哈希的</u>（可被用作字典的键）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">:</span> hash('string')Out<span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">5023931463650008331</span>In <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">:</span> hash((1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> (2<span class="token punctuation">,</span> 3)))Out<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1097636502276347782</span>In <span class="token punctuation">[</span><span class="token number">129</span><span class="token punctuation">]</span><span class="token punctuation">:</span> hash((1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>)) <span class="token comment"># fails because lists are mutable</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>TypeError                                 Traceback (most recent call last)&lt;ipython<span class="token punctuation">-</span>input<span class="token punctuation">-</span>129<span class="token punctuation">-</span>800cd14ba8be<span class="token punctuation">&gt;</span> in &lt;module<span class="token punctuation">&gt;</span>()<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 1 hash((1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>)) <span class="token comment"># fails because lists are mutable</span><span class="token key atrule">TypeError</span><span class="token punctuation">:</span> <span class="token key atrule">unhashable type</span><span class="token punctuation">:</span> <span class="token string">'list'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要用列表当做键，一种方法是将列表转化为元组，只要内部元素可以被哈希，它也就可以被哈希：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">130</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d = <span class="token punctuation">{</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">131</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d<span class="token punctuation">[</span>tuple(<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>)<span class="token punctuation">]</span> = 5In <span class="token punctuation">[</span><span class="token number">132</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dOut<span class="token punctuation">[</span><span class="token number">132</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>(1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token key atrule">3)</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>集合是<u>无序的不可重复的元素的集合</u>。你可以把它当做<u>字典，但是只有键没有值</u>。可以用两种方式创建集合：通过set函数或使用尖括号set语句：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">133</span><span class="token punctuation">]</span><span class="token punctuation">:</span> set(<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">133</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">134</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>Out<span class="token punctuation">[</span><span class="token number">134</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>集合支持<u>合并、交集、差分和对称差等数学集合运算</u>。考虑两个示例集合：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">135</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a = <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">136</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b = <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>合并是取两个集合中不重复的元素。可以用union方法，或者|运算符：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a.union(b)Out<span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">138</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token punctuation">|</span> bOut<span class="token punctuation">[</span><span class="token number">138</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>交集的元素包含在两个集合中。可以用intersection或&amp;运算符：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">139</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a.intersection(b)Out<span class="token punctuation">[</span><span class="token number">139</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a &amp; bOut<span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/007mx13gly1guoajywdctj60jb0cj7a902.jpg" alt="常用的集合方法">。</p><p>所有逻辑集合操作都有另外的原地实现方法，可以直接用结果替代集合的内容。对于大的集合，这么做效率更高：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">141</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c = a.copy()In <span class="token punctuation">[</span><span class="token number">142</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c <span class="token punctuation">|</span>= bIn <span class="token punctuation">[</span><span class="token number">143</span><span class="token punctuation">]</span><span class="token punctuation">:</span> cOut<span class="token punctuation">[</span><span class="token number">143</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">144</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d = a.copy()In <span class="token punctuation">[</span><span class="token number">145</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d <span class="token important">&amp;=</span> bIn <span class="token punctuation">[</span><span class="token number">146</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dOut<span class="token punctuation">[</span><span class="token number">146</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与字典类似，<u>集合元素通常都是不可变的</u>。要获得类似列表的元素，必须转换成元组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">147</span><span class="token punctuation">]</span><span class="token punctuation">:</span> my_data = <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">148</span><span class="token punctuation">]</span><span class="token punctuation">:</span> my_set = <span class="token punctuation">{</span>tuple(my_data)<span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">149</span><span class="token punctuation">]</span><span class="token punctuation">:</span> my_setOut<span class="token punctuation">[</span><span class="token number">149</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>(1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> 4)<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你使用issubset还可以检测一个集合是否是另一个集合的子集或父集：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a_set = <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">151</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>.issubset(a_set)Out<span class="token punctuation">[</span><span class="token number">151</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>In <span class="token punctuation">[</span><span class="token number">152</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a_set.issuperset(<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>)Out<span class="token punctuation">[</span><span class="token number">152</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>集合的内容相同时，集合才对等：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">153</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span> == <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span>Out<span class="token punctuation">[</span><span class="token number">153</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="列表、集合和字典推导式"><a href="#列表、集合和字典推导式" class="headerlink" title="列表、集合和字典推导式"></a>列表、集合和字典推导式</h4><p><u>列表推导式</u>是Python最受喜爱的特性之一。它允许用户方便的从一个集合过滤元素，形成列表，在传递参数的过程中还可以修改元素。形式如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>expr for val in collection if condition<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它等同于下面的for循环;</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">result = <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token key atrule">for val in collection</span><span class="token punctuation">:</span>    <span class="token key atrule">if condition</span><span class="token punctuation">:</span>        result.append(expr)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>filter条件可以被忽略，只留下表达式就行。例如，给定一个字符串列表，我们可以过滤出长度在2及以下的字符串，并将其转换成大写：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">154</span><span class="token punctuation">]</span><span class="token punctuation">:</span> strings = <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'as'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'car'</span><span class="token punctuation">,</span> <span class="token string">'dove'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">155</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>x.upper() for x in strings if len(x) <span class="token punctuation">&gt;</span> 2<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">155</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'BAT'</span><span class="token punctuation">,</span> <span class="token string">'CAR'</span><span class="token punctuation">,</span> <span class="token string">'DOVE'</span><span class="token punctuation">,</span> <span class="token string">'PYTHON'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用相似的方法，还可以推导集合和字典。<u>字典的推导式</u>如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">dict_comp = <span class="token punctuation">{</span><span class="token key atrule">key-expr</span> <span class="token punctuation">:</span> value<span class="token punctuation">-</span>expr for value in collection if condition<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><u>集合的推导式</u>与列表很像，只不过用的是<u>尖括号</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">set_comp = <span class="token punctuation">{</span>expr for value in collection if condition<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与列表推导式类似，集合与字典的推导也很方便，而且使代码的读写都很容易。来看前面的字符串列表。假如我们只想要字符串的长度，用集合推导式的方法非常方便：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">156</span><span class="token punctuation">]</span><span class="token punctuation">:</span> unique_lengths = <span class="token punctuation">{</span>len(x) for x in strings<span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">157</span><span class="token punctuation">]</span><span class="token punctuation">:</span> unique_lengthsOut<span class="token punctuation">[</span><span class="token number">157</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>map函数可以进一步简化：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">158</span><span class="token punctuation">]</span><span class="token punctuation">:</span> set(map(len<span class="token punctuation">,</span> strings))Out<span class="token punctuation">[</span><span class="token number">158</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>map()是一个 Python 内建函数，它允许你不需要使用循环就可以编写简洁的代码，具体用法参考<a href="[Python Map 函数的使用 - 知乎 (zhihu.com">Python Map 函数的使用</a>](<a href="https://zhuanlan.zhihu.com/p/205466485))，基本用法为：">https://zhuanlan.zhihu.com/p/205466485))，基本用法为：</a></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">map(function<span class="token punctuation">,</span> iterable<span class="token punctuation">,</span> <span class="token punctuation">...</span>)<span class="token comment">#function` - 针对每一个迭代调用的函数</span><span class="token comment">#iterable` - 支持迭代的一个或者多个对象。在 Python 中大部分内建对象，例如 lists, dictionaries, 和 tuples 都是可迭代的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>作为一个字典推导式的例子，我们可以创建一个字符串的查找映射表以确定它在列表中的位置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">159</span><span class="token punctuation">]</span><span class="token punctuation">:</span> loc_mapping = <span class="token punctuation">{</span><span class="token key atrule">val</span> <span class="token punctuation">:</span> index for index<span class="token punctuation">,</span> val in enumerate(strings)<span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">160</span><span class="token punctuation">]</span><span class="token punctuation">:</span> loc_mappingOut<span class="token punctuation">[</span><span class="token number">160</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token key atrule">'as'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token key atrule">'bat'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token key atrule">'car'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token key atrule">'dove'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token key atrule">'python'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="嵌套列表推导式"><a href="#嵌套列表推导式" class="headerlink" title="嵌套列表推导式"></a>嵌套列表推导式</h4><p>假设我们有一个包含列表的列表，包含了一些英文名和西班牙名：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">161</span><span class="token punctuation">]</span><span class="token punctuation">:</span> all_data = <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'John'</span><span class="token punctuation">,</span> <span class="token string">'Emily'</span><span class="token punctuation">,</span> <span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token string">'Mary'</span><span class="token punctuation">,</span> <span class="token string">'Steven'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>             <span class="token punctuation">[</span><span class="token string">'Maria'</span><span class="token punctuation">,</span> <span class="token string">'Juan'</span><span class="token punctuation">,</span> <span class="token string">'Javier'</span><span class="token punctuation">,</span> <span class="token string">'Natalia'</span><span class="token punctuation">,</span> <span class="token string">'Pilar'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你可能是从一些文件得到的这些名字，然后想按照语言进行分类。现在假设我们想用一个列表包含所有的名字，这些名字中包含两个或更多的e。可以用for循环来做：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">names_of_interest = <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token key atrule">for names in all_data</span><span class="token punctuation">:</span>    enough_es = <span class="token punctuation">[</span>name for name in names if name.count('e') <span class="token punctuation">&gt;</span>= 2<span class="token punctuation">]</span>    names_of_interest.extend(enough_es)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以用嵌套列表推导式的方法，将这些写在一起，如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">162</span><span class="token punctuation">]</span><span class="token punctuation">:</span> result = <span class="token punctuation">[</span>name for names in all_data for name in names   <span class="token key atrule">.....</span><span class="token punctuation">:</span>           if name.count('e') <span class="token punctuation">&gt;</span>= 2<span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">163</span><span class="token punctuation">]</span><span class="token punctuation">:</span> resultOut<span class="token punctuation">[</span><span class="token number">163</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Steven'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>嵌套列表推导式看起来有些复杂。列表推导式的for部分是根据嵌套的顺序，过滤条件还是放在最后。下面是另一个例子，我们将一个整数元组的列表扁平化成了一个整数列表：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">164</span><span class="token punctuation">]</span><span class="token punctuation">:</span> some_tuples = <span class="token punctuation">[</span>(1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> 3)<span class="token punctuation">,</span> (4<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> 6)<span class="token punctuation">,</span> (7<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> 9)<span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">165</span><span class="token punctuation">]</span><span class="token punctuation">:</span> flattened = <span class="token punctuation">[</span>x for tup in some_tuples for x in tup<span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">166</span><span class="token punctuation">]</span><span class="token punctuation">:</span> flattenedOut<span class="token punctuation">[</span><span class="token number">166</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>记住，for表达式的顺序是与嵌套for循环的顺序一样（而不是列表推导式的顺序）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">flattened = <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token key atrule">for tup in some_tuples</span><span class="token punctuation">:</span>    <span class="token key atrule">for x in tup</span><span class="token punctuation">:</span>        flattened.append(x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你可以有任意多级别的嵌套，但是如果你有两三个以上的嵌套，你就应该考虑下代码可读性的问题了。分辨列表推导式的列表推导式中的语法也是很重要的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">167</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>x for x in tup<span class="token punctuation">]</span> for tup in some_tuples<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">167</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这段代码产生了一个列表的列表，而不是扁平化的只包含元素的列表。</p><h3 id="3-2-函数"><a href="#3-2-函数" class="headerlink" title="3.2 函数"></a><a href="https://www.bookstack.cn/read/pyda-2e-zh/3.2.md">3.2 函数</a></h3><p>函数是Python中最主要也是最重要的代码组织和复用手段。作为最重要的原则，如果你要重复使用相同或非常类似的代码，就需要写一个函数。通过给函数起一个名字，还可以提高代码的可读性。</p><p>函数使用<code>def</code>关键字声明，用<code>return</code>关键字返回值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">def my_function(x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token key atrule">z=1.5)</span><span class="token punctuation">:</span>    <span class="token key atrule">if z &gt; 1</span><span class="token punctuation">:</span>        return z * (x + y)    <span class="token key atrule">else</span><span class="token punctuation">:</span>        return z / (x + y)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时拥有多条<code>return</code>语句也是可以的。如果到达函数末尾时没有遇到任何一条<code>return</code>语句，则返回<code>None</code>。</p><p>函数可以有一些位置参数（<code>positional</code>）和一些关键字参数（<code>keyword</code>）。<u>关键字参数通常用于指定默认值或可选参数</u>。在上面的函数中，<u>x和y是位置参数，而z则是关键字参数</u>。也就是说，该函数可以下面这3种方式进行调用：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">my_function(5<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> z=0.7)my_function(3.14<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> 3.5)my_function(10<span class="token punctuation">,</span> 20)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><u>函数参数的主要限制在于：关键字参数必须位于位置参数（如果有的话）之后。</u>你可以任何顺序指定关键字参数。也就是说，你不用死记硬背函数参数的顺序，只要记得它们的名字就可以了。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#笔记：也可以用"关键字传递位置参数"。前面的例子，也可以写为：</span>    my_function(x=5<span class="token punctuation">,</span> y=6<span class="token punctuation">,</span> z=7)    my_function(y=6<span class="token punctuation">,</span> x=5<span class="token punctuation">,</span> z=7)<span class="token comment">#这种写法可以提高可读性。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="命名空间、作用域，和局部函数"><a href="#命名空间、作用域，和局部函数" class="headerlink" title="命名空间、作用域，和局部函数"></a>命名空间、作用域，和局部函数</h4><p>函数可以访问两种不同作用域中的变量：<u>全局（global）和局部（local）</u>。Python有一种更科学的<u>用于描述变量作用域的名称，即命名空间（namespace）</u>。任何<u>在函数中赋值的变量</u>默认都是被分配到<u>局部命名空间</u>（local namespace）中的。局部命名空间是在函数被调用时创建的，函数参数会立即填入该命名空间。在函数执行完毕之后，局部命名空间就会被销毁（会有一些例外的情况，具体请参见后面介绍闭包的那一节）。看看下面这个函数：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def func()</span><span class="token punctuation">:</span>    a = <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">for i in range(5)</span><span class="token punctuation">:</span>        a.append(i)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>调用<code>func()</code>之后，首先会创建出空列表a，然后添加5个元素，最后a会在该函数退出的时候被销毁。假如我们像下面这样定义a：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">a = <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token key atrule">def func()</span><span class="token punctuation">:</span>    <span class="token key atrule">for i in range(5)</span><span class="token punctuation">:</span>        a.append(i)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>虽然可以在函数中对全局变量进行赋值操作，但是那些变量必须用global关键字声明成全局的才行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">168</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a = NoneIn <span class="token punctuation">[</span><span class="token number">169</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">def bind_a_variable()</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     global a   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     a = <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span> bind_a_variable()   <span class="token key atrule">.....</span><span class="token punctuation">:</span>In <span class="token punctuation">[</span><span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">:</span> print(a)<span class="token punctuation">[</span><span class="token punctuation">]</span>注意：我常常建议人们不要频繁使用global关键字。因为全局变量一般是用于存放系统的某些状态的。如果你发现自己用了很多，那可能就说明得要来点儿面向对象编程了（即使用类）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h4><p>在我第一次用Python编程时（之前已经习惯了Java和C++），最喜欢的一个功能是：函数可以返回多个值。下面是一个简单的例子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def f()</span><span class="token punctuation">:</span>    a = 5    b = 6    c = 7    return a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> ca<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c = f()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在数据分析和其他科学计算应用中，你会发现自己常常这么干。该函数其实只返回了一个对象，也就是一个元组，最后该元组会被拆包到各个结果变量中。在上面的例子中，我们还可以这样写：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">return_value = f()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的return_value将会是一个含有3个返回值的三元元组。此外，还有一种非常具有吸引力的多值返回方式——返回字典：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def f()</span><span class="token punctuation">:</span>    a = 5    b = 6    c = 7    return <span class="token punctuation">{</span><span class="token key atrule">'a'</span> <span class="token punctuation">:</span> a<span class="token punctuation">,</span> <span class="token key atrule">'b'</span> <span class="token punctuation">:</span> b<span class="token punctuation">,</span> <span class="token key atrule">'c'</span> <span class="token punctuation">:</span> c<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>取决于工作内容，第二种方法可能很有用。</p><h4 id="函数也是对象"><a href="#函数也是对象" class="headerlink" title="函数也是对象"></a>函数也是对象</h4><p>由于Python函数都是对象(<a href="https://zhuanlan.zhihu.com/p/75265007">2分钟让你明白什么是面向对象编程 - 知乎 (zhihu.com)</a>)，因此，在其他语言中较难表达的一些设计思想在Python中就要简单很多了。假设我们有下面这样一个字符串数组，希望对其进行一些数据清理工作并执行一堆转换：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">171</span><span class="token punctuation">]</span><span class="token punctuation">:</span> states = <span class="token punctuation">[</span><span class="token string">'   Alabama '</span><span class="token punctuation">,</span> <span class="token string">'Georgia!'</span><span class="token punctuation">,</span> <span class="token string">'Georgia'</span><span class="token punctuation">,</span> <span class="token string">'georgia'</span><span class="token punctuation">,</span> <span class="token string">'FlOrIda'</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>           <span class="token string">'south   carolina##'</span><span class="token punctuation">,</span> <span class="token string">'West virginia?'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不管是谁，只要处理过由用户提交的调查数据，就能明白这种乱七八糟的数据是怎么一回事。为了得到一组能用于分析工作的格式统一的字符串，需要做很多事情：去除空白符、删除各种标点符号、正确的大写格式等。做法之一是使用内建的字符串方法和正则表达式re模块(<a href="http://www.itwangqing.net.cn/15623206542335.html#:~:text=正则表达式（RE,过re模块实现。">可参考正则表达式re模块 </a>)：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">import re<span class="token key atrule">def clean_strings(strings)</span><span class="token punctuation">:</span>    result = <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">for value in strings</span><span class="token punctuation">:</span>        value = value.strip()        value = re.sub('<span class="token punctuation">[</span><span class="token tag">!</span><span class="token comment">#?]', '', value)</span>        value = value.title()<span class="token comment">#</span>        result.append(value)    return result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>strip</code>方法的功能为移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。其语法与实例为（可参考<a href="https://www.runoob.com/python/att-string-strip.html">Python strip()方法)</a>）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#语法</span>str.strip(<span class="token punctuation">[</span>chars<span class="token punctuation">]</span>);<span class="token comment">#实例</span>str = "00000003210Runoob01230000000"; print str.strip( '0' );  <span class="token comment"># 去除首尾字符 0</span>str2 = "   Runoob      ";   <span class="token comment"># 去除首尾空格</span>print str2.strip();<span class="token comment">#输出：</span>3210Runoob0123Runoob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>title</code>方法返回”标题化”的字符串,就是说所有单词的首个字母转化为大写，其余字母均为小写，用法为：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">str.title();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">173</span><span class="token punctuation">]</span><span class="token punctuation">:</span> clean_strings(states)Out<span class="token punctuation">[</span><span class="token number">173</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alabama'</span><span class="token punctuation">,</span> <span class="token string">'Georgia'</span><span class="token punctuation">,</span> <span class="token string">'Georgia'</span><span class="token punctuation">,</span> <span class="token string">'Georgia'</span><span class="token punctuation">,</span> <span class="token string">'Florida'</span><span class="token punctuation">,</span> <span class="token string">'South   Carolina'</span><span class="token punctuation">,</span> <span class="token string">'West Virginia'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实还有另外一种不错的办法：将<u>需要在一组给定字符串上执行的所有运算做成一个列表，再将列表中的运算一个一个执行</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def remove_punctuation(value)</span><span class="token punctuation">:</span>    return re.sub('<span class="token punctuation">[</span><span class="token tag">!</span><span class="token comment">#?]', '', value)</span>clean_ops = <span class="token punctuation">[</span>str.strip<span class="token punctuation">,</span> remove_punctuation<span class="token punctuation">,</span> str.title<span class="token punctuation">]</span>def clean_strings(strings<span class="token punctuation">,</span> <span class="token key atrule">ops)</span><span class="token punctuation">:</span>    result = <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">for value in strings</span><span class="token punctuation">:</span>        <span class="token key atrule">for function in ops</span><span class="token punctuation">:</span>            value = function(value)        result.append(value)    return result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们就有了：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">175</span><span class="token punctuation">]</span><span class="token punctuation">:</span> clean_strings(states<span class="token punctuation">,</span> clean_ops)Out<span class="token punctuation">[</span><span class="token number">175</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alabama'</span><span class="token punctuation">,</span> <span class="token string">'Georgia'</span><span class="token punctuation">,</span> <span class="token string">'Georgia'</span><span class="token punctuation">,</span> <span class="token string">'Georgia'</span><span class="token punctuation">,</span> <span class="token string">'Florida'</span><span class="token punctuation">,</span> <span class="token string">'South   Carolina'</span><span class="token punctuation">,</span> <span class="token string">'West Virginia'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种多函数模式使你能在很高的层次上轻松修改字符串的转换方式。此时的clean_strings也更具可复用性！</p><p>还可以将函数用作其他函数的参数，比如内置的<code>map</code>函数，它用于<u>在一组数据上应用一个函数</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">176</span><span class="token punctuation">]</span><span class="token punctuation">:</span> for x in map(remove_punctuation<span class="token punctuation">,</span> <span class="token key atrule">states)</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     print(x)Alabama GeorgiaGeorgiageorgiaFlOrIdasouth   carolinaWest virginia<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="匿名（lambda）函数"><a href="#匿名（lambda）函数" class="headerlink" title="匿名（lambda）函数"></a>匿名（lambda）函数</h4><p>Python支持一种被称为匿名的、或<code>lambda</code>函数。<u>它仅由单条语句组成，该语句的结果就是返回值</u>。它是通过<code>lambda</code>关键字定义的，<u>这个关键字没有别的含义，仅仅是说“我们正在声明的是一个匿名函数”</u>。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def short_function(x)</span><span class="token punctuation">:</span>    return x * 2<span class="token key atrule">equiv_anon = lambda x</span><span class="token punctuation">:</span> x * 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>本书其余部分一般将其称为lambda函数。它们在数据分析工作中非常方便，因为你会发现很多数据转换函数都以函数作为参数的。<u>直接传入lambda函数比编写完整函数声明要少输入很多字（也更清晰）</u>，甚至比将<code>lambda</code>函数赋值给一个变量还要少输入很多字。看看下面这个简单得有些傻的例子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">def apply_to_list(some_list<span class="token punctuation">,</span> <span class="token key atrule">f)</span><span class="token punctuation">:</span>    return <span class="token punctuation">[</span>f(x) for x in some_list<span class="token punctuation">]</span>ints = <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>apply_to_list(ints<span class="token punctuation">,</span> <span class="token key atrule">lambda x</span><span class="token punctuation">:</span> x * 2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>虽然你可以直接编写<code>[x *2for x in ints]</code>，但是这里我们可以非常轻松地传入一个自定义运算给apply_to_list函数。</p><p>再来看另外一个例子。假设有一组字符串，你想要根据各字符串不同字母的数量对其进行排序：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">177</span><span class="token punctuation">]</span><span class="token punctuation">:</span> strings = <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'card'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">,</span> <span class="token string">'abab'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里，我们可以传入一个lambda函数到列表的sort方法：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">strings.sort(key=lambda x</span><span class="token punctuation">:</span> len(set(list(x)))) <span class="token comment">#字符串中的不同的字符数目</span>In <span class="token punctuation">[</span><span class="token number">179</span><span class="token punctuation">]</span><span class="token punctuation">:</span> stringsOut<span class="token punctuation">[</span><span class="token number">179</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'aaaa'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'abab'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'card'</span><span class="token punctuation">]</span><span class="token comment">#笔记：lambda函数之所以会被称为匿名函数，与def声明的函数不同，原因之一就是这种函数对象本身是没有提供名称name属性。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="柯里化：部分参数应用"><a href="#柯里化：部分参数应用" class="headerlink" title="柯里化：部分参数应用"></a>柯里化：部分参数应用</h4><p>柯里化（currying）是一个有趣的计算机科学术语，它指的是通过“部分参数应用”（partial argument application）从现有函数派生出新函数的技术。例如，假设我们有一个执行两数相加的简单函数：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">def add_numbers(x<span class="token punctuation">,</span> <span class="token key atrule">y)</span><span class="token punctuation">:</span>    return x + y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过这个函数，我们可以派生出一个新的只有一个参数的函数——add_five，它用于对其参数加5：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">add_five = lambda y</span><span class="token punctuation">:</span> add_numbers(5<span class="token punctuation">,</span> y)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>add_numbers的第二个参数称为“柯里化的”（curried）。这里没什么特别花哨的东西，因为我们其实就只是定义了一个可以调用现有函数的新函数而已。内置的<code>functools</code>模块可以用partial函数将此过程简化：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">from functools import partialadd_five = partial(add_numbers<span class="token punctuation">,</span> 5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p>能以一种一致的方式对序列进行迭代（比如列表中的对象或文件中的行）是Python的一个重要特点。这是通过一种叫做迭代器协议（iterator protocol，它是一种使对象可迭代的通用方式）的方式实现的，一个原生的使对象可迭代的方法。比如说，对字典进行迭代可以得到其所有的键：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">:</span> some_dict = <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token key atrule">'c'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">181</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">for key in some_dict</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     print(key)abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当你编写<code>for key in some_dict</code>时，Python解释器首先会尝试从some_dict创建一个迭代器：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">182</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dict_iterator = iter(some_dict)In <span class="token punctuation">[</span><span class="token number">183</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dict_iteratorOut<span class="token punctuation">[</span><span class="token number">183</span><span class="token punctuation">]</span><span class="token punctuation">:</span> &lt;dict_keyiterator at 0x7fbbd5a9f908<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>迭代器是一种特殊对象，它可以在诸如for循环之类的上下文中向Python解释器输送对象。大部分能接受列表之类的对象的方法也都可以接受任何可迭代对象。比如<code>min、max、sum</code>等内置方法以及<code>list、tuple</code>等类型构造器：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">184</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(dict_iterator)Out<span class="token punctuation">[</span><span class="token number">184</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成器（generator）是构造新的可迭代对象的一种简单方式。一般的函数执行之后只会返回单个值，而生成器则是<u>以延迟的方式返回一个值序列，即每返回一个值之后暂停，直到下一个值被请求时再继续</u>。要创建一个生成器，只需将函数中的<code>return</code>替换为<code>yeild</code>即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def squares(n=10)</span><span class="token punctuation">:</span>    print('Generating squares from 1 to <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>'.format(n <span class="token important">**</span> 2))    for i in range(1<span class="token punctuation">,</span> <span class="token key atrule">n + 1)</span><span class="token punctuation">:</span>        yield i <span class="token important">**</span> 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>调用该生成器时，没有任何代码会被立即执行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">186</span><span class="token punctuation">]</span><span class="token punctuation">:</span> gen = squares()In <span class="token punctuation">[</span><span class="token number">187</span><span class="token punctuation">]</span><span class="token punctuation">:</span> genOut<span class="token punctuation">[</span><span class="token number">187</span><span class="token punctuation">]</span><span class="token punctuation">:</span> &lt;generator object squares at 0x7fbbd5ab4570<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直到你从<u>该生成器中请求元素</u>时，它才会开始执行其代码：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">188</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">for x in gen</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     print(x<span class="token punctuation">,</span> end=' ')Generating squares from 1 to 1001 4 9 16 25 36 49 64 81 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h5><p>另一种更简洁的构造生成器的方法是使用生成器表达式（generator expression）。<u>这是一种类似于列表、字典、集合推导式的生成器。其创建方式为，把列表推导式两端的方括号改成圆括号</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">189</span><span class="token punctuation">]</span><span class="token punctuation">:</span> gen = (x <span class="token important">**</span> 2 for x in range(100))In <span class="token punctuation">[</span><span class="token number">190</span><span class="token punctuation">]</span><span class="token punctuation">:</span> genOut<span class="token punctuation">[</span><span class="token number">190</span><span class="token punctuation">]</span><span class="token punctuation">:</span> &lt;generator object &lt;genexpr<span class="token punctuation">&gt;</span> at 0x7fbbd5ab29e8<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>它跟下面这个冗长得多的生成器是完全等价的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def _make_gen()</span><span class="token punctuation">:</span>    <span class="token key atrule">for x in range(100)</span><span class="token punctuation">:</span>        yield x <span class="token important">**</span> 2gen = _make_gen()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>生成器表达式也可以取代列表推导式，作为函数参数：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">191</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sum(x <span class="token important">**</span> 2 for x in range(100))Out<span class="token punctuation">[</span><span class="token number">191</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">328350</span>In <span class="token punctuation">[</span><span class="token number">192</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dict((i<span class="token punctuation">,</span> i <span class="token important">**2)</span> for i in range(5))Out<span class="token punctuation">[</span><span class="token number">192</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">0</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token key atrule">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token key atrule">2</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token key atrule">3</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token key atrule">4</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="itertools模块"><a href="#itertools模块" class="headerlink" title="itertools模块"></a><code>itertools</code>模块</h5><p>标准库<code>itertools</code>模块中有一组用于许多常见数据算法的生成器。例如，<code>groupby</code>可以接受任何序列和一个函数。它根据函数的返回值对序列中的连续元素进行分组。下面是一个例子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">193</span><span class="token punctuation">]</span><span class="token punctuation">:</span> import itertoolsIn <span class="token punctuation">[</span><span class="token number">194</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">first_letter = lambda x</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">195</span><span class="token punctuation">]</span><span class="token punctuation">:</span> names = <span class="token punctuation">[</span><span class="token string">'Alan'</span><span class="token punctuation">,</span> <span class="token string">'Adam'</span><span class="token punctuation">,</span> <span class="token string">'Wes'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">,</span> <span class="token string">'Albert'</span><span class="token punctuation">,</span> <span class="token string">'Steven'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">196</span><span class="token punctuation">]</span><span class="token punctuation">:</span> for letter<span class="token punctuation">,</span> names in itertools.groupby(names<span class="token punctuation">,</span> <span class="token key atrule">first_letter)</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     print(letter<span class="token punctuation">,</span> list(names)) <span class="token comment"># names is a generator</span>A <span class="token punctuation">[</span><span class="token string">'Alan'</span><span class="token punctuation">,</span> <span class="token string">'Adam'</span><span class="token punctuation">]</span>W <span class="token punctuation">[</span><span class="token string">'Wes'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">]</span>A <span class="token punctuation">[</span><span class="token string">'Albert'</span><span class="token punctuation">]</span>S <span class="token punctuation">[</span><span class="token string">'Steven'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下表中列出了一些我经常用到的<code>itertools</code>函数。建议参阅Python官方文档，进一步学习。</p><p><img src="https://tvax3.sinaimg.cn/large/007mx13gly1guomv4yveej60jc06pac302.jpg" alt="一些有用的itertools函数"></p><h4 id="错误和异常处理"><a href="#错误和异常处理" class="headerlink" title="错误和异常处理"></a>错误和异常处理</h4><p>优雅地处理Python的错误和异常是构建健壮程序的重要部分。在数据分析中，许多函数函数只用于部分输入。例如，Python的<code>float</code>函数可以将字符串转换成浮点数，但输入有误时，有ValueError错误：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">197</span><span class="token punctuation">]</span><span class="token punctuation">:</span> float('1.2345')Out<span class="token punctuation">[</span><span class="token number">197</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1.2345</span>In <span class="token punctuation">[</span><span class="token number">198</span><span class="token punctuation">]</span><span class="token punctuation">:</span> float('something')<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>ValueError                                Traceback (most recent call last)&lt;ipython<span class="token punctuation">-</span>input<span class="token punctuation">-</span>198<span class="token punctuation">-</span>439904410854<span class="token punctuation">&gt;</span> in &lt;module<span class="token punctuation">&gt;</span>()<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 1 float('something')<span class="token key atrule">ValueError</span><span class="token punctuation">:</span> <span class="token key atrule">could not convert string to float</span><span class="token punctuation">:</span> <span class="token string">'something'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假如想优雅地处理<code>float</code>的错误，让它返回输入值。我们可以写一个函数，在try/except中调用float：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def attempt_float(x)</span><span class="token punctuation">:</span>    <span class="token key atrule">try</span><span class="token punctuation">:</span>        return float(x)    <span class="token key atrule">except</span><span class="token punctuation">:</span>        return x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当<code>float(x)</code>抛出异常时，才会执行<code>except</code>的部分：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">:</span> attempt_float('1.2345')Out<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1.2345</span>In <span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span><span class="token punctuation">:</span> attempt_float('something')Out<span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'something'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你可能注意到float抛出的异常不仅是<code>ValueError</code>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">:</span> float((1<span class="token punctuation">,</span> 2))<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>TypeError                                 Traceback (most recent call last)&lt;ipython<span class="token punctuation">-</span>input<span class="token punctuation">-</span>202<span class="token punctuation">-</span>842079ebb635<span class="token punctuation">&gt;</span> in &lt;module<span class="token punctuation">&gt;</span>()<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 1 float((1<span class="token punctuation">,</span> 2))<span class="token key atrule">TypeError</span><span class="token punctuation">:</span> float() argument must be a string or a number<span class="token punctuation">,</span> not 'tuple'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可能只想处理<code>ValueError，TypeError</code>错误（输入不是字符串或数值）可能是合理的bug。可以写一个异常类型：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def attempt_float(x)</span><span class="token punctuation">:</span>    <span class="token key atrule">try</span><span class="token punctuation">:</span>        return float(x)    <span class="token key atrule">except ValueError</span><span class="token punctuation">:</span>        return x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后有：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">204</span><span class="token punctuation">]</span><span class="token punctuation">:</span> attempt_float((1<span class="token punctuation">,</span> 2))<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>TypeError                                 Traceback (most recent call last)&lt;ipython<span class="token punctuation">-</span>input<span class="token punctuation">-</span>204<span class="token punctuation">-</span>9bdfd730cead<span class="token punctuation">&gt;</span> in &lt;module<span class="token punctuation">&gt;</span>()<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 1 attempt_float((1<span class="token punctuation">,</span> 2))&lt;ipython<span class="token punctuation">-</span>input<span class="token punctuation">-</span>203<span class="token punctuation">-</span>3e06b8379b6b<span class="token punctuation">&gt;</span> in attempt_float(x)      <span class="token key atrule">1 def attempt_float(x)</span><span class="token punctuation">:</span>      <span class="token key atrule">2     try</span><span class="token punctuation">:</span><span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 3         return float(x)      <span class="token key atrule">4     except ValueError</span><span class="token punctuation">:</span>      5         return x<span class="token key atrule">TypeError</span><span class="token punctuation">:</span> float() argument must be a string or a number<span class="token punctuation">,</span> not 'tuple'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以用<u>元组包含多个异常</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def attempt_float(x)</span><span class="token punctuation">:</span>    <span class="token key atrule">try</span><span class="token punctuation">:</span>        return float(x)    except (TypeError<span class="token punctuation">,</span> <span class="token key atrule">ValueError)</span><span class="token punctuation">:</span>        return x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>某些情况下，你可能不想抑制异常，你想无论try部分的代码是否成功，都执行一段代码。可以使用finally：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">f = open(path<span class="token punctuation">,</span> 'w')<span class="token key atrule">try</span><span class="token punctuation">:</span>    write_to_file(f)<span class="token key atrule">finally</span><span class="token punctuation">:</span>    f.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，文件处理f总会被关闭。相似的，你可以用else让只在try部分成功的情况下，才执行代码：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">f = open(path<span class="token punctuation">,</span> 'w')<span class="token key atrule">try</span><span class="token punctuation">:</span>    write_to_file(f)<span class="token key atrule">except</span><span class="token punctuation">:</span>    print('Failed')<span class="token key atrule">else</span><span class="token punctuation">:</span>    print('Succeeded')<span class="token key atrule">finally</span><span class="token punctuation">:</span>    f.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="IPython的异常"><a href="#IPython的异常" class="headerlink" title="IPython的异常"></a>IPython的异常</h5><p>如果是在%run一个脚本或一条语句时抛出异常，IPython默认会打印完整的调用栈（traceback），在栈的每个点都会有几行上下文：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> %run examples/ipython_bug.py<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>AssertionError                            Traceback (most recent call last)/home/wesm/code/pydata<span class="token punctuation">-</span>book/examples/ipython_bug.py in &lt;module<span class="token punctuation">&gt;</span>()     13     throws_an_exception()     14<span class="token punctuation">---</span><span class="token punctuation">&gt;</span> 15 calling_things()/home/wesm/code/pydata<span class="token punctuation">-</span>book/examples/ipython_bug.py in calling_things()     <span class="token key atrule">11 def calling_things()</span><span class="token punctuation">:</span>     12     works_fine()<span class="token punctuation">---</span><span class="token punctuation">&gt;</span> 13     throws_an_exception()     14     15 calling_things()/home/wesm/code/pydata<span class="token punctuation">-</span>book/examples/ipython_bug.py in throws_an_exception()      7     a = 5      8     b = 6<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 9     assert(a + b == 10)     10     <span class="token key atrule">11 def calling_things()</span><span class="token punctuation">:</span>AssertionError<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自身就带有文本是相对于Python标准解释器的极大优点。你可以用魔术命令%xmode，从Plain（与Python标准解释器相同）到Verbose（带有函数的参数值）控制文本显示的数量。后面可以看到，发生错误之后，（用%debug或%pdb magics）可以进入stack进行事后调试。</p><h3 id="3-3-文件和操作系统"><a href="#3-3-文件和操作系统" class="headerlink" title="3.3 文件和操作系统"></a>3.3 文件和操作系统</h3><p>本书的代码示例大多使用诸如pandas.read_csv之类的高级工具将磁盘上的数据文件读入Python数据结构。但我们还是需要了解一些有关Python文件处理方面的基础知识。好在它本来就很简单，这也是Python在文本和文件处理方面的如此流行的原因之一。</p><p>为了打开一个文件以便读写，可以使用内置的<code>open</code>函数以及一个相对或绝对的文件路径：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">207</span><span class="token punctuation">]</span><span class="token punctuation">:</span> path = 'examples/segismundo.txt'In <span class="token punctuation">[</span><span class="token number">208</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f = open(path)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认情况下，文件是以只读模式<code>（’r’）</code>打开的。然后，我们就可以像处理列表那样来处理这个文件句柄f了，比如对行进行迭代：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">for line in f</span><span class="token punctuation">:</span>    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从文件中取出的行都带有完整的行结束符（EOL），因此你常常会看到下面这样的代码（得到一组没有EOL的行）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">209</span><span class="token punctuation">]</span><span class="token punctuation">:</span> lines = <span class="token punctuation">[</span>x.rstrip() for x in open(path)<span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">:</span> linesOut<span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sueña el rico en su riqueza,'</span><span class="token punctuation">,</span> <span class="token string">'que más cuidados le ofrece;'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'sueña el pobre que padece'</span><span class="token punctuation">,</span> <span class="token string">'su miseria y su pobreza;'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'sueña el que a medrar empieza,'</span><span class="token punctuation">,</span> <span class="token string">'sueña el que afana y pretende,'</span><span class="token punctuation">,</span> <span class="token string">'sueña el que agravia y ofende,'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'y en el mundo, en conclusión,'</span><span class="token punctuation">,</span> <span class="token string">'todos sueñan lo que son,'</span><span class="token punctuation">,</span> <span class="token string">'aunque ninguno lo entiende.'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果<u>使用<code>open</code>创建文件对象，一定要用<code>close</code>关闭它</u>。关闭文件可以返回操作系统资源：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">211</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f.close()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用<code>with</code>语句可以可以更容易地清理打开的文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">212</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">with open(path) as f</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     lines = <span class="token punctuation">[</span>x.rstrip() for x in f<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样可以在退出代码块时，自动关闭文件。</p><p><code>rstrip()</code>函数： 删除 string 字符串末尾的指定字符（默认为空格），语法与实例如下：（可参考<a href="https://www.runoob.com/python/att-string-rstrip.html"><code>rstrip()</code> )</a>）</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#用法</span>str.rstrip(<span class="token punctuation">[</span>chars<span class="token punctuation">]</span>)<span class="token comment">#实例</span>str = "     this is string example<span class="token punctuation">...</span>.wow<span class="token tag">!</span><span class="token tag">!</span><span class="token tag">!</span>     ";print str.rstrip();str = "88888888this is string example<span class="token punctuation">...</span>.wow<span class="token tag">!</span><span class="token tag">!!8888888</span>";print str.rstrip('8');<span class="token comment">#输出</span>     this is string example<span class="token punctuation">...</span>.wow<span class="token tag">!</span><span class="token tag">!</span><span class="token tag">!</span>88888888this is string example<span class="token punctuation">...</span>.wow<span class="token tag">!</span><span class="token tag">!</span><span class="token tag">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果输入<code>f =open(path,’w’)</code>，就会有一个新文件被创建在examples/segismundo.txt，并覆盖掉该位置原来的任何数据。另外有一个x文件模式，它可以创建可写的文件，但是如果文件路径存在，就无法创建。下表列出了所有的读/写模式。</p><p><img src="https://tvax2.sinaimg.cn/large/007mx13gly1gup4do8w6pj60yg0b3ad702.jpg" alt="Python的文件模式"></p><p>对于可读文件，一些常用的方法是<code>read、seek和tell</code>。<code>read</code>会从文件返回字符。字符的内容是由文件的编码决定的（如UTF-8），如果是二进制模式打开的就是原始字节：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">213</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f = open(path)In <span class="token punctuation">[</span><span class="token number">214</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f.read(10)Out<span class="token punctuation">[</span><span class="token number">214</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'Sueña el r'</span>In <span class="token punctuation">[</span><span class="token number">215</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f2 = open(path<span class="token punctuation">,</span> 'rb')  <span class="token comment"># Binary mode</span>In <span class="token punctuation">[</span><span class="token number">216</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f2.read(10)Out<span class="token punctuation">[</span><span class="token number">216</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b'Sue\xc3\xb1a el '<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>read</code>模式会将文件句柄的位置提前，<u>提前的数量是读取的字节数</u>。<code>tell</code>可以给出当前的位置：</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">In [217]: f.tell()Out[217]: 11In [218]: f2.tell()Out[218]: 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>尽管我们从文件读取了10个字符，位置却是11，这是因为用默认的编码用了这么多字节才解码了这10个字符。你可以用sys模块检查默认的编码：</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">In [219]: import sysIn [220]: sys.getdefaultencoding()Out[220]: 'utf-8'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>seek</code>将文件位置更改为<u>文件中的指定字节</u>：</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">In [221]: f.seek(3)Out[221]: 3In [222]: f.read(1)Out[222]: 'ñ'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后，关闭文件：</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">In [223]: f.close()In [224]: f2.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>向文件写入，可以使用文件的write或writelines方法。例如，我们可以创建一个无空行版的prof_mod.py：</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">In [225]: with open('tmp.txt', 'w') as handle:   .....:     handle.writelines(x for x in open(path) if len(x) &gt; 1)In [226]: with open('tmp.txt') as f:   .....:     lines = f.readlines()In [227]: linesOut[227]: ['Sueña el rico en su riqueza,\n', 'que más cuidados le ofrece;\n', 'sueña el pobre que padece\n', 'su miseria y su pobreza;\n', 'sueña el que a medrar empieza,\n', 'sueña el que afana y pretende,\n', 'sueña el que agravia y ofende,\n', 'y en el mundo, en conclusión,\n', 'todos sueñan lo que son,\n', 'aunque ninguno lo entiende.\n']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下表列出了一些最常用的文件方法。</p><p><img src="https://tvax2.sinaimg.cn/large/007mx13gly1gup4xa6mknj60yg0e8q7h02.jpg" alt="Python重要的文件方法或属性"></p><h5 id="文件的字节和Unicode"><a href="#文件的字节和Unicode" class="headerlink" title="文件的字节和Unicode"></a>文件的字节和Unicode</h5><p>Python文件的默认操作是“文本模式”，也就是说，你需要处理Python的字符串（即Unicode）。它与“二进制模式”相对，文件模式加一个b。我们来看上一节的文件（UTF-8编码、包含非ASCII字符）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">230</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">with open(path) as f</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     chars = f.read(10)In <span class="token punctuation">[</span><span class="token number">231</span><span class="token punctuation">]</span><span class="token punctuation">:</span> charsOut<span class="token punctuation">[</span><span class="token number">231</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'Sueña el r'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>UTF-8是长度可变的Unicode编码，所以当我从文件请求一定数量的字符时，Python会从文件读取足够多（可能少至10或多至40字节）的字节进行解码。如果以“rb”模式打开文件，则读取确切的请求字节数：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">232</span><span class="token punctuation">]</span><span class="token punctuation">:</span> with open(path<span class="token punctuation">,</span> 'rb') as f<span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     data = f.read(10)In <span class="token punctuation">[</span><span class="token number">233</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">233</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b'Sue\xc3\xb1a el '<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>取决于文本的编码，你可以将字节解码为str对象，但只有当<u>每个编码的Unicode字符都完全成形时</u>才能这么做：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.decode('utf8')Out<span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'Sueña el '</span>In <span class="token punctuation">[</span><span class="token number">235</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>.decode('utf8')<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>UnicodeDecodeError                        Traceback (most recent call last)&lt;ipython<span class="token punctuation">-</span>input<span class="token punctuation">-</span>235<span class="token punctuation">-</span>300e0af10bb7<span class="token punctuation">&gt;</span> in &lt;module<span class="token punctuation">&gt;</span>()<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 1 data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>.decode('utf8')<span class="token key atrule">UnicodeDecodeError</span><span class="token punctuation">:</span> 'utf<span class="token punctuation">-</span><span class="token key atrule">8' codec can't decode byte 0xc3 in position 3</span><span class="token punctuation">:</span> unexpected end of data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文本模式结合了<code>open</code>的编码选项，提供了一种更方便的方法将Unicode转换为另一种编码：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">236</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sink_path = 'sink.txt'In <span class="token punctuation">[</span><span class="token number">237</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">with open(path) as source</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     with open(sink_path<span class="token punctuation">,</span> <span class="token string">'xt'</span><span class="token punctuation">,</span> <span class="token key atrule">encoding='iso-8859-1') as sink</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>         sink.write(source.read())In <span class="token punctuation">[</span><span class="token number">238</span><span class="token punctuation">]</span><span class="token punctuation">:</span> with open(sink_path<span class="token punctuation">,</span> <span class="token key atrule">encoding='iso-8859-1') as f</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     print(f.read(10))Sueña el r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，<u>不要在二进制模式中使用<code>seek</code></u>。如果文件位置位于定义Unicode字符的字节的中间位置，读取后面会产生错误：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f = open(path)In <span class="token punctuation">[</span><span class="token number">241</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f.read(5)Out<span class="token punctuation">[</span><span class="token number">241</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'Sueña'</span>In <span class="token punctuation">[</span><span class="token number">242</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f.seek(4)Out<span class="token punctuation">[</span><span class="token number">242</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4</span>In <span class="token punctuation">[</span><span class="token number">243</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f.read(1)<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>UnicodeDecodeError                        Traceback (most recent call last)&lt;ipython<span class="token punctuation">-</span>input<span class="token punctuation">-</span>243<span class="token punctuation">-</span>7841103e33f5<span class="token punctuation">&gt;</span> in &lt;module<span class="token punctuation">&gt;</span>()<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 1 f.read(1)/miniconda/envs/book<span class="token punctuation">-</span>env/lib/python3.6/codecs.py in decode(self<span class="token punctuation">,</span> input<span class="token punctuation">,</span> final)    319         <span class="token comment"># decode input (taking the buffer into account)</span>    320         data = self.buffer + input<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 321         (result<span class="token punctuation">,</span> consumed) = self._buffer_decode(data<span class="token punctuation">,</span> self.errors<span class="token punctuation">,</span> final)    322         <span class="token comment"># keep undecoded input until the next call</span>    323         self.buffer = data<span class="token punctuation">[</span>consumed<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token key atrule">UnicodeDecodeError</span><span class="token punctuation">:</span> 'utf<span class="token punctuation">-</span><span class="token key atrule">8' codec can't decode byte 0xb1 in position 0</span><span class="token punctuation">:</span> invalid start byteIn <span class="token punctuation">[</span><span class="token number">244</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你经常要对非ASCII字符文本进行数据分析，通晓Python的Unicode功能是非常重要的。更多内容，参阅Python官方文档。</p><h2 id="第-04-章-NumPy-基础：数组和矢量计算"><a href="#第-04-章-NumPy-基础：数组和矢量计算" class="headerlink" title="第 04 章 NumPy 基础：数组和矢量计算"></a><a href="https://www.bookstack.cn/read/pyda-2e-zh/4.md">第 04 章 NumPy 基础：数组和矢量计算</a></h2><p>NumPy（Numerical Python的简称）是Python数值计算最重要的基础包。大多数提供科学计算的包都是用NumPy的数组作为构建基础。</p><p>NumPy的部分功能如下：</p><ul><li>ndarray，一个具有矢量算术运算和复杂广播能力的快速且节省空间的多维数组。</li><li>用于对整组数据进行快速运算的标准数学函数（无需编写循环）。</li><li>用于读写磁盘数据的工具以及用于操作内存映射文件的工具。</li><li>线性代数、随机数生成以及傅里叶变换功能。</li><li>用于集成由C、C++、Fortran等语言编写的代码的A C API。</li></ul><p>由于NumPy提供了一个简单易用的C API，因此很容易将数据传递给由低级语言编写的外部库，外部库也能以NumPy数组的形式将数据返回给Python。这个功能使Python成为一种包装C/C++/Fortran历史代码库的选择，并使被包装库拥有一个动态的、易用的接口。</p><p>NumPy本身并没有提供多么高级的数据分析功能，<u>理解NumPy数组以及面向数组的计算</u>将有助于你更加高效地使用诸如pandas之类的工具。因为NumPy是一个很大的题目，我会在附录A中介绍更多NumPy高级功能，比如广播。</p><p>对于大部分数据分析应用而言，我最关注的功能主要集中在：</p><ul><li>用于数据整理和清理、子集构造和过滤、转换等快速的矢量化数组运算。</li><li>常用的数组算法，如排序、唯一化、集合运算等。</li><li>高效的描述统计和数据聚合/摘要运算。</li><li>用于异构数据集的合并/连接运算的数据对齐和关系型数据运算。</li><li>将条件逻辑表述为数组表达式（而不是带有if-elif-else分支的循环）。</li><li>数据的分组运算（聚合、转换、函数应用等）</li></ul><p>虽然NumPy提供了通用的数值数据处理的计算基础，但大多数读者可能还是想将<u>pandas作为统计和分析工作</u>的基础，尤其是处理表格数据时。pandas还提供了一些NumPy所没有的领域特定的功能，如时间序列处理等。</p><ul><li>笔记：Python的面向数组计算可以追溯到1995年，Jim Hugunin创建了Numeric库。接下来的10年，许多科学编程社区纷纷开始使用Python的数组编程，但是进入21世纪，库的生态系统变得碎片化了。2005年，Travis Oliphant从Numeric和Numarray项目整了出了NumPy项目，进而所有社区都集合到了这个框架下。</li></ul><p>NumPy之于数值计算特别重要的原因之一，是因为它可以高效处理大数组的数据。这是因为：</p><ul><li>NumPy是在一个连续的内存块中存储数据，独立于其他Python内置对象。NumPy的C语言编写的算法库可以操作内存，而不必进行类型检查或其它前期工作。比起Python的内置序列，NumPy数组使用的内存更少。</li><li>NumPy可以在整个数组上执行复杂的计算，而不需要Python的for循环。</li></ul><p>要搞明白具体的性能差距，考察一个包含一百万整数的数组，和一个等价的Python列表：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> import numpy as npIn <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> my_arr = np.arange(1000000)In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> my_list = list(range(1000000))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>各个序列分别乘以2：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> %time for _ in range(10)<span class="token punctuation">:</span> my_arr2 = my_arr * 2<span class="token key atrule">CPU times</span><span class="token punctuation">:</span> user 20 ms<span class="token punctuation">,</span> <span class="token key atrule">sys</span><span class="token punctuation">:</span> 50 ms<span class="token punctuation">,</span> <span class="token key atrule">total</span><span class="token punctuation">:</span> 70 ms<span class="token key atrule">Wall time</span><span class="token punctuation">:</span> 72.4 msIn <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> %time for _ in range(10)<span class="token punctuation">:</span> my_list2 = <span class="token punctuation">[</span>x * 2 for x in my_list<span class="token punctuation">]</span><span class="token key atrule">CPU times</span><span class="token punctuation">:</span> user 760 ms<span class="token punctuation">,</span> <span class="token key atrule">sys</span><span class="token punctuation">:</span> 290 ms<span class="token punctuation">,</span> <span class="token key atrule">total</span><span class="token punctuation">:</span> 1.05 s<span class="token key atrule">Wall time</span><span class="token punctuation">:</span> 1.05 s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于NumPy的算法要比纯Python快10到100倍（甚至更快），并且使用的内存更少。</p><h3 id="4-1-NumPy的ndarray：一种多维数组对象"><a href="#4-1-NumPy的ndarray：一种多维数组对象" class="headerlink" title="4.1 NumPy的ndarray：一种多维数组对象"></a>4.1 NumPy的ndarray：一种多维数组对象</h3><p><code>NumPy</code>最重要的一个特点就是其N维数组对象（即<code>ndarray</code>），该对象是一个快速而灵活的大数据集容器。你可以利用这种数组对整块数据执行一些数学运算，其语法跟标量元素之间的运算一样。</p><p>要明白Python是如何利用与标量值类似的语法进行批次计算，我先引入<code>NumPy</code>，然后生成一个包含随机数据的小数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> import numpy as np<span class="token comment"># Generate some random data</span>In <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data = np.random.randn(2<span class="token punctuation">,</span> 3)In <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-0.2047</span><span class="token punctuation">,</span>  <span class="token number">0.4789</span><span class="token punctuation">,</span> <span class="token number">-0.5194</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">-0.5557</span><span class="token punctuation">,</span>  <span class="token number">1.9658</span><span class="token punctuation">,</span>  <span class="token number">1.3934</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后进行数学运算：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data * 10Out<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">-2.0471</span><span class="token punctuation">,</span>   <span class="token number">4.7894</span><span class="token punctuation">,</span>  <span class="token number">-5.1944</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token number">-5.5573</span><span class="token punctuation">,</span>  <span class="token number">19.6578</span><span class="token punctuation">,</span>  <span class="token number">13.9341</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data + dataOut<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-0.4094</span><span class="token punctuation">,</span>  <span class="token number">0.9579</span><span class="token punctuation">,</span> <span class="token number">-1.0389</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">-1.1115</span><span class="token punctuation">,</span>  <span class="token number">3.9316</span><span class="token punctuation">,</span>  <span class="token number">2.7868</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个例子中，所有的元素都乘以10。第二个例子中，每个元素都与自身相加。</p><blockquote><p>笔记：在本章及全书中，我会使用标准的NumPy惯用法<code>import numpy as np</code>。你当然也可以在代码中使用<code>from numpy import *</code>，但不建议这么做。<code>numpy</code>的命名空间很大，包含许多函数，其中一些的名字与Python的内置函数重名（比如min和max）。</p></blockquote><p>ndarray是一个通用的同构数据多维容器，也就是说，其中的所有元素必须是相同类型的。每个数组都有一个shape（一个表示各维度大小的元组）和一个dtype（一个用于说明数组数据类型的对象）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.shapeOut<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> (2<span class="token punctuation">,</span> 3)In <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.dtypeOut<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dtype('float64')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>本章将会介绍<code>NumPy</code>数组的基本用法，这对于本书后面各章的理解基本够用。虽然大多数数据分析工作不需要深入理解<code>NumPy</code>，但是精通面向数组的编程和思维方式是成为Python科学计算牛人的一大关键步骤。</p><blockquote><p>笔记：当你在本书中看到“数组”、“<code>NumPy</code>数组”、”<code>ndarray</code>”时，基本上都指的是同一样东西，即<code>ndarray</code>对象。</p></blockquote><h4 id="创建ndarray"><a href="#创建ndarray" class="headerlink" title="创建ndarray"></a>创建<code>ndarray</code></h4><p>创建数组最简单的办法就是使用<code>array</code>函数。它接受一切序列型的对象（包括其他数组），然后产生一个新的含有传入数据的<code>NumPy</code>数组。以一个列表的转换为例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data1 = <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7.5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr1 = np.array(data1)In <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr1Out<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">6.</span> <span class="token punctuation">,</span>  <span class="token number">7.5</span><span class="token punctuation">,</span>  <span class="token number">8.</span> <span class="token punctuation">,</span>  <span class="token number">0.</span> <span class="token punctuation">,</span>  <span class="token number">1.</span> <span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>嵌套序列（比如由一组等长列表组成的列表）将会被转换为一个多维数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data2 = <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2 = np.array(data2)In <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2Out<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为data2是列表的列表，<code>NumPy</code>数组arr2的两个维度的shape是从data2引入的。可以用属性ndim和shape验证：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2.ndimOut<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span>In <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2.shapeOut<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> (2<span class="token punctuation">,</span> 4)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>除非特别说明（稍后将会详细介绍），<code>np.array</code>会尝试为新建的这个数组推断出一个较为合适的数据类型。数据类型保存在一个特殊的<code>dtype</code>对象中。比如说，在上面的两个例子中，我们有：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr1.dtypeOut<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dtype('float64')In <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2.dtypeOut<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dtype('int64')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>除<code>np.array</code>之外，还有一些函数也可以新建数组。比如，zeros和ones分别可以创建指定长度或形状的全0或全1数组。empty可以创建一个没有任何具体值的数组。要用这些方法创建多维数组，只需传入一个表示形状的元组即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.zeros(10)Out<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.zeros((3<span class="token punctuation">,</span> 6))Out<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.empty((2<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> 2))Out<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：认为np.empty会返回全0数组的想法是不安全的。很多情况下（如前所示），它返回的都是一些未初始化的垃圾值。</p></blockquote><p><code>arange</code>是Python内置函数<code>range</code>的数组版：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.arange(15)Out<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下表列出了一些数组创建函数。由于NumPy关注的是数值计算，因此，如果没有特别指定，数据类型基本都是float64（浮点数）。</p><p><img src="https://tvax3.sinaimg.cn/large/007mx13gly1guq8uv8wuzj60jc08xtd802.jpg" alt="数组创建函数"></p><h4 id="ndarray的数据类型"><a href="#ndarray的数据类型" class="headerlink" title="ndarray的数据类型"></a><code>ndarray</code>的数据类型</h4><p>dtype（数据类型）是一个特殊的对象，它含有<code>ndarray</code>将一块内存解释为特定数据类型所需的信息：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr1 = np.array(<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=np.float64)    In <span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2 = np.array(<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=np.int32)    In <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr1.dtype    Out<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dtype('float64')    In <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2.dtype    Out<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dtype('int32')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>dtype是<code>NumPy</code>灵活交互其它系统的源泉之一。多数情况下，它们直接映射到相应的机器表示，这使得“读写磁盘上的二进制数据流”以及“集成低级语言代码（如C、Fortran）”等工作变得更加简单。数值型dtype的命名方式相同：一个类型名（如float或int），后面跟一个用于表示各元素位长的数字。标准的双精度浮点值（即Python中的float对象）需要占用8字节（即64位）。因此，该类型在NumPy中就记作float64。下表列出了NumPy所支持的全部数据类型。</p><blockquote><p>笔记：记不住这些NumPy的dtype也没关系，新手更是如此。通常只需要知道你所处理的数据的大致类型是浮点数、复数、整数、布尔值、字符串，还是普通的Python对象即可。当你需要控制数据在内存和磁盘中的存储方式时（尤其是对大数据集），那就得了解如何控制存储类型。</p></blockquote><p><img src="https://tva2.sinaimg.cn/large/007mx13gly1guq8vovj85j60y30l0jxz02.jpg" alt="一种多维数组对象"></p><p><img src="https://tvax1.sinaimg.cn/large/007mx13gly1guq8vq13wkj60y30boq6002.jpg" alt="一种多维数组对象"></p><p>你可以通过<code>ndarray</code>的astype方法明确地将一个数组从一个dtype转换成另一个dtype：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.array(<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.dtypeOut<span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dtype('int64')In <span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> float_arr = arr.astype(np.float64)In <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> float_arr.dtypeOut<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dtype('float64')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在本例中，整数被转换成了浮点数。如果将浮点数转换成整数，则小数部分将会被截取删除：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.array(<span class="token punctuation">[</span><span class="token number">3.7</span><span class="token punctuation">,</span> <span class="token number">-1.2</span><span class="token punctuation">,</span> <span class="token number">-2.6</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">12.9</span><span class="token punctuation">,</span> <span class="token number">10.1</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>  <span class="token number">3.7</span><span class="token punctuation">,</span>  <span class="token number">-1.2</span><span class="token punctuation">,</span>  <span class="token number">-2.6</span><span class="token punctuation">,</span>   <span class="token number">0.5</span><span class="token punctuation">,</span>  <span class="token number">12.9</span><span class="token punctuation">,</span>  <span class="token number">10.1</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.astype(np.int32)Out<span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">-2</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=int32)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果某字符串数组表示的全是数字，也可以用astype将其转换为数值形式：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">:</span> numeric_strings = np.array(<span class="token punctuation">[</span><span class="token string">'1.25'</span><span class="token punctuation">,</span> <span class="token string">'-9.6'</span><span class="token punctuation">,</span> <span class="token string">'42'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=np.string_)In <span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">:</span> numeric_strings.astype(float)Out<span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>  <span class="token number">1.25</span><span class="token punctuation">,</span>  <span class="token number">-9.6</span> <span class="token punctuation">,</span>  <span class="token number">42.</span>  <span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：使用<code>numpy.string</code>_类型时，一定要小心，因为<code>NumPy</code>的字符串数据是大小固定的，发生截取时，不会发出警告。<code>pandas</code>提供了更多非数值数据的便利的处理方法。</p></blockquote><p>如果转换过程因为某种原因而失败了（比如某个不能被转换为float64的字符串），就会引发一个ValueError。这里，我比较懒，写的是float而不是np.float64；NumPy很聪明，它会将Python类型映射到等价的dtype上。</p><p>数组的dtype还有另一个属性：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">]</span><span class="token punctuation">:</span> int_array = np.arange(10)In <span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">]</span><span class="token punctuation">:</span> calibers = np.array(<span class="token punctuation">[</span><span class="token number">.22</span><span class="token punctuation">,</span> <span class="token number">.270</span><span class="token punctuation">,</span> <span class="token number">.357</span><span class="token punctuation">,</span> <span class="token number">.380</span><span class="token punctuation">,</span> <span class="token number">.44</span><span class="token punctuation">,</span> <span class="token number">.50</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=np.float64)In <span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">:</span> int_array.astype(calibers.dtype)Out<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">2.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">7.</span><span class="token punctuation">,</span>  <span class="token number">8.</span><span class="token punctuation">,</span>  <span class="token number">9.</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你还可以用简洁的类型代码来表示dtype：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span><span class="token punctuation">:</span> empty_uint32 = np.empty(8<span class="token punctuation">,</span> dtype='u4')In <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span> empty_uint32Out<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>         <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1075314688</span><span class="token punctuation">,</span>          <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1075707904</span><span class="token punctuation">,</span>          <span class="token number">0</span><span class="token punctuation">,</span>       <span class="token number">1075838976</span><span class="token punctuation">,</span>          <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1072693248</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=uint32)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>笔记：调用astype总会创建一个新的数组（一个数据的备份），即使新的dtype与旧的dtype相同。</p></blockquote><h4 id="NumPy数组的运算"><a href="#NumPy数组的运算" class="headerlink" title="NumPy数组的运算"></a><code>NumPy</code>数组的运算</h4><p>数组很重要，因为它使你不用编写循环即可对数据执行批量运算。NumPy用户称其为矢量化（vectorization）。大小相等的数组之间的任何算术运算都会将运算应用到元素级：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">,</span> <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4.</span><span class="token punctuation">,</span> <span class="token number">5.</span><span class="token punctuation">,</span> <span class="token number">6.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">2.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">6.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr * arrOut<span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">1.</span><span class="token punctuation">,</span>   <span class="token number">4.</span><span class="token punctuation">,</span>   <span class="token number">9.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">16.</span><span class="token punctuation">,</span>  <span class="token number">25.</span><span class="token punctuation">,</span>  <span class="token number">36.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr <span class="token punctuation">-</span> arrOut<span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组与标量的算术运算会将标量值传播到各个元素：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 1 / arrOut<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.</span>    <span class="token punctuation">,</span>  <span class="token number">0.5</span>   <span class="token punctuation">,</span>  <span class="token number">0.3333</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.25</span>  <span class="token punctuation">,</span>  <span class="token number">0.2</span>   <span class="token punctuation">,</span>  <span class="token number">0.1667</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr <span class="token important">**</span> 0.5Out<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.</span>    <span class="token punctuation">,</span>  <span class="token number">1.4142</span><span class="token punctuation">,</span>  <span class="token number">1.7321</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2.</span>    <span class="token punctuation">,</span>  <span class="token number">2.2361</span><span class="token punctuation">,</span>  <span class="token number">2.4495</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>大小相同的数组之间的比较会生成布尔值数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2 = np.array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">4.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">,</span> <span class="token number">12.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2Out<span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">0.</span><span class="token punctuation">,</span>   <span class="token number">4.</span><span class="token punctuation">,</span>   <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">7.</span><span class="token punctuation">,</span>   <span class="token number">2.</span><span class="token punctuation">,</span>  <span class="token number">12.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2 <span class="token punctuation">&gt;</span> arrOut<span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span>array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=bool)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不同大小的数组之间的运算叫做广播（broadcasting），将在附录A中对其进行详细讨论。本书的内容不需要对广播机制有多深的理解。</p><h4 id="基本的索引和切片"><a href="#基本的索引和切片" class="headerlink" title="基本的索引和切片"></a>基本的索引和切片</h4><p>NumPy数组的索引是一个内容丰富的主题，因为选取数据子集或单个元素的方式有很多。一维数组很简单。从表面上看，它们跟Python列表的功能差不多：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.arange(10)In <span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 5In <span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span>5<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span>5<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span> = 12In <span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如上所示，当你将一个标量值赋值给一个切片时（如arr[5:8]=12），该值会自动传播（也就说后面将会讲到的“广播”）到整个选区。跟列表最重要的区别在于，数组切片是原始数组的视图。这意味着数据不会被复制，视图上的任何修改都会直接反映到源数组上。</p><p>作为例子，先创建一个arr的切片：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr_slice = arr<span class="token punctuation">[</span>5<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr_sliceOut<span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，当我修稿arr_slice中的值，变动也会体现在原始数组arr中：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr_slice<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> = 12345In <span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>    <span class="token number">0</span><span class="token punctuation">,</span>     <span class="token number">1</span><span class="token punctuation">,</span>     <span class="token number">2</span><span class="token punctuation">,</span>     <span class="token number">3</span><span class="token punctuation">,</span>     <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">,</span>    <span class="token number">12</span><span class="token punctuation">,</span>     <span class="token number">8</span><span class="token punctuation">,</span>   <span class="token number">9</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切片[ : ]会给数组中的所有值赋值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr_slice<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> = 64In <span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你刚开始接触NumPy，可能会对此感到惊讶（尤其是当你曾经用过其他热衷于复制数组数据的编程语言）。由于NumPy的设计目的是处理大数据，所以你可以想象一下，假如NumPy坚持要将数据复制来复制去的话会产生何等的性能和内存问题。</p><blockquote><p>注意：如果你想要得到的是ndarray切片的一份副本而非视图，就需要明确地进行复制操作，例如<code>arr[5:8].copy()</code>。</p></blockquote><p>对于高维度数组，能做的事情更多。在一个二维数组中，各索引位置上的元素不再是标量而是一维数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d = np.array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此，可以对各个元素进行递归访问，但这样需要做的事情有点多。你可以传入一个以逗号隔开的索引列表来选取单个元素。也就是说，下面两种方式是等价的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 3In <span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下图说明了二维数组的索引方式。轴0作为行，轴1作为列。</p><p><img src="https://tva1.sinaimg.cn/large/007mx13gly1guq91p9gxzj60kp0ifws802.jpg" alt="NumPy数组中的元素索引"></p><p>在多维数组中，如果省略了后面的索引，则返回对象会是一个维度低一点的<code>ndarray</code>（它含有高一级维度上的所有数据）。因此，在2×2×3数组arr3d中：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr3d = np.array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr3dOut<span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>arr3d[0]是一个2×3数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr3d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    Out<span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>标量值和数组都可以被赋值给arr3d[0]：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> old_values = arr3d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.copy()    In <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr3d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> = 42    In <span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr3d    Out<span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)    In <span class="token punctuation">[</span><span class="token number">82</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr3d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> = old_values    In <span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr3d    Out<span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相似的，arr3d[1,0]可以访问索引以(1,0)开头的那些值（以一维数组的形式返回）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr3d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>    Out<span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>虽然是用两步进行索引的，表达式是相同的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">85</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x = arr3d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    In <span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x    Out<span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)    In <span class="token punctuation">[</span><span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    Out<span class="token punctuation">[</span><span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，在上面所有这些选取数组子集的例子中，返回的数组都是视图。</p><h4 id="切片索引"><a href="#切片索引" class="headerlink" title="切片索引"></a>切片索引</h4><p>ndarray的切片语法跟Python列表这样的一维对象差不多：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span>1<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于之前的二维数组arr2d，其切片方式稍显不同：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2dOut<span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">91</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">91</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看出，它是沿着第0轴（即第一个轴）切片的。也就是说，切片是沿着一个轴向选取元素的。表达式arr2d[:2]可以被认为是“选取arr2d的前两行”。</p><p>你可以一次传入多个切片，就像传入多个索引那样：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> 1<span class="token punctuation">:</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>像这样进行切片时，只能得到相同维数的数组视图。通过将整数索引和切片混合，可以得到低维度的切片。</p><p>例如，我可以选取第二行的前两列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相似的，还可以选择第三列的前两行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下图对此进行了说明。注意，“只有冒号”表示选取整个轴，因此你可以像下面这样只对高维轴进行切片：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://static.sitestack.cn/projects/pyda-2e-zh/img/7178691-9da32d2f4629c304.png" alt="图4-2 二维数组切片"></p><p>自然，对切片表达式的赋值操作也会被扩散到整个选区：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> 1<span class="token punctuation">:</span><span class="token punctuation">]</span> = 0In <span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2dOut<span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="布尔型索引"><a href="#布尔型索引" class="headerlink" title="布尔型索引"></a>布尔型索引</h4><p>来看这样一个例子，假设我们有一个用于存储数据的数组以及一个存储姓名的数组（含有重复项）。在这里，我将使用numpy.random中的randn函数生成一些正态分布的随机数据：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">:</span> names = np.array(<span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data = np.random.randn(7<span class="token punctuation">,</span> 4)In <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">:</span> namesOut<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype='&lt;U4')In <span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.0929</span><span class="token punctuation">,</span>  <span class="token number">0.2817</span><span class="token punctuation">,</span>  <span class="token number">0.769</span> <span class="token punctuation">,</span>  <span class="token number">1.2464</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.0072</span><span class="token punctuation">,</span> <span class="token number">-1.2962</span><span class="token punctuation">,</span>  <span class="token number">0.275</span> <span class="token punctuation">,</span>  <span class="token number">0.2289</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.3529</span><span class="token punctuation">,</span>  <span class="token number">0.8864</span><span class="token punctuation">,</span> <span class="token number">-2.0016</span><span class="token punctuation">,</span> <span class="token number">-0.3718</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.669</span> <span class="token punctuation">,</span> <span class="token number">-0.4386</span><span class="token punctuation">,</span> <span class="token number">-0.5397</span><span class="token punctuation">,</span>  <span class="token number">0.477</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3.2489</span><span class="token punctuation">,</span> <span class="token number">-1.0212</span><span class="token punctuation">,</span> <span class="token number">-0.5771</span><span class="token punctuation">,</span>  <span class="token number">0.1241</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.3026</span><span class="token punctuation">,</span>  <span class="token number">0.5238</span><span class="token punctuation">,</span>  <span class="token number">0.0009</span><span class="token punctuation">,</span>  <span class="token number">1.3438</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.7135</span><span class="token punctuation">,</span> <span class="token number">-0.8312</span><span class="token punctuation">,</span> <span class="token number">-2.3702</span><span class="token punctuation">,</span> <span class="token number">-1.8608</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设每个名字都对应data数组中的一行，而我们想要选出对应于名字”Bob”的所有行。跟算术运算一样，数组的比较运算（如==）也是矢量化的。因此，对names和字符串”Bob”的比较运算将会产生一个布尔型数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">:</span> names == 'Bob'Out<span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=bool)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个布尔型数组可用于数组索引：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>names == 'Bob'<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.0929</span><span class="token punctuation">,</span>  <span class="token number">0.2817</span><span class="token punctuation">,</span>  <span class="token number">0.769</span> <span class="token punctuation">,</span>  <span class="token number">1.2464</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.669</span> <span class="token punctuation">,</span> <span class="token number">-0.4386</span><span class="token punctuation">,</span> <span class="token number">-0.5397</span><span class="token punctuation">,</span>  <span class="token number">0.477</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>布尔型数组的长度必须跟被索引的轴长度一致。此外，还可以将布尔型数组跟切片、整数（或整数序列，稍后将对此进行详细讲解）混合使用：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>names == 'Bob'<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.0929</span><span class="token punctuation">,</span>  <span class="token number">0.2817</span><span class="token punctuation">,</span>  <span class="token number">0.769</span> <span class="token punctuation">,</span>  <span class="token number">1.2464</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.669</span> <span class="token punctuation">,</span> <span class="token number">-0.4386</span><span class="token punctuation">,</span> <span class="token number">-0.5397</span><span class="token punctuation">,</span>  <span class="token number">0.477</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：如果布尔型数组的长度不对，布尔型选择就会出错，因此一定要小心。</p></blockquote><p>下面的例子，我选取了<code>names == 'Bob'</code>的行，并索引了列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>names == 'Bob'<span class="token punctuation">,</span> 2<span class="token punctuation">:</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.769</span> <span class="token punctuation">,</span>  <span class="token number">1.2464</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.5397</span><span class="token punctuation">,</span>  <span class="token number">0.477</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>names == 'Bob'<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">1.2464</span><span class="token punctuation">,</span>  <span class="token number">0.477</span> <span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要选择除”Bob”以外的其他值，既可以使用不等于符号（!=），也可以通过~对条件进行否定：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> names <span class="token tag">!=</span> 'Bob'Out<span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=bool)In <span class="token punctuation">[</span><span class="token number">107</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>~(names == 'Bob')<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">107</span><span class="token punctuation">]</span><span class="token punctuation">:</span>array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.0072</span><span class="token punctuation">,</span> <span class="token number">-1.2962</span><span class="token punctuation">,</span>  <span class="token number">0.275</span> <span class="token punctuation">,</span>  <span class="token number">0.2289</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.3529</span><span class="token punctuation">,</span>  <span class="token number">0.8864</span><span class="token punctuation">,</span> <span class="token number">-2.0016</span><span class="token punctuation">,</span> <span class="token number">-0.3718</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3.2489</span><span class="token punctuation">,</span> <span class="token number">-1.0212</span><span class="token punctuation">,</span> <span class="token number">-0.5771</span><span class="token punctuation">,</span>  <span class="token number">0.1241</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.3026</span><span class="token punctuation">,</span>  <span class="token number">0.5238</span><span class="token punctuation">,</span>  <span class="token number">0.0009</span><span class="token punctuation">,</span>  <span class="token number">1.3438</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.7135</span><span class="token punctuation">,</span> <span class="token number">-0.8312</span><span class="token punctuation">,</span> <span class="token number">-2.3702</span><span class="token punctuation">,</span> <span class="token number">-1.8608</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>~操作符用来反转条件很好用：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">:</span> cond = names == 'Bob'In <span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>~cond<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.0072</span><span class="token punctuation">,</span> <span class="token number">-1.2962</span><span class="token punctuation">,</span>  <span class="token number">0.275</span> <span class="token punctuation">,</span>  <span class="token number">0.2289</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.3529</span><span class="token punctuation">,</span>  <span class="token number">0.8864</span><span class="token punctuation">,</span> <span class="token number">-2.0016</span><span class="token punctuation">,</span> <span class="token number">-0.3718</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3.2489</span><span class="token punctuation">,</span> <span class="token number">-1.0212</span><span class="token punctuation">,</span> <span class="token number">-0.5771</span><span class="token punctuation">,</span>  <span class="token number">0.1241</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.3026</span><span class="token punctuation">,</span>  <span class="token number">0.5238</span><span class="token punctuation">,</span>  <span class="token number">0.0009</span><span class="token punctuation">,</span>  <span class="token number">1.3438</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.7135</span><span class="token punctuation">,</span> <span class="token number">-0.8312</span><span class="token punctuation">,</span> <span class="token number">-2.3702</span><span class="token punctuation">,</span> <span class="token number">-1.8608</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选取这三个名字中的两个需要组合应用多个布尔条件，使用&amp;（和）、|（或）之类的布尔算术运算符即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mask = (names == 'Bob') <span class="token punctuation">|</span> (names == 'Will')In <span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">:</span> maskOut<span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=bool)In <span class="token punctuation">[</span><span class="token number">112</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>mask<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">112</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.0929</span><span class="token punctuation">,</span>  <span class="token number">0.2817</span><span class="token punctuation">,</span>  <span class="token number">0.769</span> <span class="token punctuation">,</span>  <span class="token number">1.2464</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.3529</span><span class="token punctuation">,</span>  <span class="token number">0.8864</span><span class="token punctuation">,</span> <span class="token number">-2.0016</span><span class="token punctuation">,</span> <span class="token number">-0.3718</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.669</span> <span class="token punctuation">,</span> <span class="token number">-0.4386</span><span class="token punctuation">,</span> <span class="token number">-0.5397</span><span class="token punctuation">,</span>  <span class="token number">0.477</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3.2489</span><span class="token punctuation">,</span> <span class="token number">-1.0212</span><span class="token punctuation">,</span> <span class="token number">-0.5771</span><span class="token punctuation">,</span>  <span class="token number">0.1241</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过布尔型索引选取数组中的数据，将总是创建数据的副本，即使返回一模一样的数组也是如此。</p><blockquote><p>注意：Python关键字and和or在布尔型数组中无效。要使用&amp;与|。</p></blockquote><p>通过布尔型数组设置值是一种经常用到的手段。为了将data中的所有负值都设置为0，我们只需：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">113</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>data &lt; 0<span class="token punctuation">]</span> = 0In <span class="token punctuation">[</span><span class="token number">114</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">114</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.0929</span><span class="token punctuation">,</span>  <span class="token number">0.2817</span><span class="token punctuation">,</span>  <span class="token number">0.769</span> <span class="token punctuation">,</span>  <span class="token number">1.2464</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.0072</span><span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.275</span> <span class="token punctuation">,</span>  <span class="token number">0.2289</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.3529</span><span class="token punctuation">,</span>  <span class="token number">0.8864</span><span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.669</span> <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.477</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3.2489</span><span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.1241</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.3026</span><span class="token punctuation">,</span>  <span class="token number">0.5238</span><span class="token punctuation">,</span>  <span class="token number">0.0009</span><span class="token punctuation">,</span>  <span class="token number">1.3438</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过一维布尔数组设置整行或列的值也很简单：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>names <span class="token tag">!=</span> 'Joe'<span class="token punctuation">]</span> = 7In <span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.0072</span><span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.275</span> <span class="token punctuation">,</span>  <span class="token number">0.2289</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.3026</span><span class="token punctuation">,</span>  <span class="token number">0.5238</span><span class="token punctuation">,</span>  <span class="token number">0.0009</span><span class="token punctuation">,</span>  <span class="token number">1.3438</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后面会看到，这类二维数据的操作也可以用pandas方便的来做。</p><h4 id="花式索引"><a href="#花式索引" class="headerlink" title="花式索引"></a>花式索引</h4><p>花式索引（Fancy indexing）是一个NumPy术语，它指的是利用整数数组进行索引。假设我们有一个8×4数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.empty((8<span class="token punctuation">,</span> 4))In <span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">for i in range(8):.....</span><span class="token punctuation">:</span>     arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> = iIn <span class="token punctuation">[</span><span class="token number">119</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">119</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2.</span><span class="token punctuation">,</span>  <span class="token number">2.</span><span class="token punctuation">,</span>  <span class="token number">2.</span><span class="token punctuation">,</span>  <span class="token number">2.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">6.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">7.</span><span class="token punctuation">,</span>  <span class="token number">7.</span><span class="token punctuation">,</span>  <span class="token number">7.</span><span class="token punctuation">,</span>  <span class="token number">7.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了以特定顺序选取行子集，只需传入一个用于指定顺序的整数列表或<code>ndarray</code>即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">6.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这段代码确实达到我们的要求了！使用负数索引将会从末尾开始选取行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">121</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-3</span><span class="token punctuation">,</span> <span class="token number">-5</span><span class="token punctuation">,</span> <span class="token number">-7</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">121</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一次传入多个索引数组会有一点特别。它返回的是一个一维数组，其中的元素对应各个索引元组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.arange(32).reshape((8<span class="token punctuation">,</span> 4))In <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>附录A中会详细介绍reshape方法。</p><p>最终选出的是元素(1,0)、(5,3)、(7,1)和(2,2)。无论数组是多少维的，花式索引总是一维的。</p><p>这个花式索引的行为可能会跟某些用户的预期不一样（包括我在内），选取矩阵的行列子集应该是矩形区域的形式才对。下面是得到该结果的一个办法：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>记住，花式索引跟切片不一样，它总是将数据复制到新数组中。</p></blockquote><h4 id="数组转置和轴对换"><a href="#数组转置和轴对换" class="headerlink" title="数组转置和轴对换"></a>数组转置和轴对换</h4><p>转置是重塑的一种特殊形式，它返回的是源数据的视图（不会进行任何复制操作）。数组不仅有transpose方法，还有一个特殊的T属性：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">126</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.arange(15).reshape((3<span class="token punctuation">,</span> 5))In <span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.TOut<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在进行矩阵计算时，经常需要用到该操作，比如利用np.dot计算矩阵内积：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">129</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.random.randn(6<span class="token punctuation">,</span> 3)In <span class="token punctuation">[</span><span class="token number">130</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">130</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-0.8608</span><span class="token punctuation">,</span>  <span class="token number">0.5601</span><span class="token punctuation">,</span> <span class="token number">-1.2659</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.1198</span><span class="token punctuation">,</span> <span class="token number">-1.0635</span><span class="token punctuation">,</span>  <span class="token number">0.3329</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-2.3594</span><span class="token punctuation">,</span> <span class="token number">-0.1995</span><span class="token punctuation">,</span> <span class="token number">-1.542</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.9707</span><span class="token punctuation">,</span> <span class="token number">-1.307</span> <span class="token punctuation">,</span>  <span class="token number">0.2863</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.378</span> <span class="token punctuation">,</span> <span class="token number">-0.7539</span><span class="token punctuation">,</span>  <span class="token number">0.3313</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.3497</span><span class="token punctuation">,</span>  <span class="token number">0.0699</span><span class="token punctuation">,</span>  <span class="token number">0.2467</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">131</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.dot(arr.T<span class="token punctuation">,</span> arr)Out<span class="token punctuation">[</span><span class="token number">131</span><span class="token punctuation">]</span><span class="token punctuation">:</span>array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">9.2291</span><span class="token punctuation">,</span>  <span class="token number">0.9394</span><span class="token punctuation">,</span>  <span class="token number">4.948</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.9394</span><span class="token punctuation">,</span>  <span class="token number">3.7662</span><span class="token punctuation">,</span> <span class="token number">-1.3622</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4.948</span> <span class="token punctuation">,</span> <span class="token number">-1.3622</span><span class="token punctuation">,</span>  <span class="token number">4.3437</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于高维数组，transpose需要得到一个由轴编号组成的元组才能对这些轴进行转置（比较费脑子）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">132</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.arange(16).reshape((2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> 4))In <span class="token punctuation">[</span><span class="token number">133</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">133</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">134</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.transpose((1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> 2))Out<span class="token punctuation">[</span><span class="token number">134</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里，第一个轴被换成了第二个，第二个轴被换成了第一个，最后一个轴不变。</p><p>简单的转置可以使用.T，它其实就是进行轴对换而已。ndarray还有一个swapaxes方法，它需要接受一对轴编号：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">135</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">135</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">136</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.swapaxes(1<span class="token punctuation">,</span> 2)Out<span class="token punctuation">[</span><span class="token number">136</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>swapaxes也是返回源数据的视图（不会进行任何复制操作）。</p><h3 id="4-2-通用函数：快速的元素级数组函数"><a href="#4-2-通用函数：快速的元素级数组函数" class="headerlink" title="4.2 通用函数：快速的元素级数组函数"></a>4.2 通用函数：快速的元素级数组函数</h3><p>通用函数（即ufunc）是一种对ndarray中的数据执行元素级运算的函数。你可以将其看做简单函数（接受一个或多个标量值，并产生一个或多个标量值）的矢量化包装器。</p><p>许多ufunc都是简单的元素级变体，如<code>sqrt</code>和<code>exp</code>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.arange(10)In <span class="token punctuation">[</span><span class="token number">138</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">138</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">139</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.sqrt(arr)Out<span class="token punctuation">[</span><span class="token number">139</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">1.</span>    <span class="token punctuation">,</span>  <span class="token number">1.4142</span><span class="token punctuation">,</span>  <span class="token number">1.7321</span><span class="token punctuation">,</span>  <span class="token number">2.</span>    <span class="token punctuation">,</span>  <span class="token number">2.2361</span><span class="token punctuation">,</span>  <span class="token number">2.4495</span><span class="token punctuation">,</span>        <span class="token number">2.6458</span><span class="token punctuation">,</span>  <span class="token number">2.8284</span><span class="token punctuation">,</span>  <span class="token number">3.</span>    <span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.exp(arr)Out<span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>    <span class="token number">1.</span>    <span class="token punctuation">,</span>     <span class="token number">2.7183</span><span class="token punctuation">,</span>     <span class="token number">7.3891</span><span class="token punctuation">,</span>    <span class="token number">20.0855</span><span class="token punctuation">,</span>    <span class="token number">54.5982</span><span class="token punctuation">,</span>         <span class="token number">148.4132</span><span class="token punctuation">,</span>   <span class="token number">403.4288</span><span class="token punctuation">,</span>  <span class="token number">1096.6332</span><span class="token punctuation">,</span>  <span class="token number">2980.958</span> <span class="token punctuation">,</span>  <span class="token number">8103.0839</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些都是一元（unary）ufunc。另外一些（如<code>add</code>或<code>maximum</code>）接受2个数组（因此也叫二元（binary）ufunc），并返回一个结果数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">141</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x = np.random.randn(8)In <span class="token punctuation">[</span><span class="token number">142</span><span class="token punctuation">]</span><span class="token punctuation">:</span> y = np.random.randn(8)In <span class="token punctuation">[</span><span class="token number">143</span><span class="token punctuation">]</span><span class="token punctuation">:</span> xOut<span class="token punctuation">[</span><span class="token number">143</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">-0.0119</span><span class="token punctuation">,</span>  <span class="token number">1.0048</span><span class="token punctuation">,</span>  <span class="token number">1.3272</span><span class="token punctuation">,</span> <span class="token number">-0.9193</span><span class="token punctuation">,</span> <span class="token number">-1.5491</span><span class="token punctuation">,</span>  <span class="token number">0.0222</span><span class="token punctuation">,</span>  <span class="token number">0.7584</span><span class="token punctuation">,</span>       <span class="token number">-0.6605</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">144</span><span class="token punctuation">]</span><span class="token punctuation">:</span> yOut<span class="token punctuation">[</span><span class="token number">144</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0.8626</span><span class="token punctuation">,</span> <span class="token number">-0.01</span>  <span class="token punctuation">,</span>  <span class="token number">0.05</span>  <span class="token punctuation">,</span>  <span class="token number">0.6702</span><span class="token punctuation">,</span>  <span class="token number">0.853</span> <span class="token punctuation">,</span> <span class="token number">-0.9559</span><span class="token punctuation">,</span> <span class="token number">-0.0235</span><span class="token punctuation">,</span>       <span class="token number">-2.3042</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">145</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.maximum(x<span class="token punctuation">,</span> y)Out<span class="token punctuation">[</span><span class="token number">145</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0.8626</span><span class="token punctuation">,</span>  <span class="token number">1.0048</span><span class="token punctuation">,</span>  <span class="token number">1.3272</span><span class="token punctuation">,</span>  <span class="token number">0.6702</span><span class="token punctuation">,</span>  <span class="token number">0.853</span> <span class="token punctuation">,</span>  <span class="token number">0.0222</span><span class="token punctuation">,</span>  <span class="token number">0.7584</span><span class="token punctuation">,</span>          <span class="token number">-0.6605</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，<code>numpy.maximum</code>计算了x和y中元素级别最大的元素。</p><p>虽然并不常见，但有些ufunc的确可以返回多个数组。<code>modf</code>就是一个例子，它是Python内置函数<code>divmod</code>(返回小数)的矢量化版本，<u>它会返回浮点数数组的小数和整数部分</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">146</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.random.randn(7) * 5In <span class="token punctuation">[</span><span class="token number">147</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">147</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">-3.2623</span><span class="token punctuation">,</span> <span class="token number">-6.0915</span><span class="token punctuation">,</span> <span class="token number">-6.663</span> <span class="token punctuation">,</span>  <span class="token number">5.3731</span><span class="token punctuation">,</span>  <span class="token number">3.6182</span><span class="token punctuation">,</span>  <span class="token number">3.45</span>  <span class="token punctuation">,</span>  <span class="token number">5.0077</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">148</span><span class="token punctuation">]</span><span class="token punctuation">:</span> remainder<span class="token punctuation">,</span> whole_part = np.modf(arr)In <span class="token punctuation">[</span><span class="token number">149</span><span class="token punctuation">]</span><span class="token punctuation">:</span> remainderOut<span class="token punctuation">[</span><span class="token number">149</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">-0.2623</span><span class="token punctuation">,</span> <span class="token number">-0.0915</span><span class="token punctuation">,</span> <span class="token number">-0.663</span> <span class="token punctuation">,</span>  <span class="token number">0.3731</span><span class="token punctuation">,</span><span class="token number">0.6182</span><span class="token punctuation">,</span>  <span class="token number">0.45</span>  <span class="token punctuation">,</span>  <span class="token number">0.0077</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">:</span> whole_partOut<span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">-3.</span><span class="token punctuation">,</span> <span class="token number">-6.</span><span class="token punctuation">,</span> <span class="token number">-6.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Ufuncs可以接受一个out可选参数，这样就能在数组原地进行操作：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">151</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">151</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">-3.2623</span><span class="token punctuation">,</span> <span class="token number">-6.0915</span><span class="token punctuation">,</span> <span class="token number">-6.663</span> <span class="token punctuation">,</span>  <span class="token number">5.3731</span><span class="token punctuation">,</span>  <span class="token number">3.6182</span><span class="token punctuation">,</span>  <span class="token number">3.45</span>  <span class="token punctuation">,</span>  <span class="token number">5.0077</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">152</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.sqrt(arr)Out<span class="token punctuation">[</span><span class="token number">152</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>    nan<span class="token punctuation">,</span>     nan<span class="token punctuation">,</span>     nan<span class="token punctuation">,</span>  <span class="token number">2.318</span> <span class="token punctuation">,</span>  <span class="token number">1.9022</span><span class="token punctuation">,</span>  <span class="token number">1.8574</span><span class="token punctuation">,</span>  <span class="token number">2.2378</span><span class="token punctuation">]</span>)<span class="token comment">#影响对象arr</span>In <span class="token punctuation">[</span><span class="token number">153</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.sqrt(arr<span class="token punctuation">,</span> arr)Out<span class="token punctuation">[</span><span class="token number">153</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>    nan<span class="token punctuation">,</span>     nan<span class="token punctuation">,</span>     nan<span class="token punctuation">,</span>  <span class="token number">2.318</span> <span class="token punctuation">,</span>  <span class="token number">1.9022</span><span class="token punctuation">,</span>  <span class="token number">1.8574</span><span class="token punctuation">,</span>  <span class="token number">2.2378</span><span class="token punctuation">]</span>)<span class="token comment">#不影响对象arr</span>In <span class="token punctuation">[</span><span class="token number">154</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">154</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>    nan<span class="token punctuation">,</span>     nan<span class="token punctuation">,</span>     nan<span class="token punctuation">,</span>  <span class="token number">2.318</span> <span class="token punctuation">,</span>  <span class="token number">1.9022</span><span class="token punctuation">,</span>  <span class="token number">1.8574</span><span class="token punctuation">,</span>  <span class="token number">2.2378</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下表分别列出了一些一元和二元ufunc。</p><p><img src="https://tvax2.sinaimg.cn/large/007mx13gly1guqdusy290j60yg0i7jxf02.jpg" alt="快速的元素级数组函数"></p><p><img src="https://tvax4.sinaimg.cn/large/007mx13gly1guqdvwgwrjj60yg0bkdjz02.jpg" alt="快速的元素级数组函数"></p><p><img src="https://tvax1.sinaimg.cn/large/007mx13gly1guqdwlc3ubj60yg07mabp02.jpg" alt="快速的元素级数组函数"></p><p><img src="https://tva4.sinaimg.cn/large/007mx13gly1guqdxnskoqj60yg0ijq8u02.jpg" alt="快速的元素级数组函数"></p><h3 id="4-3-利用数组进行数据处理"><a href="#4-3-利用数组进行数据处理" class="headerlink" title="4.3 利用数组进行数据处理"></a><img src="https://tvax2.sinaimg.cn/large/007mx13gly1guqdxrg4ydj60yg06vjts02.jpg" alt="快速的元素级数组函数">4.3 利用数组进行数据处理</h3><p>NumPy数组使你可以将许多种数据处理任务表述为简洁的数组表达式（否则需要编写循环）。<u>用数组表达式代替循环的做法，通常被称为矢量化。</u>一般来说，矢量化数组运算要比等价的纯Python方式快上一两个数量级（甚至更多），尤其是各种数值计算。在后面内容中（见附录A）我将介绍广播，这是一种针对矢量化计算的强大手段。</p><p>作为简单的例子，假设我们想要在一组值（网格型）上计算函数sqrt(x^2+y^2)。<code>np.meshgrid</code>函数接受两个一维数组，并产生两个二维矩阵（对应于两个数组中所有的(x,y)对）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">155</span><span class="token punctuation">]</span><span class="token punctuation">:</span> points = np.arange(<span class="token punctuation">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> 0.01) <span class="token comment"># 1000 equally spaced points</span>In <span class="token punctuation">[</span><span class="token number">156</span><span class="token punctuation">]</span><span class="token punctuation">:</span> xs<span class="token punctuation">,</span> ys = np.meshgrid(points<span class="token punctuation">,</span> points)In <span class="token punctuation">[</span><span class="token number">157</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ysOut<span class="token punctuation">[</span><span class="token number">157</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-5.</span>  <span class="token punctuation">,</span> <span class="token number">-5.</span>  <span class="token punctuation">,</span> <span class="token number">-5.</span>  <span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span> <span class="token number">-5.</span>  <span class="token punctuation">,</span> <span class="token number">-5.</span>  <span class="token punctuation">,</span> <span class="token number">-5.</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-4.99</span><span class="token punctuation">,</span> <span class="token number">-4.99</span><span class="token punctuation">,</span> <span class="token number">-4.99</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span> <span class="token number">-4.99</span><span class="token punctuation">,</span> <span class="token number">-4.99</span><span class="token punctuation">,</span> <span class="token number">-4.99</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-4.98</span><span class="token punctuation">,</span> <span class="token number">-4.98</span><span class="token punctuation">,</span> <span class="token number">-4.98</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span> <span class="token number">-4.98</span><span class="token punctuation">,</span> <span class="token number">-4.98</span><span class="token punctuation">,</span> <span class="token number">-4.98</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">...</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">4.97</span><span class="token punctuation">,</span>  <span class="token number">4.97</span><span class="token punctuation">,</span>  <span class="token number">4.97</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span>  <span class="token number">4.97</span><span class="token punctuation">,</span>  <span class="token number">4.97</span><span class="token punctuation">,</span>  <span class="token number">4.97</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4.98</span><span class="token punctuation">,</span>  <span class="token number">4.98</span><span class="token punctuation">,</span>  <span class="token number">4.98</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span>  <span class="token number">4.98</span><span class="token punctuation">,</span>  <span class="token number">4.98</span><span class="token punctuation">,</span>  <span class="token number">4.98</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4.99</span><span class="token punctuation">,</span>  <span class="token number">4.99</span><span class="token punctuation">,</span>  <span class="token number">4.99</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span>  <span class="token number">4.99</span><span class="token punctuation">,</span>  <span class="token number">4.99</span><span class="token punctuation">,</span>  <span class="token number">4.99</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，对该函数的求值运算就好办了，把这两个数组当做两个浮点数那样编写表达式即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">158</span><span class="token punctuation">]</span><span class="token punctuation">:</span> z = np.sqrt(xs <span class="token important">**</span> 2 + ys <span class="token important">**</span> 2)In <span class="token punctuation">[</span><span class="token number">159</span><span class="token punctuation">]</span><span class="token punctuation">:</span> zOut<span class="token punctuation">[</span><span class="token number">159</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">7.0711</span><span class="token punctuation">,</span>  <span class="token number">7.064</span> <span class="token punctuation">,</span>  <span class="token number">7.0569</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span>  <span class="token number">7.0499</span><span class="token punctuation">,</span>  <span class="token number">7.0569</span><span class="token punctuation">,</span>  <span class="token number">7.064</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">7.064</span> <span class="token punctuation">,</span>  <span class="token number">7.0569</span><span class="token punctuation">,</span>  <span class="token number">7.0499</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span>  <span class="token number">7.0428</span><span class="token punctuation">,</span>  <span class="token number">7.0499</span><span class="token punctuation">,</span>  <span class="token number">7.0569</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">7.0569</span><span class="token punctuation">,</span>  <span class="token number">7.0499</span><span class="token punctuation">,</span>  <span class="token number">7.0428</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span>  <span class="token number">7.0357</span><span class="token punctuation">,</span>  <span class="token number">7.0428</span><span class="token punctuation">,</span> <span class="token number">7.0499</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">...</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">7.0499</span><span class="token punctuation">,</span>  <span class="token number">7.0428</span><span class="token punctuation">,</span>  <span class="token number">7.0357</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span>  <span class="token number">7.0286</span><span class="token punctuation">,</span>  <span class="token number">7.0357</span><span class="token punctuation">,</span>  <span class="token number">7.0428</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">7.0569</span><span class="token punctuation">,</span>  <span class="token number">7.0499</span><span class="token punctuation">,</span>  <span class="token number">7.0428</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span>  <span class="token number">7.0357</span><span class="token punctuation">,</span>  <span class="token number">7.0428</span><span class="token punctuation">,</span>  <span class="token number">7.0499</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">7.064</span> <span class="token punctuation">,</span>  <span class="token number">7.0569</span><span class="token punctuation">,</span>  <span class="token number">7.0499</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span>  <span class="token number">7.0428</span><span class="token punctuation">,</span>  <span class="token number">7.0499</span><span class="token punctuation">,</span>  <span class="token number">7.0569</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作为第9章的先导，我用<code>matplotlib</code>创建了这个二维数组的可视化：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">160</span><span class="token punctuation">]</span><span class="token punctuation">:</span> import matplotlib.pyplot as pltIn <span class="token punctuation">[</span><span class="token number">161</span><span class="token punctuation">]</span><span class="token punctuation">:</span> plt.imshow(z<span class="token punctuation">,</span> cmap=plt.cm.gray); plt.colorbar()Out<span class="token punctuation">[</span><span class="token number">161</span><span class="token punctuation">]</span><span class="token punctuation">:</span> &lt;matplotlib.colorbar.Colorbar at 0x7f715e3fa630<span class="token punctuation">&gt;</span>In <span class="token punctuation">[</span><span class="token number">162</span><span class="token punctuation">]</span><span class="token punctuation">:</span> plt.title("Image plot of $\sqrt<span class="token punctuation">{</span>x^2 + y^2<span class="token punctuation">}</span>$ for a grid of values")Out<span class="token punctuation">[</span><span class="token number">162</span><span class="token punctuation">]</span><span class="token punctuation">:</span> &lt;matplotlib.text.Text at 0x7f715d2de748<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下图是用<code>matplotlib</code>的<code>imshow</code>函数创建的。</p><p><img src="https://tva1.sinaimg.cn/large/007mx13gly1guqe73hxqpj608a07k74p02.jpg" alt="根据网格对函数求值的结果"></p><h4 id="将条件逻辑表述为数组运算"><a href="#将条件逻辑表述为数组运算" class="headerlink" title="将条件逻辑表述为数组运算"></a>将条件逻辑表述为数组运算</h4><p><code>numpy.where</code>函数是三元表达式<code>x if condition else y</code>的矢量化版本。假设我们有一个布尔数组和两个值数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">165</span><span class="token punctuation">]</span><span class="token punctuation">:</span> xarr = np.array(<span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">1.3</span><span class="token punctuation">,</span> <span class="token number">1.4</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">166</span><span class="token punctuation">]</span><span class="token punctuation">:</span> yarr = np.array(<span class="token punctuation">[</span><span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token number">2.4</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">167</span><span class="token punctuation">]</span><span class="token punctuation">:</span> cond = np.array(<span class="token punctuation">[</span><span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>假设我们想要根据cond中的值选取xarr和yarr的值：当cond中的值为True时，选取xarr的值，否则从yarr中选取。列表推导式的写法应该如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">168</span><span class="token punctuation">]</span><span class="token punctuation">:</span> result = <span class="token punctuation">[</span><span class="token key atrule">(x if c else y)   .....</span><span class="token punctuation">:</span>           for x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> c in zip(xarr<span class="token punctuation">,</span> yarr<span class="token punctuation">,</span> cond)<span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">169</span><span class="token punctuation">]</span><span class="token punctuation">:</span> resultOut<span class="token punctuation">[</span><span class="token number">169</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1.1000000000000001</span><span class="token punctuation">,</span> <span class="token number">2.2000000000000002</span><span class="token punctuation">,</span> <span class="token number">1.3</span><span class="token punctuation">,</span> <span class="token number">1.3999999999999999</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这有几个问题。第一，它对大数组的处理速度不是很快（因为所有工作都是由纯Python完成的）。第二，无法用于多维数组。若使用<code>np.where</code>，则可以将该功能写得非常简洁：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">:</span> result = np.where(cond<span class="token punctuation">,</span> xarr<span class="token punctuation">,</span> yarr)In <span class="token punctuation">[</span><span class="token number">171</span><span class="token punctuation">]</span><span class="token punctuation">:</span> resultOut<span class="token punctuation">[</span><span class="token number">171</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">1.1</span><span class="token punctuation">,</span>  <span class="token number">2.2</span><span class="token punctuation">,</span>  <span class="token number">1.3</span><span class="token punctuation">,</span>  <span class="token number">1.4</span><span class="token punctuation">,</span>  <span class="token number">2.5</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>np.where</code>的第二个和第三个参数不必是数组，它们都可以是标量值。在数据分析工作中，where通常用于根据另一个数组而产生一个新的数组。假设有一个由随机数据组成的矩阵，你希望将所有正值替换为2，将所有负值替换为－2。若利用np.where，则会非常简单：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">172</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.random.randn(4<span class="token punctuation">,</span> 4)In <span class="token punctuation">[</span><span class="token number">173</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">173</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-0.5031</span><span class="token punctuation">,</span> <span class="token number">-0.6223</span><span class="token punctuation">,</span> <span class="token number">-0.9212</span><span class="token punctuation">,</span> <span class="token number">-0.7262</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.2229</span><span class="token punctuation">,</span>  <span class="token number">0.0513</span><span class="token punctuation">,</span> <span class="token number">-1.1577</span><span class="token punctuation">,</span>  <span class="token number">0.8167</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.4336</span><span class="token punctuation">,</span>  <span class="token number">1.0107</span><span class="token punctuation">,</span>  <span class="token number">1.8249</span><span class="token punctuation">,</span> <span class="token number">-0.9975</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.8506</span><span class="token punctuation">,</span> <span class="token number">-0.1316</span><span class="token punctuation">,</span>  <span class="token number">0.9124</span><span class="token punctuation">,</span>  <span class="token number">0.1882</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">174</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr <span class="token punctuation">&gt;</span> 0Out<span class="token punctuation">[</span><span class="token number">174</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=bool)In <span class="token punctuation">[</span><span class="token number">175</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.where(arr <span class="token punctuation">&gt;</span> 0<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">-</span>2)Out<span class="token punctuation">[</span><span class="token number">175</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-2</span><span class="token punctuation">,</span> <span class="token number">-2</span><span class="token punctuation">,</span> <span class="token number">-2</span><span class="token punctuation">,</span> <span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">-2</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">-2</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>np.where</code>，可以将标量和数组结合起来。例如，我可用常数2替换arr中所有正的值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">176</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.where(arr <span class="token punctuation">&gt;</span> 0<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> arr) <span class="token comment"># set only positive values to 2Out[176]: array([[-0.5031, -0.6223, -0.9212, -0.7262],       [ 2.    ,  2.    , -1.1577,  2.    ],       [ 2.    ,  2.    ,  2.    , -0.9975],       [ 2.    , -0.1316,  2.    ,  2.    ]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传递给where的数组大小可以不相等，甚至可以是标量值。</p><h4 id="数学和统计方法"><a href="#数学和统计方法" class="headerlink" title="数学和统计方法"></a>数学和统计方法</h4><p>可以通过数组上的一组数学函数对整个数组或某个轴向的数据进行统计计算。<code>sum、mean</code>以及标准差<code>std</code>等聚合计算（aggregation，通常叫做约简（reduction））既可以当做数组的实例方法调用，也可以当做顶级NumPy函数使用。</p><p>这里，我生成了一些正态分布随机数据，然后做了聚类统计：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">177</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.random.randn(5<span class="token punctuation">,</span> 4)In <span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">2.1695</span><span class="token punctuation">,</span> <span class="token number">-0.1149</span><span class="token punctuation">,</span>  <span class="token number">2.0037</span><span class="token punctuation">,</span>  <span class="token number">0.0296</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.7953</span><span class="token punctuation">,</span>  <span class="token number">0.1181</span><span class="token punctuation">,</span> <span class="token number">-0.7485</span><span class="token punctuation">,</span>  <span class="token number">0.585</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.1527</span><span class="token punctuation">,</span> <span class="token number">-1.5657</span><span class="token punctuation">,</span> <span class="token number">-0.5625</span><span class="token punctuation">,</span> <span class="token number">-0.0327</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.929</span> <span class="token punctuation">,</span> <span class="token number">-0.4826</span><span class="token punctuation">,</span> <span class="token number">-0.0363</span><span class="token punctuation">,</span>  <span class="token number">1.0954</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.9809</span><span class="token punctuation">,</span> <span class="token number">-0.5895</span><span class="token punctuation">,</span>  <span class="token number">1.5817</span><span class="token punctuation">,</span> <span class="token number">-0.5287</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">179</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.mean()Out<span class="token punctuation">[</span><span class="token number">179</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 0.19607051119998253In <span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.mean(arr)Out<span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 0.19607051119998253In <span class="token punctuation">[</span><span class="token number">181</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.sum()Out<span class="token punctuation">[</span><span class="token number">181</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">3.9214102239996507</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mean和sum这类的函数可以接受一个axis选项参数，用于计算该轴向上的统计值，最终结果是一个<u>少一维的数组</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">182</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.mean(axis=1)Out<span class="token punctuation">[</span><span class="token number">182</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">1.022</span> <span class="token punctuation">,</span>  <span class="token number">0.1875</span><span class="token punctuation">,</span> <span class="token number">-0.502</span> <span class="token punctuation">,</span> <span class="token number">-0.0881</span><span class="token punctuation">,</span>  <span class="token number">0.3611</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">183</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.sum(axis=0)Out<span class="token punctuation">[</span><span class="token number">183</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">3.1693</span><span class="token punctuation">,</span> <span class="token number">-2.6345</span><span class="token punctuation">,</span>  <span class="token number">2.2381</span><span class="token punctuation">,</span>  <span class="token number">1.1486</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里，<code>arr.mean(1)</code>是“计算行的平均值”，<code>arr.sum(0)</code>是“计算每列的和”。</p><p>其他如cumsum和cumprod之类的方法则不聚合，而是产生一个由中间结果组成的数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">184</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.array(<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">185</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.cumsum()Out<span class="token punctuation">[</span><span class="token number">185</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在多维数组中，累加函数（如cumsum）返回的是同样大小的数组，但是会根据每个低维的切片沿着标记轴计算部分聚类：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">186</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">187</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">187</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">188</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.cumsum(axis=0)Out<span class="token punctuation">[</span><span class="token number">188</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">189</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.cumprod(axis=1)Out<span class="token punctuation">[</span><span class="token number">189</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">336</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下表列出了全部的基本数组统计方法。后续章节中有很多例子都会用到这些方法。</p><p><img src="https://tvax3.sinaimg.cn/large/007mx13gly1guqeinaiw4j60yg0b577s02.jpg" alt="利用数组进行数据处理"></p><p><img src="https://tva1.sinaimg.cn/large/007mx13gly1guqeiuk84mj60yg06dwfs02.jpg" alt=" 利用数组进行数据处理"></p><h4 id="用于布尔型数组的方法"><a href="#用于布尔型数组的方法" class="headerlink" title="用于布尔型数组的方法"></a>用于布尔型数组的方法</h4><p>在上面这些方法中，布尔值会被强制转换为1（True）和0（False）。因此，sum经常被用来对布尔型数组中的True值计数：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">190</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.random.randn(100)In <span class="token punctuation">[</span><span class="token number">191</span><span class="token punctuation">]</span><span class="token punctuation">:</span> (arr <span class="token punctuation">&gt;</span> 0).sum() <span class="token comment"># Number of positive valuesOut[191]: 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外还有两个方法<code>any</code>和<code>all</code>，它们对布尔型数组非常有用。<code>any</code>用于测试数组中是否存在一个或多个<code>True</code>，而<code>all</code>则检查数组中所有值是否都是<code>True</code>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">192</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bools = np.array(<span class="token punctuation">[</span><span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">193</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bools.any()Out<span class="token punctuation">[</span><span class="token number">193</span><span class="token punctuation">]</span><span class="token punctuation">:</span> TrueIn <span class="token punctuation">[</span><span class="token number">194</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bools.all()Out<span class="token punctuation">[</span><span class="token number">194</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这两个方法也能用于非布尔型数组，所有非0元素将会被当做True。</p><h4 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h4><p>跟Python内置的列表类型一样，NumPy数组也可以通过sort方法就地排序：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">195</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.random.randn(6)In <span class="token punctuation">[</span><span class="token number">196</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">196</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0.6095</span><span class="token punctuation">,</span> <span class="token number">-0.4938</span><span class="token punctuation">,</span>  <span class="token number">1.24</span>  <span class="token punctuation">,</span> <span class="token number">-0.1357</span><span class="token punctuation">,</span>  <span class="token number">1.43</span>  <span class="token punctuation">,</span> <span class="token number">-0.8469</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">197</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.sort()In <span class="token punctuation">[</span><span class="token number">198</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">198</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">-0.8469</span><span class="token punctuation">,</span> <span class="token number">-0.4938</span><span class="token punctuation">,</span> <span class="token number">-0.1357</span><span class="token punctuation">,</span>  <span class="token number">0.6095</span><span class="token punctuation">,</span>  <span class="token number">1.24</span>  <span class="token punctuation">,</span>  <span class="token number">1.43</span>  <span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多维数组可以在任何一个轴向上进行排序，只需将轴编号传给sort即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">199</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.random.randn(5<span class="token punctuation">,</span> 3)In <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.6033</span><span class="token punctuation">,</span>  <span class="token number">1.2636</span><span class="token punctuation">,</span> <span class="token number">-0.2555</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.4457</span><span class="token punctuation">,</span>  <span class="token number">0.4684</span><span class="token punctuation">,</span> <span class="token number">-0.9616</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-1.8245</span><span class="token punctuation">,</span>  <span class="token number">0.6254</span><span class="token punctuation">,</span>  <span class="token number">1.0229</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.1074</span><span class="token punctuation">,</span>  <span class="token number">0.0909</span><span class="token punctuation">,</span> <span class="token number">-0.3501</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.218</span> <span class="token punctuation">,</span> <span class="token number">-0.8948</span><span class="token punctuation">,</span> <span class="token number">-1.7415</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.sort(1)In <span class="token punctuation">[</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-0.2555</span><span class="token punctuation">,</span>  <span class="token number">0.6033</span><span class="token punctuation">,</span>  <span class="token number">1.2636</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.9616</span><span class="token punctuation">,</span> <span class="token number">-0.4457</span><span class="token punctuation">,</span>  <span class="token number">0.4684</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-1.8245</span><span class="token punctuation">,</span>  <span class="token number">0.6254</span><span class="token punctuation">,</span>  <span class="token number">1.0229</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.3501</span><span class="token punctuation">,</span>  <span class="token number">0.0909</span><span class="token punctuation">,</span>  <span class="token number">1.1074</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-1.7415</span><span class="token punctuation">,</span> <span class="token number">-0.8948</span><span class="token punctuation">,</span>  <span class="token number">0.218</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>顶级方法np.sort返回的是数组的已排序副本，而就地排序则会修改数组本身。计算数组分位数最简单的办法是对其进行排序，然后选取特定位置的值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">203</span><span class="token punctuation">]</span><span class="token punctuation">:</span> large_arr = np.random.randn(1000)In <span class="token punctuation">[</span><span class="token number">204</span><span class="token punctuation">]</span><span class="token punctuation">:</span> large_arr.sort()In <span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">:</span> large_arr<span class="token punctuation">[</span>int(0.05 * len(large_arr))<span class="token punctuation">]</span> <span class="token comment"># 5% quantileOut[205]: -1.5311513550102103</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更多关于NumPy排序方法以及诸如间接排序之类的高级技术，请参阅附录A。在pandas中还可以找到一些其他跟排序有关的数据操作（比如根据一列或多列对表格型数据进行排序）。<br>唯一化以及其它的集合逻辑</p><p>NumPy提供了一些针对一维ndarray的基本集合运算。最常用的可能要数<code>np.unique</code>了，它用于找出数组中的唯一值并返回已排序的结果：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">206</span><span class="token punctuation">]</span><span class="token punctuation">:</span> names = np.array(<span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">207</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.unique(names)Out<span class="token punctuation">[</span><span class="token number">207</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      dtype='&lt;U4')In <span class="token punctuation">[</span><span class="token number">208</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ints = np.array(<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">209</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.unique(ints)Out<span class="token punctuation">[</span><span class="token number">209</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿跟np.unique等价的纯Python代码来对比一下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sorted(set(names))Out<span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一个函数<code>np.in1d</code>用于测试一个数组中的值在另一个数组中的成员资格，返回一个布尔型数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">211</span><span class="token punctuation">]</span><span class="token punctuation">:</span> values = np.array(<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">212</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.in1d(values<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">212</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=bool)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>NumPy中的集合函数请参见下表。<br><img src="https://tva1.sinaimg.cn/large/007mx13gly1guqes9xyq2j60yg0ds0xj02.jpg" alt="利用数组进行数据处理 "></p><h3 id="4-4-用于数组的文件输入输出"><a href="#4-4-用于数组的文件输入输出" class="headerlink" title="4.4 用于数组的文件输入输出"></a>4.4 用于数组的文件输入输出</h3><p><code>NumPy</code>能够读写磁盘上的文本数据或二进制数据。这一小节只讨论<code>NumPy</code>的内置二进制格式，因为更多的用户会使用pandas或其它工具加载文本或表格数据（见第6章）。</p><p><code>np.save</code>和<code>np.load</code>是读写磁盘数组数据的两个主要函数。默认情况下，数组是以未压缩的原始二进制格式保存在扩展名为.npy的文件中的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">213</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.arange(10)In <span class="token punctuation">[</span><span class="token number">214</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.save('some_array'<span class="token punctuation">,</span> arr)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果文件路径末尾没有扩展名.npy，则该扩展名会被自动加上。然后就可以通过np.load读取磁盘上的数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">215</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.load('some_array.npy')Out<span class="token punctuation">[</span><span class="token number">215</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过np.savez可以将多个数组保存到一个未压缩文件中，将数组以关键字参数的形式传入即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">216</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.savez('array_archive.npz'<span class="token punctuation">,</span> a=arr<span class="token punctuation">,</span> b=arr)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加载.npz文件时，你会得到一个类似字典的对象，该对象会对各个数组进行延迟加载：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">217</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arch = np.load('array_archive.npz')In <span class="token punctuation">[</span><span class="token number">218</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arch<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">218</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要将数据压缩，可以使用numpy.savez_compressed：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">219</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.savez_compressed('arrays_compressed.npz'<span class="token punctuation">,</span> a=arr<span class="token punctuation">,</span> b=arr)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-5-线性代数"><a href="#4-5-线性代数" class="headerlink" title="4.5 线性代数"></a>4.5 线性代数</h3><p>线性代数（如矩阵乘法、矩阵分解、行列式以及其他方阵数学等）是任何数组库的重要组成部分。不像某些语言（如MATLAB），通过*对两个二维数组相乘得到的是一个元素级的积，而不是一个矩阵点积。因此，NumPy提供了一个用于矩阵乘法的dot函数（既是一个数组方法也是numpy命名空间中的一个函数）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">223</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x = np.array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">,</span> <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4.</span><span class="token punctuation">,</span> <span class="token number">5.</span><span class="token punctuation">,</span> <span class="token number">6.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">224</span><span class="token punctuation">]</span><span class="token punctuation">:</span> y = np.array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">6.</span><span class="token punctuation">,</span> <span class="token number">23.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">225</span><span class="token punctuation">]</span><span class="token punctuation">:</span> xOut<span class="token punctuation">[</span><span class="token number">225</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">2.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">6.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">226</span><span class="token punctuation">]</span><span class="token punctuation">:</span> yOut<span class="token punctuation">[</span><span class="token number">226</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">23.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">-1.</span><span class="token punctuation">,</span>   <span class="token number">7.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">8.</span><span class="token punctuation">,</span>   <span class="token number">9.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">227</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x.dot(y)Out<span class="token punctuation">[</span><span class="token number">227</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">28.</span><span class="token punctuation">,</span>   <span class="token number">64.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">67.</span><span class="token punctuation">,</span>  <span class="token number">181.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>x.dot(y)等价于np.dot(x, y)：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">228</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.dot(x<span class="token punctuation">,</span> y)Out<span class="token punctuation">[</span><span class="token number">228</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">28.</span><span class="token punctuation">,</span>   <span class="token number">64.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">67.</span><span class="token punctuation">,</span>  <span class="token number">181.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一个二维数组跟一个大小合适的一维数组的矩阵点积运算之后将会得到一个一维数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">229</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.dot(x<span class="token punctuation">,</span> np.ones(3))Out<span class="token punctuation">[</span><span class="token number">229</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>  <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">15.</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>@</code>符（类似Python 3.5）也可以用作中缀运算符，进行矩阵乘法：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">230</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x @ np.ones(3)Out<span class="token punctuation">[</span><span class="token number">230</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>  <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">15.</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>numpy.linalg中有一组标准的矩阵分解运算以及诸如求逆和行列式之类的东西。它们跟MATLAB和R等语言所使用的是相同的行业标准线性代数库，如BLAS、LAPACK、Intel MKL（Math Kernel Library，可能有，取决于你的NumPy版本）等：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">231</span><span class="token punctuation">]</span><span class="token punctuation">:</span> from numpy.linalg import inv<span class="token punctuation">,</span> qrIn <span class="token punctuation">[</span><span class="token number">232</span><span class="token punctuation">]</span><span class="token punctuation">:</span> X = np.random.randn(5<span class="token punctuation">,</span> 5)In <span class="token punctuation">[</span><span class="token number">233</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mat = X.T.dot(X)In <span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">:</span> inv(mat)Out<span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">933.1189</span><span class="token punctuation">,</span>   <span class="token number">871.8258</span><span class="token punctuation">,</span> <span class="token number">-1417.6902</span><span class="token punctuation">,</span> <span class="token number">-1460.4005</span><span class="token punctuation">,</span>  <span class="token number">1782.1391</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">871.8258</span><span class="token punctuation">,</span>   <span class="token number">815.3929</span><span class="token punctuation">,</span> <span class="token number">-1325.9965</span><span class="token punctuation">,</span> <span class="token number">-1365.9242</span><span class="token punctuation">,</span>  <span class="token number">1666.9347</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-1417.6902</span><span class="token punctuation">,</span> <span class="token number">-1325.9965</span><span class="token punctuation">,</span>  <span class="token number">2158.4424</span><span class="token punctuation">,</span>  <span class="token number">2222.0191</span><span class="token punctuation">,</span> <span class="token number">-2711.6822</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-1460.4005</span><span class="token punctuation">,</span> <span class="token number">-1365.9242</span><span class="token punctuation">,</span>  <span class="token number">2222.0191</span><span class="token punctuation">,</span>  <span class="token number">2289.0575</span><span class="token punctuation">,</span> <span class="token number">-2793.422</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1782.1391</span><span class="token punctuation">,</span>  <span class="token number">1666.9347</span><span class="token punctuation">,</span> <span class="token number">-2711.6822</span><span class="token punctuation">,</span> <span class="token number">-2793.422</span> <span class="token punctuation">,</span>  <span class="token number">3409.5128</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">235</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mat.dot(inv(mat))Out<span class="token punctuation">[</span><span class="token number">235</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">-0.</span><span class="token punctuation">,</span> <span class="token number">-0.</span><span class="token punctuation">,</span> <span class="token number">-0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">-0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">236</span><span class="token punctuation">]</span><span class="token punctuation">:</span> q<span class="token punctuation">,</span> r = qr(mat)In <span class="token punctuation">[</span><span class="token number">237</span><span class="token punctuation">]</span><span class="token punctuation">:</span> rOut<span class="token punctuation">[</span><span class="token number">237</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1.6914</span><span class="token punctuation">,</span>  <span class="token number">4.38</span>  <span class="token punctuation">,</span>  <span class="token number">0.1757</span><span class="token punctuation">,</span>  <span class="token number">0.4075</span><span class="token punctuation">,</span> <span class="token number">-0.7838</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span>    <span class="token punctuation">,</span> <span class="token number">-2.6436</span><span class="token punctuation">,</span>  <span class="token number">0.1939</span><span class="token punctuation">,</span> <span class="token number">-3.072</span> <span class="token punctuation">,</span> <span class="token number">-1.0702</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span> <span class="token number">-0.8138</span><span class="token punctuation">,</span>  <span class="token number">1.5414</span><span class="token punctuation">,</span>  <span class="token number">0.6155</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span> <span class="token number">-2.6445</span><span class="token punctuation">,</span> <span class="token number">-2.1669</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.0002</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表达式X.T.dot(X)计算X和它的转置X.T的点积。</p><p>下表中列出了一些最常用的线性代数函数。</p><p><img src="https://tvax1.sinaimg.cn/large/007mx13gly1guquel4jgaj60xu0l478x02.jpg" alt="线性代数函数"></p><h3 id="4-6-伪随机数生成"><a href="#4-6-伪随机数生成" class="headerlink" title="4.6 伪随机数生成"></a>4.6 伪随机数生成</h3><p><code>numpy.random</code>模块对Python内置的random进行了补充，增加了一些用于高效生成多种概率分布的样本值的函数。例如，你可以用normal来得到一个标准正态分布的4×4样本数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">238</span><span class="token punctuation">]</span><span class="token punctuation">:</span> samples = np.random.normal(size=(4<span class="token punctuation">,</span> 4))In <span class="token punctuation">[</span><span class="token number">239</span><span class="token punctuation">]</span><span class="token punctuation">:</span> samplesOut<span class="token punctuation">[</span><span class="token number">239</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.5732</span><span class="token punctuation">,</span>  <span class="token number">0.1933</span><span class="token punctuation">,</span>  <span class="token number">0.4429</span><span class="token punctuation">,</span>  <span class="token number">1.2796</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.575</span> <span class="token punctuation">,</span>  <span class="token number">0.4339</span><span class="token punctuation">,</span> <span class="token number">-0.7658</span><span class="token punctuation">,</span> <span class="token number">-1.237</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.5367</span><span class="token punctuation">,</span>  <span class="token number">1.8545</span><span class="token punctuation">,</span> <span class="token number">-0.92</span>  <span class="token punctuation">,</span> <span class="token number">-0.1082</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.1525</span><span class="token punctuation">,</span>  <span class="token number">0.9435</span><span class="token punctuation">,</span> <span class="token number">-1.0953</span><span class="token punctuation">,</span> <span class="token number">-0.144</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而Python内置的random模块则只能一次生成一个样本值。从下面的测试结果中可以看出，如果需要产生大量样本值，<code>numpy.random</code>快了不止一个数量级：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">]</span><span class="token punctuation">:</span> from random import normalvariateIn <span class="token punctuation">[</span><span class="token number">241</span><span class="token punctuation">]</span><span class="token punctuation">:</span> N = 1000000In <span class="token punctuation">[</span><span class="token number">242</span><span class="token punctuation">]</span><span class="token punctuation">:</span> %timeit samples = <span class="token punctuation">[</span>normalvariate(0<span class="token punctuation">,</span> 1) for _ in range(N)<span class="token punctuation">]</span>1.77 s +<span class="token punctuation">-</span> 126 ms per loop (mean +<span class="token punctuation">-</span> std. dev. of 7 runs<span class="token punctuation">,</span> 1 loop each)In <span class="token punctuation">[</span><span class="token number">243</span><span class="token punctuation">]</span><span class="token punctuation">:</span> %timeit np.random.normal(size=N)61.7 ms +<span class="token punctuation">-</span> 1.32 ms per loop (mean +<span class="token punctuation">-</span> std. dev. of 7 runs<span class="token punctuation">,</span> 10 loops each)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们说这些都是伪随机数，是因为它们都是通过算法基于随机数生成器种子，在确定性的条件下生成的。你可以用NumPy的np.random.seed更改随机数生成种子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">244</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.random.seed(1234)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>numpy.random的数据生成函数使用了全局的随机种子。要避免全局状态，你可以使用numpy.random.RandomState，创建一个与其它隔离的随机数生成器：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">245</span><span class="token punctuation">]</span><span class="token punctuation">:</span> rng = np.random.RandomState(1234)In <span class="token punctuation">[</span><span class="token number">246</span><span class="token punctuation">]</span><span class="token punctuation">:</span> rng.randn(10)Out<span class="token punctuation">[</span><span class="token number">246</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0.4714</span><span class="token punctuation">,</span> <span class="token number">-1.191</span> <span class="token punctuation">,</span>  <span class="token number">1.4327</span><span class="token punctuation">,</span> <span class="token number">-0.3127</span><span class="token punctuation">,</span> <span class="token number">-0.7206</span><span class="token punctuation">,</span>  <span class="token number">0.8872</span><span class="token punctuation">,</span>  <span class="token number">0.8596</span><span class="token punctuation">,</span>       <span class="token number">-0.6365</span><span class="token punctuation">,</span>  <span class="token number">0.0157</span><span class="token punctuation">,</span> <span class="token number">-2.2427</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下表列出了<code>numpy.random</code>中的部分函数。在下一节中，我将给出一些利用这些函数一次性生成大量样本值的范例。</p><p><img src="https://tvax1.sinaimg.cn/large/007mx13gly1guqux37jlcj60yg0hen2h02.jpg" alt="伪随机数生成"></p><p><img src="https://tvax2.sinaimg.cn/large/007mx13gly1guqupxmswzj60yg07xdhs02.jpg" alt="伪随机数生成"></p><h3 id="4-7-示例：随机漫步"><a href="#4-7-示例：随机漫步" class="headerlink" title="4.7 示例：随机漫步"></a>4.7 示例：随机漫步</h3><p>我们通过模拟随机漫步来说明如何运用数组运算。先来看一个简单的随机漫步的例子：从0开始，步长1和－1出现的概率相等。</p><p>下面是一个通过内置的<code>random</code>模块以纯Python的方式实现1000步的随机漫步：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">247</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">import random   .....</span><span class="token punctuation">:</span> <span class="token key atrule">position = 0   .....</span><span class="token punctuation">:</span> walk = <span class="token punctuation">[</span>position<span class="token punctuation">]</span>   <span class="token punctuation">...</span>..<span class="token punctuation">:</span> <span class="token key atrule">steps = 1000   .....</span><span class="token punctuation">:</span> <span class="token key atrule">for i in range(steps)</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     step = 1 if random.randint(0<span class="token punctuation">,</span> <span class="token key atrule">1) else -1   .....</span><span class="token punctuation">:</span>     <span class="token key atrule">position += step   .....</span><span class="token punctuation">:</span>     walk.append(position)   <span class="token punctuation">...</span>..<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>图4-4是根据前100个随机漫步值生成的折线图：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">249</span><span class="token punctuation">]</span><span class="token punctuation">:</span> plt.plot(walk<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://tva2.sinaimg.cn/large/007mx13gly1guqv95lkbxj60ah06w74v02.jpg" alt="简单的随机漫步"></p><p>不难看出，这其实就是随机漫步中各步的累计和，可以用一个数组运算来实现。因此，我用<code>np.random</code>模块一次性随机产生1000个“掷硬币”结果（即两个数中任选一个），将其分别设置为1或－1，然后计算累计和：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">251</span><span class="token punctuation">]</span><span class="token punctuation">:</span> nsteps = 1000In <span class="token punctuation">[</span><span class="token number">252</span><span class="token punctuation">]</span><span class="token punctuation">:</span> draws = np.random.randint(0<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> size=nsteps)In <span class="token punctuation">[</span><span class="token number">253</span><span class="token punctuation">]</span><span class="token punctuation">:</span> steps = np.where(draws <span class="token punctuation">&gt;</span> 0<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">-</span>1)In <span class="token punctuation">[</span><span class="token number">254</span><span class="token punctuation">]</span><span class="token punctuation">:</span> walk = steps.cumsum()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有了这些数据之后，我们就可以沿着漫步路径做一些统计工作了，比如求取最大值和最小值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">:</span> walk.min()Out<span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>3In <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">:</span> walk.max()Out<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">31</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在来看一个复杂点的统计任务——首次穿越时间，即随机漫步过程中第一次到达某个特定值的时间。假设我们想要知道本次随机漫步需要多久才能距离初始0点至少10步远（任一方向均可）。np.abs(walk)&gt;=10可以得到一个布尔型数组，它表示的是距离是否达到或超过10，而我们想要知道的是第一个10或－10的索引。可以用argmax来解决这个问题，它返回的是该布尔型数组第一个最大值的索引（True就是最大值）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">257</span><span class="token punctuation">]</span><span class="token punctuation">:</span> (np.abs(walk) <span class="token punctuation">&gt;</span>= 10).argmax()Out<span class="token punctuation">[</span><span class="token number">257</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">37</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，这里使用argmax并不是很高效，因为它无论如何都会对数组进行完全扫描。在本例中，只要发现了一个True，那我们就知道它是个最大值了。</p><h4 id="一次模拟多个随机漫步"><a href="#一次模拟多个随机漫步" class="headerlink" title="一次模拟多个随机漫步"></a>一次模拟多个随机漫步</h4><p>如果你希望模拟多个随机漫步过程（比如5000个），只需对上面的代码做一点点修改即可生成所有的随机漫步过程。只要给<code>numpy.random</code>的函数传入一个二元元组就可以产生一个二维数组，然后我们就可以一次性计算5000个随机漫步过程（一行一个）的累计和了：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">258</span><span class="token punctuation">]</span><span class="token punctuation">:</span> nwalks = 5000In <span class="token punctuation">[</span><span class="token number">259</span><span class="token punctuation">]</span><span class="token punctuation">:</span> nsteps = 1000In <span class="token punctuation">[</span><span class="token number">260</span><span class="token punctuation">]</span><span class="token punctuation">:</span> draws = np.random.randint(0<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> size=(nwalks<span class="token punctuation">,</span> nsteps)) <span class="token comment"># 0 or 1In [261]: steps = np.where(draws &gt; 0, 1, -1)In [262]: walks = steps.cumsum(1)In [263]: walksOut[263]: array([[  1,   0,   1, ...,   8,   7,   8],       [  1,   0,  -1, ...,  34,  33,  32],       [  1,   0,  -1, ...,   4,   5,   4],       ...,        [  1,   2,   1, ...,  24,  25,  26],       [  1,   2,   3, ...,  14,  13,  14],       [ -1,  -2,  -3, ..., -24, -23, -22]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，我们来计算所有随机漫步过程的最大值和最小值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">264</span><span class="token punctuation">]</span><span class="token punctuation">:</span> walks.max()Out<span class="token punctuation">[</span><span class="token number">264</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 138In <span class="token punctuation">[</span><span class="token number">265</span><span class="token punctuation">]</span><span class="token punctuation">:</span> walks.min()Out<span class="token punctuation">[</span><span class="token number">265</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">-133</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到这些数据之后，我们来计算30或－30的最小穿越时间。这里稍微复杂些，因为不是5000个过程都到达了30。我们可以用any方法来对此进行检查：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">266</span><span class="token punctuation">]</span><span class="token punctuation">:</span> hits30 = (np.abs(walks) <span class="token punctuation">&gt;</span>= 30).any(1)In <span class="token punctuation">[</span><span class="token number">267</span><span class="token punctuation">]</span><span class="token punctuation">:</span> hits30Out<span class="token punctuation">[</span><span class="token number">267</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=bool)In <span class="token punctuation">[</span><span class="token number">268</span><span class="token punctuation">]</span><span class="token punctuation">:</span> hits30.sum() <span class="token comment"># Number that hit 30 or -30Out[268]: 3410</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们利用这个布尔型数组选出那些穿越了30（绝对值）的随机漫步（行），并调用argmax在轴1上获取穿越时间：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">269</span><span class="token punctuation">]</span><span class="token punctuation">:</span> crossing_times = (np.abs(walks<span class="token punctuation">[</span>hits30<span class="token punctuation">]</span>) <span class="token punctuation">&gt;</span>= 30).argmax(1)In <span class="token punctuation">[</span><span class="token number">270</span><span class="token punctuation">]</span><span class="token punctuation">:</span> crossing_times.mean()Out<span class="token punctuation">[</span><span class="token number">270</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">498.88973607038122</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请尝试用其他分布方式得到漫步数据。只需使用不同的随机数生成函数即可，如normal用于生成指定均值和标准差的正态分布数据：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">271</span><span class="token punctuation">]</span><span class="token punctuation">:</span> steps = np.random.normal(loc=0<span class="token punctuation">,</span> scale=0.25<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                          size=(nwalks<span class="token punctuation">,</span> nsteps))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="第-05-章-pandas-入门"><a href="#第-05-章-pandas-入门" class="headerlink" title="第 05 章 pandas 入门"></a><a href="https://www.bookstack.cn/read/pyda-2e-zh/5.md">第 05 章 pandas 入门</a></h2><p>pandas是本书后续内容的首选库。它含有使数据清洗和分析工作变得更快更简单的数据结构和操作工具。pandas经常和其它工具一同使用，如数值计算工具NumPy和SciPy，分析库statsmodels和scikit-learn，和数据可视化库matplotlib。pandas是基于NumPy数组构建的，特别是基于数组的函数和不使用for循环的数据处理。</p><p>虽然pandas采用了大量的NumPy编码风格，但二者最大的不同是pandas是专门为处理表格和混杂数据设计的。而NumPy更适合处理统一的数值数组数据。</p><p>自从2010年pandas开源以来，pandas逐渐成长为一个非常大的库，应用于许多真实案例。开发者社区已经有了800个独立的贡献者，他们在解决日常数据问题的同时为这个项目提供贡献。</p><p>在本书后续部分中，我将使用下面这样的pandas引入约定：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> import pandas as pd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此，只要你在代码中看到pd.，就得想到这是pandas。因为Series和DataFrame用的次数非常多，所以将其引入本地命名空间中会更方便：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> from pandas import Series<span class="token punctuation">,</span> DataFrame<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-1-pandas的数据结构介绍"><a href="#5-1-pandas的数据结构介绍" class="headerlink" title="5.1 pandas的数据结构介绍"></a>5.1 pandas的数据结构介绍</h3><p>要使用<code>pandas</code>，你首先就得熟悉它的两个主要数据结构：<code>Series</code>和<code>DataFrame</code>。虽然它们并不能解决所有问题，但它们为大多数应用提供了一种可靠的、易于使用的基础。</p><h5 id="Series"><a href="#Series" class="headerlink" title="Series"></a><code>Series</code></h5><p>Series是一种类似于一维数组的对象，它由一组数据（各种NumPy数据类型）以及一组与之相关的数据标签（即索引）组成。仅由一组数据即可产生最简单的Series：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">-5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 0    41    72   <span class="token punctuation">-</span><span class="token number">5</span>3    3<span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Series</code>的字符串表现形式为：<u>索引在左边，值在右边</u>。由于我们没有为数据指定索引，于是会自动创建一个0到N-1（N为数据的长度）的整数型索引。你可以通过<code>Series</code> 的<code>values</code>和<code>index</code>属性获取其数组表示形式和索引对象：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.valuesOut<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">-5</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.index  <span class="token comment"># like range(4)</span>Out<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> RangeIndex(start=0<span class="token punctuation">,</span> stop=4<span class="token punctuation">,</span> step=1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通常，我们希望所创建的Series带有一个可以对各个数据点进行标记的索引：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2 = pd.Series(<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">-5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2Out<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d    4b    7a   <span class="token punctuation">-</span><span class="token number">5</span>c    3<span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2.indexOut<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index(<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype='object')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与普通<code>NumPy</code>数组相比，你可以通过<u>索引的方式</u>选取Series中的单个或一组值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">-5</span>In <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span> = 6In <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c    3a   <span class="token punctuation">-</span><span class="token number">5</span>d    6<span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[‘c’, ‘a’, ‘d’]是索引列表，即使它包含的是字符串而不是整数。</p><p>使用<code>NumPy</code>函数或类似<code>NumPy</code>的运算（如根据布尔型数组进行过滤、标量乘法、应用数学函数等）都会<u>保留索引值的链接</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">[</span>obj2 <span class="token punctuation">&gt;</span> 0<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d    6b    7c    3<span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2 * 2Out<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span>d    12b    14a   <span class="token punctuation">-</span><span class="token number">10</span>c     6<span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.exp(obj2)Out<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d     403.428793b    1096.633158a       0.006738c      20.085537<span class="token key atrule">dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以将<code>Series</code>看成是一个定长的有序字典，因为它是索引值到数据值的一个映射。它可以用在许多原本需要字典参数的函数中：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 'b' in obj2Out<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>In <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 'e' in obj2Out<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果数据被存放在一个Python字典中，也可以直接通过这个字典来创建Series：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sdata = <span class="token punctuation">{</span><span class="token key atrule">'Ohio'</span><span class="token punctuation">:</span> <span class="token number">35000</span><span class="token punctuation">,</span> <span class="token key atrule">'Texas'</span><span class="token punctuation">:</span> <span class="token number">71000</span><span class="token punctuation">,</span> <span class="token key atrule">'Oregon'</span><span class="token punctuation">:</span> <span class="token number">16000</span><span class="token punctuation">,</span> <span class="token key atrule">'Utah'</span><span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3 = pd.Series(sdata)In <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3Out<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">Ohio      35000Oregon    16000Texas     71000Utah       5000dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果只传入一个字典，则结果Series中的索引就是原字典的键（有序排列）。你可以传入排好序的字典的键以改变顺序：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> states = <span class="token punctuation">[</span><span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Oregon'</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4 = pd.Series(sdata<span class="token punctuation">,</span> index=states)In <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4Out<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">California        NaNOhio          35000.0Oregon        16000.0Texas         71000.0dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个例子中，sdata中跟states索引相匹配的那3个值会被找出来并放到相应的位置上，但由于”California”所对应的sdata值找不到，所以其结果就为NaN（即“非数字”（not a number），在pandas中，它用于表示缺失或NA值）。因为‘Utah’不在states中，它被从结果中除去。</p><p>我将使用缺失（missing）或NA表示缺失数据。pandas的isnull和notnull函数可用于检测缺失数据：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd.isnull(obj4)Out<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">California     TrueOhio          FalseOregon        FalseTexas         Falsedtype</span><span class="token punctuation">:</span> boolIn <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd.notnull(obj4)Out<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">California    FalseOhio           TrueOregon         TrueTexas          Truedtype</span><span class="token punctuation">:</span> bool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Series也有类似的实例方法：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4.isnull()Out<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">California     TrueOhio          FalseOregon        FalseTexas         Falsedtype</span><span class="token punctuation">:</span> bool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我将在第7章详细讲解如何处理缺失数据。</p><p>对于许多应用而言，<code>Series</code>最重要的一个功能是，它会根据运算的索引标签自动对齐数据：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3Out<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">Ohio      35000Oregon    16000Texas     71000Utah       5000dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4Out<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">California        NaNOhio          35000.0Oregon        16000.0Texas         71000.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3 + obj4Out<span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">California         NaNOhio           70000.0Oregon         32000.0Texas         142000.0Utah               NaNdtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数据对齐功能将在后面详细讲解。如果你使用过数据库，你可以认为是类似join的操作。</p><p>Series对象本身及其索引都有一个<code>name</code>属性，该属性跟<code>pandas</code>其他的关键功能关系非常密切：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4.name = 'population'In <span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4.index.name = 'state'In <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4Out<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">stateCalifornia        NaNOhio          35000.0Oregon        16000.0Texas         71000.0Name</span><span class="token punctuation">:</span> population<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Series的索引可以通过赋值的方式就地修改：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    41    72   -53    3dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.index = <span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Steve'</span><span class="token punctuation">,</span> <span class="token string">'Jeff'</span><span class="token punctuation">,</span> <span class="token string">'Ryan'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">Bob      4Steve    7Jeff    -5Ryan     3dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h5><p>DataFrame是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）。DataFrame既有行索引也有列索引，它可以被看做由Series组成的字典（共用同一个索引）。DataFrame中的数据是以一个或多个二维块存放的（而不是列表、字典或别的一维数据结构）。有关DataFrame内部的技术细节远远超出了本书所讨论的范围。</p><ul><li>笔记：虽然DataFrame是以二维结构保存数据的，但你仍然可以轻松地将其表示为更高维度的数据（层次化索引的表格型结构，这是pandas中许多高级数据处理功能的关键要素，我们会在第8章讨论这个问题）。</li></ul><p>建DataFrame的办法有很多，最常用的一种是直接传入一个由等长列表或NumPy数组组成的字典：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">data = <span class="token punctuation">{</span><span class="token key atrule">'state'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token key atrule">'year'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">,</span> <span class="token number">2003</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token key atrule">'pop'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">1.7</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">,</span> <span class="token number">2.4</span><span class="token punctuation">,</span> <span class="token number">2.9</span><span class="token punctuation">,</span> <span class="token number">3.2</span><span class="token punctuation">]</span><span class="token punctuation">}</span>frame = pd.DataFrame(data)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果DataFrame会自动加上索引（跟<code>Series</code>一样），且全部列会被有序排列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    pop   state  year0  1.5    Ohio  20001  1.7    Ohio  20012  3.6    Ohio  20023  2.4  Nevada  20014  2.9  Nevada  20025  3.2  Nevada  2003<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你使用的是Jupyter notebook，pandas DataFrame对象会以对浏览器友好的HTML表格的方式呈现。</p><p>对于特别大的<code>DataFrame</code>，<code>head</code>方法会选取前五行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.head()Out<span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    pop   state  year0  1.5    Ohio  20001  1.7    Ohio  20012  3.6    Ohio  20023  2.4  Nevada  20014  2.9  Nevada  2002<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果指定了列序列，则<code>DataFrame</code>的列就会按照指定顺序进行排列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd.DataFrame(data<span class="token punctuation">,</span> columns=<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token string">'state'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    year   state  pop0  2000    Ohio  1.51  2001    Ohio  1.72  2002    Ohio  3.63  2001  Nevada  2.44  2002  Nevada  2.95  2003  Nevada  3.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果传入的列在数据中找不到，就会在结果中产生缺失值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2 = pd.DataFrame(data<span class="token punctuation">,</span> columns=<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token string">'state'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">,</span> <span class="token string">'debt'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">....</span><span class="token punctuation">:</span>                       index=<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">,</span>   <span class="token key atrule">....</span><span class="token punctuation">:</span>                              <span class="token string">'five'</span><span class="token punctuation">,</span> <span class="token string">'six'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2Out<span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        year   state  pop debtone    2000    Ohio  1.5  NaNtwo    2001    Ohio  1.7  NaNthree  2002    Ohio  3.6  NaNfour   2001  Nevada  2.4  NaNfive   2002  Nevada  2.9  NaNsix    2003  Nevada  3.2  NaNIn <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2.columnsOut<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index(<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token string">'state'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">,</span> <span class="token string">'debt'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype='object')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过类似字典标记的方式或属性的方式，可以将<code>DataFrame</code>的列获取为一个<code>Series</code>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">one        Ohiotwo        Ohiothree      Ohiofour     Nevadafive     Nevadasix      NevadaName</span><span class="token punctuation">:</span> state<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> objectIn <span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2.yearOut<span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">one      2000two      2001three    2002four     2001five     2002six      2003Name</span><span class="token punctuation">:</span> year<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>笔记：IPython提供了类似属性的访问（即frame2.year）和tab补全。<br>frame2[column]适用于任何列的名，但是frame2.column只有在列名是一个合理的Python变量名时才适用。</p></blockquote><p>注意，返回的<code>Series</code>拥有原<code>DataFrame</code>相同的索引，且其<code>name</code>属性也已经被相应地设置好了。</p><p>行也可以通过位置或名称的方式进行获取，比如用<code>loc</code>属性（稍后将对此进行详细讲解）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2.loc<span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">year     2002state    Ohiopop       3.6debt      NaNName</span><span class="token punctuation">:</span> three<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> object<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列可以通过赋值的方式进行修改。例如，我们可以给那个空的”debt”列赋上一个标量值或一组值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">[</span><span class="token string">'debt'</span><span class="token punctuation">]</span> = 16.5In <span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2Out<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        year   state  pop  debtone    2000    Ohio  1.5  16.5two    2001    Ohio  1.7  16.5three  2002    Ohio  3.6  16.5four   2001  Nevada  2.4  16.5five   2002  Nevada  2.9  16.5six    2003  Nevada  3.2  16.5In <span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">[</span><span class="token string">'debt'</span><span class="token punctuation">]</span> = np.arange(6.)In <span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2Out<span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        year   state  pop  debtone    2000    Ohio  1.5   0.0two    2001    Ohio  1.7   1.0three  2002    Ohio  3.6   2.0four   2001  Nevada  2.4   3.0five   2002  Nevada  2.9   4.0six    2003  Nevada  3.2   5.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将列表或数组赋值给某个列时，其长度必须跟DataFrame的长度相匹配。如果赋值的是一个Series，就会精确匹配DataFrame的索引，所有的空位都将被填上缺失值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span> val = pd.Series(<span class="token punctuation">[</span><span class="token number">-1.2</span><span class="token punctuation">,</span> <span class="token number">-1.5</span><span class="token punctuation">,</span> <span class="token number">-1.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">,</span> <span class="token string">'five'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">[</span><span class="token string">'debt'</span><span class="token punctuation">]</span> = valIn <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2Out<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        year   state  pop  debtone    2000    Ohio  1.5   NaNtwo    2001    Ohio  1.7  <span class="token punctuation">-</span>1.2three  2002    Ohio  3.6   NaNfour   2001  Nevada  2.4  <span class="token punctuation">-</span>1.5five   2002  Nevada  2.9  <span class="token punctuation">-</span>1.7six    2003  Nevada  3.2   NaN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为不存在的列赋值会创建出一个新列。<u>关键字del用于删除列</u>。</p><p>作为del的例子，我先添加一个新的布尔值的列，state是否为’Ohio’：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">[</span><span class="token string">'eastern'</span><span class="token punctuation">]</span> = frame2.state == 'Ohio'In <span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2Out<span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        year   state  pop  debt  easternone    2000    Ohio  1.5   NaN     Truetwo    2001    Ohio  1.7  <span class="token punctuation">-</span>1.2     Truethree  2002    Ohio  3.6   NaN     Truefour   2001  Nevada  2.4  <span class="token punctuation">-</span>1.5    Falsefive   2002  Nevada  2.9  <span class="token punctuation">-</span>1.7    Falsesix    2003  Nevada  3.2   NaN    False<span class="token comment">#注意：不能用frame2.eastern创建新的列。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>del方法可以用来删除这列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">]</span><span class="token punctuation">:</span> del frame2<span class="token punctuation">[</span><span class="token string">'eastern'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2.columnsOut<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index(<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token string">'state'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">,</span> <span class="token string">'debt'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype='object')<span class="token comment">#注意：通过索引方式返回的列只是相应数据的视图而已，并不是副本。因此，对返回的Series所做的任何就地修改全都会反映到源DataFrame上。通过Series的copy方法即可指定复制列。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一种常见的数据形式是嵌套字典：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pop = <span class="token punctuation">{</span><span class="token key atrule">'Nevada'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">2001</span><span class="token punctuation">:</span> <span class="token number">2.4</span><span class="token punctuation">,</span> <span class="token key atrule">2002</span><span class="token punctuation">:</span> <span class="token number">2.9</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token key atrule">....</span><span class="token punctuation">:</span>        <span class="token key atrule">'Ohio'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">2000</span><span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token key atrule">2001</span><span class="token punctuation">:</span> <span class="token number">1.7</span><span class="token punctuation">,</span> <span class="token key atrule">2002</span><span class="token punctuation">:</span> <span class="token number">3.6</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果嵌套字典传给<code>DataFrame</code>，<code>pandas</code>就会被解释为：外层字典的键作为列，内层键则作为行索引：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3 = pd.DataFrame(pop)In <span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3Out<span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       Nevada  Ohio2000     NaN   1.52001     2.4   1.72002     2.9   3.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你也可以使用类似<code>NumPy</code>数组的方法，对<code>DataFrame</code>进行转置（交换行和列）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3.TOut<span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span>         2000  2001  2002Nevada   NaN   2.4   2.9Ohio     1.5   1.7   3.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内层字典的键会被合并、排序以形成最终的索引。如果明确指定了索引，则不会这样：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd.DataFrame(pop<span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">,</span> <span class="token number">2003</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       Nevada  Ohio2001     2.4   1.72002     2.9   3.62003     NaN   NaN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由Series组成的字典差不多也是一样的用法：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pdata = <span class="token punctuation">{</span><span class="token key atrule">'Ohio'</span><span class="token punctuation">:</span> frame3<span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token key atrule">....</span><span class="token punctuation">:</span>          <span class="token key atrule">'Nevada'</span><span class="token punctuation">:</span> frame3<span class="token punctuation">[</span><span class="token string">'Nevada'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd.DataFrame(pdata)Out<span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       Nevada  Ohio2000     NaN   1.52001     2.4   1.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下表列出了<code>DataFrame</code>构造函数所能接受的各种数据。</p><p><img src="https://tvax1.sinaimg.cn/large/007mx13gly1gus2tfct4kj60tv0la7b702.jpg" alt="pandas的数据结构介绍"> </p><p>如果设置了DataFrame的index和columns的name属性，则这些信息也会被显示出来：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3.index.name = 'year'; frame3.columns.name = 'state'In <span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3Out<span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span> state  Nevada  Ohioyear2000      NaN   1.52001      2.4   1.72002      2.9   3.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>跟<code>Series</code>一样，<code>values</code>属性也会以二维<code>ndarray</code>的形式返回<code>DataFrame</code>中的数据：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3.valuesOut<span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> nan<span class="token punctuation">,</span>  <span class="token number">1.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2.4</span><span class="token punctuation">,</span>  <span class="token number">1.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2.9</span><span class="token punctuation">,</span>  <span class="token number">3.6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果DataFrame各列的数据类型不同，则值数组的dtype就会选用能兼容所有列的数据类型：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2.valuesOut<span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span>array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">,</span> nan<span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2001</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token number">1.7</span><span class="token punctuation">,</span> <span class="token number">-1.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2002</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">,</span> nan<span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2001</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token number">2.4</span><span class="token punctuation">,</span> <span class="token number">-1.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2002</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token number">2.9</span><span class="token punctuation">,</span> <span class="token number">-1.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2003</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token number">3.2</span><span class="token punctuation">,</span> nan<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=object)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="索引对象"><a href="#索引对象" class="headerlink" title="索引对象"></a>索引对象</h5><p>pandas的索引对象负责管理轴标签和其他元数据（比如轴名称等）。构建Series或DataFrame时，所用到的任何数组或其他序列的标签都会被转换成一个Index：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(range(3)<span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> index = obj.indexIn <span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">:</span> indexOut<span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index(<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype='object')In <span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> index<span class="token punctuation">[</span>1<span class="token punctuation">:</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index(<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype='object')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><u>Index对象是不可变的</u>，因此用户不能对其进行修改：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">index<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> = 'd'  <span class="token comment"># TypeError</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不可变可以使Index对象在多个数据结构之间安全共享：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">:</span> labels = pd.Index(np.arange(3))In <span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">:</span> labelsOut<span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Int64Index(<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype='int64')In <span class="token punctuation">[</span><span class="token number">82</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2 = pd.Series(<span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">-2.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index=labels)In <span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2Out<span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    1.51   -2.52    0.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2.index is labelsOut<span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span><span class="token comment">#注意：虽然用户不需要经常使用Index的功能，但是因为一些操作会生成包含被索引化的数据，理解它们的工作原理是很重要的。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>除了类似于数组，Index的功能也类似一个固定大小的集合：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">85</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3Out<span class="token punctuation">[</span><span class="token number">85</span><span class="token punctuation">]</span><span class="token punctuation">:</span> state  Nevada  Ohioyear               2000      NaN   1.52001      2.4   1.72002      2.9   3.6In <span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3.columnsOut<span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index(<span class="token punctuation">[</span><span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype='object'<span class="token punctuation">,</span> name='state')In <span class="token punctuation">[</span><span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 'Ohio' in frame3.columnsOut<span class="token punctuation">[</span><span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">:</span> TrueIn <span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 2003 in frame3.indexOut<span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与python的集合不同，pandas的<u>Index可以包含重复的标签</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dup_labels = pd.Index(<span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dup_labelsOut<span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index(<span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype='object')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择重复的标签，会显示所有的结果。</p><p>每个索引都有一些方法和属性，它们可用于设置逻辑并回答有关该索引所包含的数据的常见问题。下表列出了这些函数。</p><p><img src="https://tva2.sinaimg.cn/large/007mx13gly1gus3dtezl8j60yg0kbtb202.jpg" alt="pandas的数据结构介绍"></p><h3 id="5-2-基本功能"><a href="#5-2-基本功能" class="headerlink" title="5.2 基本功能"></a>5.2 基本功能</h3><p>本节中，我将介绍操作Series和DataFrame中的数据的基本手段。后续章节将更加深入地挖掘pandas在数据分析和处理方面的功能。本书不是pandas库的详尽文档，主要关注的是最重要的功能，那些不大常用的内容（也就是那些更深奥的内容）就交给你自己去摸索吧。</p><h4 id="重新索引"><a href="#重新索引" class="headerlink" title="重新索引"></a>重新索引</h4><p>pandas对象的一个重要方法是reindex，其作用是创建一个新对象，它的数据符合新的索引。看下面的例子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">91</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(<span class="token punctuation">[</span><span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">7.2</span><span class="token punctuation">,</span> <span class="token number">-5.3</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">d    4.5b    7.2a   -5.3c    3.6dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用该Series的<code>reindex</code>将会根据新索引进行重排。如果某个索引值当前不存在，就引入缺失值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2 = obj.reindex(<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2Out<span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a   -5.3b    7.2c    3.6d    4.5e    NaNdtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于时间序列这样的有序数据，重新索引时可能需要做一些插值处理。<code>method</code>选项即可达到此目的，例如，使用ffill可以实现前向值填充：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3 = pd.Series(<span class="token punctuation">[</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'purple'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3Out<span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0      blue2    purple4    yellowdtype</span><span class="token punctuation">:</span> objectIn <span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3.reindex(range(6)<span class="token punctuation">,</span> method='ffill')Out<span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0      blue1      blue2    purple3    purple4    yellow5    yellowdtype</span><span class="token punctuation">:</span> object<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>借助DataFrame，reindex可以修改（行）索引和列。只传递一个序列时，会重新索引结果的行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame = pd.DataFrame(np.arange(9).reshape((3<span class="token punctuation">,</span> 3))<span class="token punctuation">,</span>   <span class="token key atrule">....</span><span class="token punctuation">:</span>                      index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">....</span><span class="token punctuation">:</span>                      columns=<span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    Ohio  Texas  Californiaa     0      1           2c     3      4           5d     6      7           8In <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2 = frame.reindex(<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2Out<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    Ohio  Texas  Californiaa   0.0    1.0         2.0b   NaN    NaN         NaNc   3.0    4.0         5.0d   6.0    7.0         8.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列可以用columns关键字重新索引：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">:</span> states = <span class="token punctuation">[</span><span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.reindex(columns=states)Out<span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    Texas  Utah  Californiaa      1   NaN           2c      4   NaN           5d      7   NaN           8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://tvax3.sinaimg.cn/large/007mx13gly1guu2jexpxyj60yg0ftdi502.jpg" alt="reindex函数的各参数及说明"></p><h4 id="丢弃指定轴上的项"><a href="#丢弃指定轴上的项" class="headerlink" title="丢弃指定轴上的项"></a>丢弃指定轴上的项</h4><p>丢弃某条轴上的一个或多个项很简单，只要有一个索引数组或列表即可。由于需要执行一些数据整理和集合逻辑，所以drop方法返回的是一个在指定轴上删除了指定值的新对象：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(np.arange(5.)<span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    0.0b    1.0c    2.0d    3.0e    4.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">107</span><span class="token punctuation">]</span><span class="token punctuation">:</span> new_obj = obj.drop('c')In <span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">:</span> new_objOut<span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    0.0b    1.0d    3.0e    4.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.drop(<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    0.0b    1.0e    4.0dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于<code>DataFrame</code>，可以删除任意轴上的索引值。为了演示，先新建一个DataFrame例子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data = pd.DataFrame(np.arange(16).reshape((4<span class="token punctuation">,</span> 4))<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                     index=<span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Colorado'</span><span class="token punctuation">,</span> <span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'New York'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                     columns=<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourOhio        0    1      2     3Colorado    4    5      6     7Utah        8    9     10    11New York   12   13     14    15<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用标签序列调用drop会从行标签（axis 0）删除值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">112</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.drop(<span class="token punctuation">[</span><span class="token string">'Colorado'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">112</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourUtah        8    9     10    11New York   12   13     14    15<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过传递<code>axis=1</code>或<code>axis=’columns’</code>可以删除列的值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">113</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.drop('two'<span class="token punctuation">,</span> axis=1)Out<span class="token punctuation">[</span><span class="token number">113</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  three  fourOhio        0      2     3Colorado    4      6     7Utah        8     10    11New York   12     14    15In <span class="token punctuation">[</span><span class="token number">114</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.drop(<span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis='columns')Out<span class="token punctuation">[</span><span class="token number">114</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  threeOhio        0      2Colorado    4      6Utah        8     10New York   12     14<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>许多函数，如drop，会修改Series或DataFrame的大小或形状，可以就地修改对象，不会返回新的对象：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.drop('c'<span class="token punctuation">,</span> inplace=True)In <span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    0.0b    1.0d    3.0e    4.0dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>小心使用inplace，它会销毁所有被删除的数据。</p><h4 id="索引、选取和过滤"><a href="#索引、选取和过滤" class="headerlink" title="索引、选取和过滤"></a>索引、选取和过滤</h4><p>Series索引（obj[…]）的工作方式类似于<code>NumPy</code>数组的索引，只不过<code>Series</code>的索引值不只是整数。下面是几个例子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(np.arange(4.)<span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    0.0b    1.0c    2.0d    3.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">119</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">119</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 1.0In <span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 1.0In <span class="token punctuation">[</span><span class="token number">121</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span>2<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">121</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">c    2.0d    3.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token key atrule">b    1.0a    0.0d    3.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">b    1.0d    3.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span>obj &lt; 2<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    0.0b    1.0dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用标签的切片运算与普通的Python切片运算不同，其末端是包含的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span>'b'<span class="token punctuation">:</span><span class="token string">'c'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token key atrule">b    1.0c    2.0dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用切片可以对<code>Series</code>的相应部分进行设置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">126</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span>'b'<span class="token punctuation">:</span><span class="token string">'c'</span><span class="token punctuation">]</span> = 5In <span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    0.0b    5.0c    5.0d    3.0dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用一个值或序列对DataFrame进行索引其实就是获取一个或多个列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data = pd.DataFrame(np.arange(16).reshape((4<span class="token punctuation">,</span> 4))<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                     index=<span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Colorado'</span><span class="token punctuation">,</span> <span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'New York'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                     columns=<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">129</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">129</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourOhio        0    1      2     3Colorado    4    5      6     7Utah        8    9     10    11New York   12   13     14    15In <span class="token punctuation">[</span><span class="token number">130</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">130</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">Ohio         1Colorado     5Utah         9New York    13Name</span><span class="token punctuation">:</span> two<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">131</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">131</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           three  oneOhio          2    0Colorado      6    4Utah         10    8New York     14   12<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种索引方式有几个特殊的情况。首先通过切片或布尔型数组选取数据：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">132</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">132</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourOhio        0    1      2     3Colorado    4    5      6     7In <span class="token punctuation">[</span><span class="token number">133</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">]</span> <span class="token punctuation">&gt;</span> 5<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">133</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourColorado    4    5      6     7Utah        8    9     10    11New York   12   13     14    15<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选取行的语法data[:2]十分方便。向[ ]传递单一的元素或列表，就可选择列。</p><p>另一种用法是通过布尔型DataFrame（比如下面这个由标量比较运算得出的）进行索引：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">134</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data &lt; 5Out<span class="token punctuation">[</span><span class="token number">134</span><span class="token punctuation">]</span><span class="token punctuation">:</span>             one    two  three   fourOhio       True   True   True   TrueColorado   True  False  False  FalseUtah      False  False  False  FalseNew York  False  False  False  FalseIn <span class="token punctuation">[</span><span class="token number">135</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>data &lt; 5<span class="token punctuation">]</span> = 0In <span class="token punctuation">[</span><span class="token number">136</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">136</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourOhio        0    0      0     0Colorado    0    5      6     7Utah        8    9     10    11New York   12   13     14    15<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这使得DataFrame的语法与NumPy二维数组的语法很像。</p><h4 id="用loc和iloc进行选取"><a href="#用loc和iloc进行选取" class="headerlink" title="用loc和iloc进行选取"></a>用loc和iloc进行选取</h4><p>对于DataFrame的行的标签索引，我引入了特殊的标签运算符loc和iloc。它们可以让你用类似NumPy的标记，使用轴标签（loc）或整数索引（iloc），从DataFrame选择行和列的子集。</p><p>作为一个初步示例，让我们通过标签选择一行和多列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.loc<span class="token punctuation">[</span><span class="token string">'Colorado'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">two      5three    6Name</span><span class="token punctuation">:</span> Colorado<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后用iloc和整数进行选取：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">138</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">138</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">four    11one      8two      9Name</span><span class="token punctuation">:</span> Utah<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">139</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">139</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">one       8two       9three    10four     11Name</span><span class="token punctuation">:</span> Utah<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           four  one  twoColorado     7    0    5Utah        11    8    9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这两个索引函数也适用于一个标签或多个标签的切片：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">141</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">141</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">Ohio        0Colorado    5Utah        9Name</span><span class="token punctuation">:</span> two<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">142</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>data.three <span class="token punctuation">&gt;</span> 5<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">142</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  threeColorado    0    5      6Utah        8    9     10New York   12   13     14<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以，在pandas中，有多个方法可以选取和重新组合数据。对于DataFrame，表5-4进行了总结。后面会看到，还有更多的方法进行层级化索引。</p><blockquote><p>笔记：在一开始设计pandas时，我觉得用frame[:, col]选取列过于繁琐（也容易出错），因为列的选择是非常常见的操作。我做了些取舍，将花式索引的功能（标签和整数）放到了ix运算符中。在实践中，这会导致许多边缘情况，数据的轴标签是整数，所以pandas团队决定创造loc和iloc运算符分别处理严格基于标签和整数的索引。<br>ix运算符仍然可用，但并不推荐。</p></blockquote><p><img src="https://tva2.sinaimg.cn/large/007mx13gly1guu3ygk9nhj60pt0fqk0g02.jpg" alt="DataFrame的索引选项"></p><h4 id="整数索引"><a href="#整数索引" class="headerlink" title="整数索引"></a>整数索引</h4><p>处理整数索引的pandas对象常常难住新手，因为它与Python内置的列表和元组的索引语法不同。例如，你可能不认为下面的代码会出错：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">ser = pd.Series(np.arange(3.))serser<span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里，pandas可以勉强进行整数索引，但是会导致小bug。我们有包含0,1,2的索引，但是引入用户想要的东西（基于标签或位置的索引）很难：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">144</span><span class="token punctuation">]</span><span class="token punctuation">:</span> serOut<span class="token punctuation">[</span><span class="token number">144</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    0.01    1.02    2.0dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外，对于非整数索引，不会产生歧义：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">145</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ser2 = pd.Series(np.arange(3.)<span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">146</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ser2<span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">146</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了进行统一，如果轴索引含有整数，数据选取总会使用标签。为了更准确，请使用loc（标签）或iloc（整数）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">147</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ser<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">147</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    0.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">148</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ser.loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">148</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    0.01    1.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">149</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ser.iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">149</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    0.0dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="算术运算和数据对齐"><a href="#算术运算和数据对齐" class="headerlink" title="算术运算和数据对齐"></a>算术运算和数据对齐</h4><p><code>pandas</code>最重要的一个功能是，它可以对不同索引的对象进行算术运算。在将对象相加时，如果存在不同的索引对，则结果的索引就是该索引对的并集。对于有数据库经验的用户，这就像在索引标签上进行自动外连接。看一个简单的例子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s1 = pd.Series(<span class="token punctuation">[</span><span class="token number">7.3</span><span class="token punctuation">,</span> <span class="token number">-2.5</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">151</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s2 = pd.Series(<span class="token punctuation">[</span><span class="token number">-2.1</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">,</span> <span class="token number">-1.5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">152</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s1Out<span class="token punctuation">[</span><span class="token number">152</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    7.3c   -2.5d    3.4e    1.5dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">153</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s2Out<span class="token punctuation">[</span><span class="token number">153</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a   -2.1c    3.6e   -1.5f    4.0g    3.1dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将它们相加就会产生：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">154</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s1 + s2Out<span class="token punctuation">[</span><span class="token number">154</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    5.2c    1.1d    NaNe    0.0f    NaNg    NaNdtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>自动的数据对齐操作在不重叠的索引处引入了NA值。<u>缺失值会在算术运算过程中传播</u>。</p><p>对于DataFrame，对齐操作会同时发生在行和列上：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">155</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1 = pd.DataFrame(np.arange(9.).reshape((3<span class="token punctuation">,</span> 3))<span class="token punctuation">,</span> columns=list('bcd')<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                    index=<span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token string">'Colorado'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">156</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2 = pd.DataFrame(np.arange(12.).reshape((4<span class="token punctuation">,</span> 3))<span class="token punctuation">,</span> columns=list('bde')<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                    index=<span class="token punctuation">[</span><span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token string">'Oregon'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">157</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1Out<span class="token punctuation">[</span><span class="token number">157</span><span class="token punctuation">]</span><span class="token punctuation">:</span>             b    c    dOhio      0.0  1.0  2.0Texas     3.0  4.0  5.0Colorado  6.0  7.0  8.0In <span class="token punctuation">[</span><span class="token number">158</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2Out<span class="token punctuation">[</span><span class="token number">158</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           b     d     eUtah    0.0   1.0   2.0Ohio    3.0   4.0   5.0Texas   6.0   7.0   8.0Oregon  9.0  10.0  11.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把它们相加后将会返回一个新的DataFrame，其索引和列为原来那两个DataFrame的并集：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">159</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1 + df2Out<span class="token punctuation">[</span><span class="token number">159</span><span class="token punctuation">]</span><span class="token punctuation">:</span>             b   c     d   eColorado  NaN NaN   NaN NaNOhio      3.0 NaN   6.0 NaNOregon    NaN NaN   NaN NaNTexas     9.0 NaN  12.0 NaNUtah      NaN NaN   NaN NaN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为’c’和’e’列均不在两个DataFrame对象中，在结果中以缺省值呈现。行也是同样。</p><p>如果DataFrame对象相加，没有共用的列或行标签，结果都会是空：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">160</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1 = pd.DataFrame(<span class="token punctuation">{</span><span class="token key atrule">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span>)In <span class="token punctuation">[</span><span class="token number">161</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2 = pd.DataFrame(<span class="token punctuation">{</span><span class="token key atrule">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span>)In <span class="token punctuation">[</span><span class="token number">162</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1Out<span class="token punctuation">[</span><span class="token number">162</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    A0  11  2In <span class="token punctuation">[</span><span class="token number">163</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2Out<span class="token punctuation">[</span><span class="token number">163</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    B0  31  4In <span class="token punctuation">[</span><span class="token number">164</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1 <span class="token punctuation">-</span> df2Out<span class="token punctuation">[</span><span class="token number">164</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     A   B0 NaN NaN1 NaN NaN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="在算术方法中填充值"><a href="#在算术方法中填充值" class="headerlink" title="在算术方法中填充值"></a>在算术方法中填充值</h4><p>在对不同索引的对象进行算术运算时，你可能希望当一个对象中某个轴标签在另一个对象中找不到时填充一个特殊值（比如0）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">165</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1 = pd.DataFrame(np.arange(12.).reshape((3<span class="token punctuation">,</span> 4))<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                    columns=list('abcd'))In <span class="token punctuation">[</span><span class="token number">166</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2 = pd.DataFrame(np.arange(20.).reshape((4<span class="token punctuation">,</span> 5))<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                    columns=list('abcde'))In <span class="token punctuation">[</span><span class="token number">167</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2.loc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span> = np.nanIn <span class="token punctuation">[</span><span class="token number">168</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1Out<span class="token punctuation">[</span><span class="token number">168</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      a    b     c     d0  0.0  1.0   2.0   3.01  4.0  5.0   6.0   7.02  8.0  9.0  10.0  11.0In <span class="token punctuation">[</span><span class="token number">169</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2Out<span class="token punctuation">[</span><span class="token number">169</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       a     b     c     d     e0   0.0   1.0   2.0   3.0   4.01   5.0   NaN   7.0   8.0   9.02  10.0  11.0  12.0  13.0  14.03  15.0  16.0  17.0  18.0  19.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将它们相加时，没有重叠的位置就会产生NA值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1 + df2Out<span class="token punctuation">[</span><span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       a     b     c     d   e0   0.0   2.0   4.0   6.0 NaN1   9.0   NaN  13.0  15.0 NaN2  18.0  20.0  22.0  24.0 NaN3   NaN   NaN   NaN   NaN NaN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用df1的add方法，传入df2以及一个fill_value参数：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">171</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1.add(df2<span class="token punctuation">,</span> fill_value=0)Out<span class="token punctuation">[</span><span class="token number">171</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       a     b     c     d     e0   0.0   2.0   4.0   6.0   4.01   9.0   5.0  13.0  15.0   9.02  18.0  20.0  22.0  24.0  14.03  15.0  16.0  17.0  18.0  19.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下表列出了Series和DataFrame的算术方法。它们每个都有一个副本，以字母r开头，它会翻转参数。因此这两个语句是等价的：</p><p><img src="https://tvax2.sinaimg.cn/large/007mx13gly1guu4b99k53j60as072gmh02.jpg" alt="灵活的算术方法"></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">172</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 1 / df1Out<span class="token punctuation">[</span><span class="token number">172</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           a         b         c         d0       inf  1.000000  0.500000  0.3333331  0.250000  0.200000  0.166667  0.1428572  0.125000  0.111111  0.100000  0.090909In <span class="token punctuation">[</span><span class="token number">173</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1.rdiv(1)Out<span class="token punctuation">[</span><span class="token number">173</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           a         b         c         d0       inf  1.000000  0.500000  0.3333331  0.250000  0.200000  0.166667  0.1428572  0.125000  0.111111  0.100000  0.090909<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与此类似，在对Series或DataFrame重新索引时，也可以指定一个填充值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">174</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1.reindex(columns=df2.columns<span class="token punctuation">,</span> fill_value=0)Out<span class="token punctuation">[</span><span class="token number">174</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      a    b     c     d  e0  0.0  1.0   2.0   3.0  01  4.0  5.0   6.0   7.0  02  8.0  9.0  10.0  11.0  0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="DataFrame和Series之间的运算"><a href="#DataFrame和Series之间的运算" class="headerlink" title="DataFrame和Series之间的运算"></a>DataFrame和Series之间的运算</h4><p>跟不同维度的NumPy数组一样，<code>DataFrame</code>和<code>Series</code>之间算术运算也是有明确规定的。先来看一个具有启发性的例子，计算一个二维数组与其某行之间的差：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">175</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.arange(12.).reshape((3<span class="token punctuation">,</span> 4))In <span class="token punctuation">[</span><span class="token number">176</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">176</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">0.</span><span class="token punctuation">,</span>   <span class="token number">1.</span><span class="token punctuation">,</span>   <span class="token number">2.</span><span class="token punctuation">,</span>   <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">4.</span><span class="token punctuation">,</span>   <span class="token number">5.</span><span class="token punctuation">,</span>   <span class="token number">6.</span><span class="token punctuation">,</span>   <span class="token number">7.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">8.</span><span class="token punctuation">,</span>   <span class="token number">9.</span><span class="token punctuation">,</span>  <span class="token number">10.</span><span class="token punctuation">,</span>  <span class="token number">11.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">177</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">177</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">2.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr <span class="token punctuation">-</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">8.</span><span class="token punctuation">,</span>  <span class="token number">8.</span><span class="token punctuation">,</span>  <span class="token number">8.</span><span class="token punctuation">,</span>  <span class="token number">8.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当我们从arr减去arr[0]，每一行都会执行这个操作。这就叫做广播（broadcasting），附录A将对此进行详细讲解。DataFrame和Series之间的运算差不多也是如此：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">179</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame = pd.DataFrame(np.arange(12.).reshape((4<span class="token punctuation">,</span> 3))<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                      columns=list('bde')<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                      index=<span class="token punctuation">[</span><span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token string">'Oregon'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">:</span> series = frame.iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">181</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">181</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           b     d     eUtah    0.0   1.0   2.0Ohio    3.0   4.0   5.0Texas   6.0   7.0   8.0Oregon  9.0  10.0  11.0In <span class="token punctuation">[</span><span class="token number">182</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seriesOut<span class="token punctuation">[</span><span class="token number">182</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">b    0.0d    1.0e    2.0Name</span><span class="token punctuation">:</span> Utah<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认情况下，DataFrame和Series之间的算术运算会将Series的索引匹配到DataFrame的列，然后沿着行一直向下广播：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">183</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame <span class="token punctuation">-</span> seriesOut<span class="token punctuation">[</span><span class="token number">183</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           b    d    eUtah    0.0  0.0  0.0Ohio    3.0  3.0  3.0Texas   6.0  6.0  6.0Oregon  9.0  9.0  9.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果某个索引值在<code>DataFrame</code>的列或<code>Series</code>的索引中找不到，则参与运算的两个对象就会被重新索引以形成并集：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">184</span><span class="token punctuation">]</span><span class="token punctuation">:</span> series2 = pd.Series(range(3)<span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">185</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame + series2Out<span class="token punctuation">[</span><span class="token number">185</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           b   d     e   fUtah    0.0 NaN   3.0 NaNOhio    3.0 NaN   6.0 NaNTexas   6.0 NaN   9.0 NaNOregon  9.0 NaN  12.0 NaN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你希望匹配行且在列上广播，则必须使用算术运算方法。例如：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">186</span><span class="token punctuation">]</span><span class="token punctuation">:</span> series3 = frame<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">187</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">187</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           b     d     eUtah    0.0   1.0   2.0Ohio    3.0   4.0   5.0Texas   6.0   7.0   8.0Oregon  9.0  10.0  11.0In <span class="token punctuation">[</span><span class="token number">188</span><span class="token punctuation">]</span><span class="token punctuation">:</span> series3Out<span class="token punctuation">[</span><span class="token number">188</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">Utah       1.0Ohio       4.0Texas      7.0Oregon    10.0Name</span><span class="token punctuation">:</span> d<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">189</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.sub(series3<span class="token punctuation">,</span> axis='index')Out<span class="token punctuation">[</span><span class="token number">189</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           b    d    eUtah   <span class="token punctuation">-</span>1.0  0.0  1.0Ohio   <span class="token punctuation">-</span>1.0  0.0  1.0Texas  <span class="token punctuation">-</span>1.0  0.0  1.0Oregon <span class="token punctuation">-</span>1.0  0.0  1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传入的轴号就是希望匹配的轴。在本例中，我们的目的是匹配DataFrame的行索引（axis=’index’ or axis=0）并进行广播。</p><h4 id="函数应用和映射"><a href="#函数应用和映射" class="headerlink" title="函数应用和映射"></a>函数应用和映射</h4><p>NumPy的ufuncs（元素级数组方法）也可用于操作pandas对象：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">190</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame = pd.DataFrame(np.random.randn(4<span class="token punctuation">,</span> 3)<span class="token punctuation">,</span> columns=list('bde')<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                      index=<span class="token punctuation">[</span><span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token string">'Oregon'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">191</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">191</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                b         d         eUtah   <span class="token punctuation">-</span>0.204708  0.478943 <span class="token punctuation">-</span>0.519439Ohio   <span class="token punctuation">-</span>0.555730  1.965781  1.393406Texas   0.092908  0.281746  0.769023Oregon  1.246435  1.007189 <span class="token punctuation">-</span>1.296221In <span class="token punctuation">[</span><span class="token number">192</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.abs(frame)Out<span class="token punctuation">[</span><span class="token number">192</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                b         d         eUtah    0.204708  0.478943  0.519439Ohio    0.555730  1.965781  1.393406Texas   0.092908  0.281746  0.769023Oregon  1.246435  1.007189  1.296221<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一个常见的操作是，将函数应用到由各列或行所形成的一维数组上。DataFrame的apply方法即可实现此功能：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">193</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">f = lambda x</span><span class="token punctuation">:</span> x.max() <span class="token punctuation">-</span> x.min()In <span class="token punctuation">[</span><span class="token number">194</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.apply(f)Out<span class="token punctuation">[</span><span class="token number">194</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">b    1.802165d    1.684034e    2.689627dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的函数f，计算了一个<code>Series</code>的最大值和最小值的差，在<code>frame</code>的每列都执行了一次。结果是一个Series，使用frame的列作为索引。</p><p>如果传递axis=’columns’到apply，这个函数会在每行执行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">195</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.apply(f<span class="token punctuation">,</span> axis='columns')Out<span class="token punctuation">[</span><span class="token number">195</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token key atrule">Utah      0.998382Ohio      2.521511Texas     0.676115Oregon    2.542656dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>许多最为常见的数组统计功能都被实现成<code>DataFrame</code>的方法（如<code>sum</code>和<code>mean</code>），因此无需使用apply方法。</p><p>传递到apply的函数不是必须返回一个标量，还可以返回由多个值组成的<code>Series</code>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">196</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">def f(x)</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     return pd.Series(<span class="token punctuation">[</span>x.min()<span class="token punctuation">,</span> x.max()<span class="token punctuation">]</span><span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'min'</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">197</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.apply(f)Out<span class="token punctuation">[</span><span class="token number">197</span><span class="token punctuation">]</span><span class="token punctuation">:</span>             b         d         emin <span class="token punctuation">-</span>0.555730  0.281746 <span class="token punctuation">-</span>1.296221max  1.246435  1.965781  1.393406<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>元素级的Python函数也是可以用的。假如你想得到frame中各个浮点值的格式化字符串，使用applymap即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">198</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">format = lambda x</span><span class="token punctuation">:</span> '%.2f' % xIn <span class="token punctuation">[</span><span class="token number">199</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.applymap(format)Out<span class="token punctuation">[</span><span class="token number">199</span><span class="token punctuation">]</span><span class="token punctuation">:</span>             b     d      eUtah    <span class="token punctuation">-</span>0.20  0.48  <span class="token punctuation">-</span>0.52Ohio    <span class="token punctuation">-</span>0.56  1.97   1.39Texas    0.09  0.28   0.77Oregon   1.25  1.01  <span class="token punctuation">-</span><span class="token number">1.30</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之所以叫做applymap，是因为Series有一个用于应用元素级函数的map方法：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame<span class="token punctuation">[</span><span class="token string">'e'</span><span class="token punctuation">]</span>.map(format)Out<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">Utah      -0.52Ohio       1.39Texas      0.77Oregon    -1.30Name</span><span class="token punctuation">:</span> e<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> object<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="排序和排名"><a href="#排序和排名" class="headerlink" title="排序和排名"></a>排序和排名</h4><p>根据条件对数据集排序（<code>sorting</code>）也是一种重要的内置运算。要对行或列索引进行排序（按字典顺序），可使用sort_index方法，它将返回一个已排序的新对象：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(range(4)<span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.sort_index()Out<span class="token punctuation">[</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token key atrule">a    1b    2c    3d    0dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于DataFrame，则可以根据任意一个轴上的索引进行排序：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">203</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame = pd.DataFrame(np.arange(8).reshape((2<span class="token punctuation">,</span> 4))<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                      index=<span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                      columns=<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">204</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.sort_index()Out<span class="token punctuation">[</span><span class="token number">204</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        d  a  b  cone    4  5  6  7three  0  1  2  3In <span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.sort_index(axis=1)Out<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       a  b  c  dthree  1  2  3  0one    5  6  7  4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数据默认是按升序排序的，但也可以降序排序：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">206</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.sort_index(axis=1<span class="token punctuation">,</span> ascending=False)Out<span class="token punctuation">[</span><span class="token number">206</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        d  c  b  athree  0  3  2  1one    4  7  6  5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若要按值对Series进行排序，可使用其sort_values方法：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">207</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">-3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">208</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.sort_values()Out<span class="token punctuation">[</span><span class="token number">208</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">2   -33    20    41    7dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在排序时，任何缺失值默认都会被放到Series的末尾：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">209</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> np.nan<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> np.nan<span class="token punctuation">,</span> <span class="token number">-3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.sort_values()Out<span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">4   -3.05    2.00    4.02    7.01    NaN3    NaNdtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当排序一个<code>DataFrame</code>时，你可能希望根据一个或多个列中的值进行排序。将一个或多个列的名字传递给sort_values的by选项即可达到该目的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">211</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame = pd.DataFrame(<span class="token punctuation">{</span><span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">-3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>)In <span class="token punctuation">[</span><span class="token number">212</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">212</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    a  b0  0  41  1  72  0 <span class="token punctuation">-</span>33  1  2In <span class="token punctuation">[</span><span class="token number">213</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.sort_values(by='b')Out<span class="token punctuation">[</span><span class="token number">213</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    a  b2  0 <span class="token punctuation">-</span>33  1  20  0  41  1  7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要根据多个列进行排序，传入名称的列表即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">214</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.sort_values(by=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">214</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    a  b2  0 <span class="token punctuation">-</span>30  0  43  1  21  1  7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>排名会从1开始一直到数组中有效数据的数量。接下来介绍<code>Series</code>和<code>DataFrame</code>的rank方法。默认情况下，rank是通过“为各组分配一个平均排名”的方式破坏平级关系的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">215</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">-5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">216</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.rank()Out<span class="token punctuation">[</span><span class="token number">216</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    6.51    1.02    6.53    4.54    3.05    2.06    4.5dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以根据值在原数据中出现的顺序给出排名：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">217</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.rank(method='first')Out<span class="token punctuation">[</span><span class="token number">217</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    6.01    1.02    7.03    4.04    3.05    2.06    5.0dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里，条目0和2没有使用平均排名6.5，它们被设成了6和7，因为数据中标签0位于标签2的前面。</p><p>你也可以按降序进行排名：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Assign tie values the maximum rank in the groupIn [218]: obj.rank(ascending=False, method='max')Out[218]: 0    2.01    7.02    2.03    4.04    5.05    6.06    4.0dtype: float64</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下表列出了所有用于破坏平级关系的。DataFrame可以在行或列上计算排名：</p><p><img src="https://tva4.sinaimg.cn/large/007mx13gly1guu604be0mj60i5068dh002.jpg" alt="排名时用于破坏平级关系的方法"></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">219</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame = pd.DataFrame(<span class="token punctuation">{</span><span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4.3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">-3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                       <span class="token key atrule">'c'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">-2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">-2.5</span><span class="token punctuation">]</span><span class="token punctuation">}</span>)In <span class="token punctuation">[</span><span class="token number">220</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">220</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    a    b    c0  0  4.3 <span class="token punctuation">-</span>2.01  1  7.0  5.02  0 <span class="token punctuation">-</span>3.0  8.03  1  2.0 <span class="token punctuation">-</span>2.5In <span class="token punctuation">[</span><span class="token number">221</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.rank(axis='columns')Out<span class="token punctuation">[</span><span class="token number">221</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      a    b    c0  2.0  3.0  1.01  1.0  3.0  2.02  2.0  1.0  3.03  2.0  3.0  1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="带有重复标签的轴索引"><a href="#带有重复标签的轴索引" class="headerlink" title="带有重复标签的轴索引"></a>带有重复标签的轴索引</h4><p>直到目前为止，我所介绍的所有范例都有着唯一的轴标签（索引值）。虽然许多pandas函数（如reindex）都要求标签唯一，但这并不是强制性的。我们来看看下面这个简单的带有重复索引值的Series：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">222</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(range(5)<span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">223</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">223</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    0a    1b    2b    3c    4dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>索引的is_unique属性可以告诉你它的值是否是唯一的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">224</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.index.is_uniqueOut<span class="token punctuation">[</span><span class="token number">224</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于带有重复值的索引，数据选取的行为将会有些不同。如果某个索引对应多个值，则返回一个Series；而对应单个值的，则返回一个标量值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">225</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">225</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    0a    1dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">226</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">226</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样会使代码变复杂，因为索引的输出类型会根据标签是否有重复发生变化。</p><p>对DataFrame的行进行索引时也是如此：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">227</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df = pd.DataFrame(np.random.randn(4<span class="token punctuation">,</span> 3)<span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">228</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dfOut<span class="token punctuation">[</span><span class="token number">228</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           0         1         2a  0.274992  0.228913  1.352917a  0.886429 <span class="token punctuation">-</span>2.001637 <span class="token punctuation">-</span>0.371843b  1.669025 <span class="token punctuation">-</span>0.438570 <span class="token punctuation">-</span>0.539741b  0.476985  3.248944 <span class="token punctuation">-</span>1.021228In <span class="token punctuation">[</span><span class="token number">229</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df.loc<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">229</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           0         1         2b  1.669025 <span class="token punctuation">-</span>0.438570 <span class="token punctuation">-</span>0.539741b  0.476985  3.248944 <span class="token punctuation">-</span><span class="token number">1.021228</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-3-汇总和计算描述统计"><a href="#5-3-汇总和计算描述统计" class="headerlink" title="5.3 汇总和计算描述统计"></a>5.3 汇总和计算描述统计</h3><p><code>pandas</code>对象拥有一组常用的数学和统计方法。它们大部分都属于约简和汇总统计，用于从Series中提取单个值（如sum或mean）或从DataFrame的行或列中提取一个Series。跟对应的NumPy数组方法相比，它们都是基于没有缺失数据的假设而构建的。看一个简单的DataFrame：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">230</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df = pd.DataFrame(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.4</span><span class="token punctuation">,</span> np.nan<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7.1</span><span class="token punctuation">,</span> <span class="token number">-4.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                    <span class="token punctuation">[</span>np.nan<span class="token punctuation">,</span> np.nan<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.75</span><span class="token punctuation">,</span> <span class="token number">-1.3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                   index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                   columns=<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">231</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dfOut<span class="token punctuation">[</span><span class="token number">231</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     one  twoa  1.40  NaNb  7.10 <span class="token punctuation">-</span>4.5c   NaN  NaNd  0.75 <span class="token punctuation">-</span><span class="token number">1.3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调用DataFrame的sum方法将会返回一个含有列的和的Series：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">232</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df.sum()Out<span class="token punctuation">[</span><span class="token number">232</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">one    9.25two   -5.80dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传入axis=’columns’或axis=1将会按行进行求和运算：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">233</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df.sum(axis=1)Out<span class="token punctuation">[</span><span class="token number">233</span><span class="token punctuation">]</span><span class="token punctuation">:</span>a    1.40b    2.60c     NaNd   <span class="token punctuation">-</span><span class="token number">0.55</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>NA值会自动被排除，除非整个切片（这里指的是行或列）都是NA。通过skipna选项可以禁用该功能：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df.mean(axis='columns'<span class="token punctuation">,</span> skipna=False)Out<span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a      NaNb    1.300c      NaNd   -0.275dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下表列出了这些约简方法的常用选项。</p><p><img src="https://tva2.sinaimg.cn/large/007mx13gly1guu6vovafqj60yg081gmd02.jpg" alt="汇总和计算描述统计"></p><p>有些方法（如idxmin和idxmax）返回的是间接统计（比如达到最小值或最大值的索引）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">235</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df.idxmax()Out<span class="token punctuation">[</span><span class="token number">235</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">one    btwo    ddtype</span><span class="token punctuation">:</span> object <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一些方法则是<u>累计型</u>的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">236</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df.cumsum()Out<span class="token punctuation">[</span><span class="token number">236</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     one  twoa  1.40  NaNb  8.50 <span class="token punctuation">-</span>4.5c   NaN  NaNd  9.25 <span class="token punctuation">-</span><span class="token number">5.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有一种方法，它既不是约简型也不是累计型。describe就是一个例子，它用于一次性产生多个汇总统计：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">237</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df.describe()Out<span class="token punctuation">[</span><span class="token number">237</span><span class="token punctuation">]</span><span class="token punctuation">:</span>             one       twocount  3.000000  2.000000mean   3.083333 <span class="token punctuation">-</span>2.900000std    3.493685  2.262742min    0.750000 <span class="token punctuation">-</span>4.50000025%    1.075000 <span class="token punctuation">-</span>3.70000050%    1.400000 <span class="token punctuation">-</span>2.90000075%    4.250000 <span class="token punctuation">-</span>2.100000max    7.100000 <span class="token punctuation">-</span><span class="token number">1.300000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于非数值型数据，<code>describe</code>会产生另外一种汇总统计：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">238</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span> * 4)In <span class="token punctuation">[</span><span class="token number">239</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.describe()Out<span class="token punctuation">[</span><span class="token number">239</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">count     16unique     3top        afreq       8dtype</span><span class="token punctuation">:</span> object<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下表列出了所有与描述统计相关的方法。</p><p><img src="https://tva4.sinaimg.cn/large/007mx13gly1guu72rt5btj60xh0vrtbs02.jpg" alt="汇总和计算描述统计"></p><h4 id="相关系数与协方差"><a href="#相关系数与协方差" class="headerlink" title="相关系数与协方差"></a>相关系数与协方差</h4><p>有些汇总统计（如相关系数和协方差）是通过参数对计算出来的。我们来看几个DataFrame，它们的数据来自Yahoo!Finance的股票价格和成交量，使用的是pandas-datareader包（可以用conda或pip安装）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">conda install pandas<span class="token punctuation">-</span>datareader<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我使用pandas_datareader模块下载了一些股票数据：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">import pandas_datareader.data as weball_data = <span class="token punctuation">{</span><span class="token key atrule">ticker</span><span class="token punctuation">:</span> web.get_data_yahoo(ticker)            for ticker in <span class="token punctuation">[</span><span class="token string">'AAPL'</span><span class="token punctuation">,</span> <span class="token string">'IBM'</span><span class="token punctuation">,</span> <span class="token string">'MSFT'</span><span class="token punctuation">,</span> <span class="token string">'GOOG'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>price = pd.DataFrame(<span class="token punctuation">{</span><span class="token key atrule">ticker</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'Adj Close'</span><span class="token punctuation">]</span>                     for ticker<span class="token punctuation">,</span> data in all_data.items()<span class="token punctuation">}</span>)volume = pd.DataFrame(<span class="token punctuation">{</span><span class="token key atrule">ticker</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'Volume'</span><span class="token punctuation">]</span>                      for ticker<span class="token punctuation">,</span> data in all_data.items()<span class="token punctuation">}</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：此时Yahoo! Finance已经不存在了，因为2017年Yahoo!被Verizon收购了。参阅pandas-datareader文档，可以学习最新的功能。</p></blockquote><p>现在计算价格的百分数变化，时间序列的操作会在第11章介绍：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">242</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns = price.pct_change()In <span class="token punctuation">[</span><span class="token number">243</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns.tail()Out<span class="token punctuation">[</span><span class="token number">243</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                 AAPL      GOOG       IBM      MSFTDate                                              2016<span class="token punctuation">-</span>10<span class="token punctuation">-</span>17 <span class="token punctuation">-</span>0.000680  0.001837  0.002072 <span class="token punctuation">-</span>0.0034832016<span class="token punctuation">-</span>10<span class="token punctuation">-</span>18 <span class="token punctuation">-</span>0.000681  0.019616 <span class="token punctuation">-</span>0.026168  0.0076902016<span class="token punctuation">-</span>10<span class="token punctuation">-</span>19 <span class="token punctuation">-</span>0.002979  0.007846  0.003583 <span class="token punctuation">-</span>0.0022552016<span class="token punctuation">-</span>10<span class="token punctuation">-</span>20 <span class="token punctuation">-</span>0.000512 <span class="token punctuation">-</span>0.005652  0.001719 <span class="token punctuation">-</span>0.0048672016<span class="token punctuation">-</span>10<span class="token punctuation">-</span>21 <span class="token punctuation">-</span>0.003930  0.003011 <span class="token punctuation">-</span>0.012474  0.042096<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Series的corr方法用于计算两个Series中重叠的、非NA的、按索引对齐的值的相关系数。与此类似，cov用于计算协方差：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">244</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns<span class="token punctuation">[</span><span class="token string">'MSFT'</span><span class="token punctuation">]</span>.corr(returns<span class="token punctuation">[</span><span class="token string">'IBM'</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">244</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 0.49976361144151144In <span class="token punctuation">[</span><span class="token number">245</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns<span class="token punctuation">[</span><span class="token string">'MSFT'</span><span class="token punctuation">]</span>.cov(returns<span class="token punctuation">[</span><span class="token string">'IBM'</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">245</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">8.8706554797035462e-05</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为MSTF是一个合理的Python属性，我们还可以用更简洁的语法选择列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">246</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns.MSFT.corr(returns.IBM)Out<span class="token punctuation">[</span><span class="token number">246</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0.49976361144151144</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一方面，DataFrame的corr和cov方法将以DataFrame的形式分别返回完整的相关系数或协方差矩阵：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">247</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns.corr()Out<span class="token punctuation">[</span><span class="token number">247</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           AAPL      GOOG       IBM      MSFTAAPL  1.000000  0.407919  0.386817  0.389695GOOG  0.407919  1.000000  0.405099  0.465919IBM   0.386817  0.405099  1.000000  0.499764MSFT  0.389695  0.465919  0.499764  1.000000In <span class="token punctuation">[</span><span class="token number">248</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns.cov()Out<span class="token punctuation">[</span><span class="token number">248</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           AAPL      GOOG       IBM      MSFTAAPL  0.000277  0.000107  0.000078  0.000095GOOG  0.000107  0.000251  0.000078  0.000108IBM   0.000078  0.000078  0.000146  0.000089MSFT  0.000095  0.000108  0.000089  0.000215<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用DataFrame的corrwith方法，你可以计算其列或行跟另一个Series或DataFrame之间的相关系数。传入一个Series将会返回一个相关系数值Series（针对各列进行计算）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">249</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns.corrwith(returns.IBM)Out<span class="token punctuation">[</span><span class="token number">249</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">AAPL    0.386817GOOG    0.405099IBM     1.000000MSFT    0.499764dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传入一个<code>DataFrame</code>则会计算按列名配对的相关系数。这里，我计算百分比变化与成交量的相关系数：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns.corrwith(volume)Out<span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">AAPL   -0.075565GOOG   -0.007067IBM    -0.204849MSFT   -0.092950dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传入axis=’columns’即可按行进行计算。无论如何，在计算相关系数之前，所有的数据项都会按标签对齐。<br>唯一值、值计数以及成员资格</p><p>还有一类方法可以从一维Series的值中抽取信息。看下面的例子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">251</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个函数是unique，它可以得到Series中的唯一值数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">252</span><span class="token punctuation">]</span><span class="token punctuation">:</span> uniques = obj.unique()In <span class="token punctuation">[</span><span class="token number">253</span><span class="token punctuation">]</span><span class="token punctuation">:</span> uniquesOut<span class="token punctuation">[</span><span class="token number">253</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=object)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回的唯一值是未排序的，如果需要的话，可以对结果再次进行排序（uniques.sort()）。相似的，value_counts用于计算一个Series中各值出现的频率：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">254</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.value_counts()Out<span class="token punctuation">[</span><span class="token number">254</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">c    3a    3b    2d    1dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了便于查看，结果Series是按值频率降序排列的。value_counts还是一个顶级pandas方法，可用于任何数组或序列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd.value_counts(obj.values<span class="token punctuation">,</span> sort=False)Out<span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    3b    2c    3d    1dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>isin用于判断矢量化集合的成员资格，可用于过滤Series中或DataFrame列中数据的子集：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    c1    a2    d3    a4    a5    b6    b7    c8    cdtype</span><span class="token punctuation">:</span> objectIn <span class="token punctuation">[</span><span class="token number">257</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mask = obj.isin(<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">258</span><span class="token punctuation">]</span><span class="token punctuation">:</span> maskOut<span class="token punctuation">[</span><span class="token number">258</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0     True1    False2    False3    False4    False5     True6     True7     True8     Truedtype</span><span class="token punctuation">:</span> boolIn <span class="token punctuation">[</span><span class="token number">259</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span>mask<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">259</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    c5    b6    b7    c8    cdtype</span><span class="token punctuation">:</span> object<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与isin类似的是Index.get_indexer方法，它可以给你一个索引数组，从可能包含重复值的数组到另一个不同值的数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">260</span><span class="token punctuation">]</span><span class="token punctuation">:</span> to_match = pd.Series(<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">261</span><span class="token punctuation">]</span><span class="token punctuation">:</span> unique_vals = pd.Series(<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">262</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd.Index(unique_vals).get_indexer(to_match)Out<span class="token punctuation">[</span><span class="token number">262</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表给出了这几个方法的一些参考信息。</p><p><img src="https://tvax3.sinaimg.cn/large/007mx13gly1guu7jqw8xoj60nk0580u802.jpg" alt="唯一值、值计数、成员资格方法"></p><p>有时，你可能希望得到DataFrame中多个相关列的一张柱状图。例如：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">263</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data = pd.DataFrame(<span class="token punctuation">{</span><span class="token key atrule">'Qu1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                      <span class="token key atrule">'Qu2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                      <span class="token key atrule">'Qu3'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span>)In <span class="token punctuation">[</span><span class="token number">264</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">264</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    Qu1  Qu2  Qu30    1    2    11    3    3    52    4    1    23    3    2    44    4    3    4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将pandas.value_counts传给该DataFrame的apply函数，就会出现：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">265</span><span class="token punctuation">]</span><span class="token punctuation">:</span> result = data.apply(pd.value_counts).fillna(0)In <span class="token punctuation">[</span><span class="token number">266</span><span class="token punctuation">]</span><span class="token punctuation">:</span> resultOut<span class="token punctuation">[</span><span class="token number">266</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    Qu1  Qu2  Qu31  1.0  1.0  1.02  0.0  2.0  1.03  2.0  2.0  0.04  2.0  0.0  2.05  0.0  0.0  1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里，结果中的行标签是所有列的唯一值。后面的频率值是每个列中这些值的相应计数。</p>]]></content>
      
      
      <categories>
          
          <category> 学习经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客出现的问题及处理方法</title>
      <link href="/2021/09/19/hexo-bo-ke-chu-xian-de-wen-ti-ji-chu-li-fang-fa/"/>
      <url>/2021/09/19/hexo-bo-ke-chu-xian-de-wen-ti-ji-chu-li-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="添加图片（添加线上图片）"><a href="#添加图片（添加线上图片）" class="headerlink" title="添加图片（添加线上图片）"></a>添加图片（添加线上图片）</h2><p>本地图片仍然无法添加进入图片,目前只能实现添加在线图片的功能。</p><p>首先选择一个图床（我选择的微博图床<em>微博图床</em>），上传图片获得链接，具体方法参考<a href="https://www.bilibili.com/read/cv6075030/">想方便快捷的分享/收藏图片？试试免费好用的微博图床</a>。</p><p>然后就可以通过<code>![图名](图片生成的URL链接)</code>的常见方式直接插入在线图片</p><p>例如我的网站logo图片</p><p><img src="https://tva3.sinaimg.cn/large/007mx13gly1gult8rrmexj608c08cjra02.jpg" alt="图名"></p><p>就可以直接通过如下指令直接插入</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token tag">!</span><span class="token punctuation">[</span>图名<span class="token punctuation">]</span>(https<span class="token punctuation">:</span>//tva3.sinaimg.cn/large/007mx13gly1gult8rrmexj608c08cjra02.jpg)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="如何插入公式"><a href="#如何插入公式" class="headerlink" title="如何插入公式"></a>如何插入公式</h2><p>可参考文章<a href="https://zhuanlan.zhihu.com/p/108766968">结合MathType和MathJax在Hexo博客中插入数学公式 </a></p><p>使用时注意：插入mathtype的复制<code>数学公式</code>时：</p><p>首先对<code>Preferences</code>下的<code>Cut and Copy Preferences</code>进行设置。如下图：</p><p><img src="https://pic3.zhimg.com/80/v2-36c773a2a6453de2cd5e9524f5fb2c06_720w.jpg" alt=""></p><p>然后以如下形式插入数学公式</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">{% raw%} 数学公式 {% endraw %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若想在一句话中<code>嵌入公式</code>，则只需要在<code>LaTex</code>公式两端用一个<code>$</code></p><p>公式单行居中显示的方法为</p><pre class="line-numbers language-none"><code class="language-none">$$ 数学公式 $$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode加C++环境下编译语言遇到的问题以及解决方法</title>
      <link href="/2021/09/19/vscode-jia-c-huan-jing-xia-bian-yi-yu-yan-yu-dao-de-wen-ti-yi-ji-jie-jue-fang-fa/"/>
      <url>/2021/09/19/vscode-jia-c-huan-jing-xia-bian-yi-yu-yan-yu-dao-de-wen-ti-yi-ji-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="中文乱码问题"><a href="#中文乱码问题" class="headerlink" title="中文乱码问题"></a>中文乱码问题</h2><p>运行测试文件<strong>test.cpp</strong>，存在中文乱码的问题</p><p><strong>test.cpp</strong><br></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"> <span class="token comment">#include&lt;iostream&gt;</span> using namespace std; int main()<span class="token punctuation">{</span>int num;cout&lt;&lt;"请输入一个整型数：";cin<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span>num;cout&lt;&lt;"八进制数是："&lt;&lt;oct&lt;&lt;num&lt;&lt;endl;cout&lt;&lt;"十进制数是："&lt;&lt;dec&lt;&lt;num&lt;&lt;endl;cout&lt;&lt;"十六进制数是："&lt;&lt;hex&lt;&lt;num&lt;&lt;endl;return 0;<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>解决方法：点击vscode右下角的UTF-8，出现“选择操作”界面，选择“通过编码重新打开”，再输出“gbk”，再进行编译即可。（注意更改后保存）</p>]]></content>
      
      
      <categories>
          
          <category> 学习经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode配置C++环境</title>
      <link href="/2021/09/18/vscode-pei-zhi-c-huan-jing/"/>
      <url>/2021/09/18/vscode-pei-zhi-c-huan-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="安装VSCode与C"><a href="#安装VSCode与C" class="headerlink" title="安装VSCode与C++"></a>安装VSCode与C++</h2><p>参考<a href="https://blog.csdn.net/Zhouzi_heng/article/details/115014059">【c++】VSCode配置 c++ 环境（小白教程））</a></p><h2 id="VSCode配置c"><a href="#VSCode配置c" class="headerlink" title="VSCode配置c++"></a>VSCode配置c++</h2><p>网上有许多关于vscode下c++配置，一种是配置文件的方法，一种是添加插件直接配置的方法</p><h3 id="配置文件法"><a href="#配置文件法" class="headerlink" title="配置文件法"></a>配置文件法</h3><p><img src="https://tva2.sinaimg.cn/large/007mx13gly1gul7mhhg36j60k8087wfz02.jpg" alt="第一步"><br><img src="https://tva4.sinaimg.cn/large/007mx13gly1gul7mqrtwgj60c8047js602.jpg" alt="第二步"></p><h3 id="配置插件法（两种）"><a href="#配置插件法（两种）" class="headerlink" title="配置插件法（两种）"></a>配置插件法（两种）</h3><p>可选两种：</p><p><em>Code runner</em> （右上角箭头运行）</p><p><em>C/C++ Compile Run</em>（F6运行）</p><p>参考<a href="https://zhuanlan.zhihu.com/p/77645306">windows 10上使用vscode编译运行和调试C/C++</a></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="对应测试文件"><a href="#对应测试文件" class="headerlink" title="对应测试文件"></a>对应测试文件</h3><p><strong>test.cpp</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"> <span class="token comment">#include&lt;iostream&gt;</span> using namespace std; int main()<span class="token punctuation">{</span>int num;cout&lt;&lt;"请输入一个整型数：";cin<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span>num;cout&lt;&lt;"八进制数是："&lt;&lt;oct&lt;&lt;num&lt;&lt;endl;cout&lt;&lt;"十进制数是："&lt;&lt;dec&lt;&lt;num&lt;&lt;endl;cout&lt;&lt;"十六进制数是："&lt;&lt;hex&lt;&lt;num&lt;&lt;endl;return 0;<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插件法可以直接在vscode中查看编译结果</p><p>配置文件的方法需要再下载插件<em>Code Runner</em>运行生成的exe文件，配置成功后的运行文件可在输入数字后反应。（存在中文乱码的问题需要处理）</p>]]></content>
      
      
      <categories>
          
          <category> 学习经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客主题之hexo-theme-matery的介绍（转载于blinkfox）</title>
      <link href="/2021/09/18/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/"/>
      <url>/2021/09/18/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-theme-matery"><a href="#hexo-theme-matery" class="headerlink" title="hexo-theme-matery"></a>hexo-theme-matery</h1><blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="转载说明"><a href="#转载说明" class="headerlink" title="转载说明"></a>转载说明</h2><p>本文作者为<a href="https://blinkfox.github.io/about/">blinkfox</a>,转载本文仅为个人学习参考，本文为博客小白，如有做的不对的地方，请大佬指出，必定及时修正。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li></ul><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p>感谢下面列出的贡献者，没有他们，hexo-theme-matery 不会这么完美。</p><ul><li><a href="https://github.com/HarborZeng">@HarborZeng</a></li><li><a href="https://github.com/shw2018">@shw2018</a></li><li><a href="https://github.com/L1cardo">@L1cardo</a></li><li><a href="https://github.com/Five-great">@Five-great</a></li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>本主题<strong>推荐你使用 Hexo 5.0.0 及以上的版本</strong>。如果，你已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了，建议你将 Hexo 升级到最新稳定的版本。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式  </li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Music        <span class="token key atrule">url</span><span class="token punctuation">:</span> /music        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;% if (theme.socialLink.github) { %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= theme.socialLink.github %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否在首页显示音乐</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span>         <span class="token comment"># 非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment"># require music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment"># require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841</span>     <span class="token comment"># require song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span>       <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 列表默认折叠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><div class="table-container"><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table></div><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p><p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 0%<span class="token punctuation">,</span> #0f9d58 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本变更记录"><a href="#版本变更记录" class="headerlink" title="版本变更记录"></a>版本变更记录</h2><p>参见 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/master/README.md">CHANGELOG.md</a></p>]]></content>
      
      
      <categories>
          
          <category> 转载内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github+matery的个人博客搭建（补充）</title>
      <link href="/2021/09/18/hexo-github-matery-de-ge-ren-bo-ke-da-jian-bu-chong/"/>
      <url>/2021/09/18/hexo-github-matery-de-ge-ren-bo-ke-da-jian-bu-chong/</url>
      
        <content type="html"><![CDATA[<p>最近想做一下自己的博客内容，记录一下平时的学习。参考了 <a href="https://zhuanlan.zhihu.com/p/111614119">Github + Hexo 搭建个人博客超详细教程</a> 进行博客搭建。但是出现了一些由于版本更新问题所以在这里记录一下，刚开始写博客，解决方法不一定正确。</p><h2 id="博客根目录下配置文件-config-yml的由于版本更新出现的问题"><a href="#博客根目录下配置文件-config-yml的由于版本更新出现的问题" class="headerlink" title="博客根目录下配置文件_config.yml的由于版本更新出现的问题"></a>博客根目录下配置文件_config.yml的由于版本更新出现的问题</h2><h3 id="配置文件-config-yml最后几行的原始内容"><a href="#配置文件-config-yml最后几行的原始内容" class="headerlink" title="配置文件_config.yml最后几行的原始内容"></a>配置文件_config.yml最后几行的原始内容</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  type<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Github-Hexo-搭建个人博客超详细教程-中对于配置文件-config-yml最后几行的修改"><a href="#Github-Hexo-搭建个人博客超详细教程-中对于配置文件-config-yml最后几行的修改" class="headerlink" title="Github + Hexo 搭建个人博客超详细教程 中对于配置文件_config.yml最后几行的修改"></a><a href="https://zhuanlan.zhihu.com/p/111614119">Github + Hexo 搭建个人博客超详细教程</a> 中对于配置文件_config.yml最后几行的修改</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>panakot/panakot.github.io.git（你的github.io地址）  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="我对配置文件-config-yml最后几行的修改"><a href="#我对配置文件-config-yml最后几行的修改" class="headerlink" title="我对配置文件_config.yml最后几行的修改"></a>我对配置文件_config.yml最后几行的修改</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com<span class="token punctuation">:</span>panakot/panakot.github.io.git（你的github.io地址）  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="博客主题matery的配置"><a href="#博客主题matery的配置" class="headerlink" title="博客主题matery的配置"></a>博客主题matery的配置</h2><p>最好直接参考原主题开发者的在个人博客中的使用说明，matery的作者闪烁之狐的相关说明网址可参考<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">Hexo博客主题之hexo-theme-matery的介绍</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
