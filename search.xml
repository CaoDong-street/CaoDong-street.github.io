<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文献阅读</title>
      <link href="/2021/09/23/wen-xian-yue-du/"/>
      <url>/2021/09/23/wen-xian-yue-du/</url>
      
        <content type="html"><![CDATA[<p>#利用坚果云+pdf expert实现文档云同步,可参考<a href="https://zhuanlan.zhihu.com/p/107061669">文献管理的多平台操作(Mendeley +坚果云+PDFexpert) ——让iPad+pencil 成为科研生产力)</a></p><p>#使用endnote</p>]]></content>
      
      
      <categories>
          
          <category> 学习经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> endnote </tag>
            
            <tag> 坚果云+pdf expert </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记（数据分析）</title>
      <link href="/2021/09/21/python-xue-xi-bi-ji/"/>
      <url>/2021/09/21/python-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="学习书籍-《利用Python进行数据分析·第2版》"><a href="#学习书籍-《利用Python进行数据分析·第2版》" class="headerlink" title="学习书籍: 《利用Python进行数据分析·第2版》"></a>学习书籍: <a href="https://www.bookstack.cn/read/pyda-2e-zh/README.md">《利用Python进行数据分析·第2版》</a></h1><h2 id="第02章-Python语法基础"><a href="#第02章-Python语法基础" class="headerlink" title="第02章 Python语法基础"></a><a href="https://www.bookstack.cn/read/pyda-2e-zh/2.md">第02章 Python语法基础</a></h2><h3 id="2-3-Python语法基础"><a href="#2-3-Python语法基础" class="headerlink" title="2.3 Python语法基础"></a><a href="https://www.bookstack.cn/read/pyda-2e-zh/2.3.md">2.3 Python语法基础</a></h3><h4 id="组织代码方式"><a href="#组织代码方式" class="headerlink" title="组织代码方式"></a>组织代码方式</h4><p><em>Python使用空白字符（tab和空格）来组织代码，而不是通过括号（）</em></p><p>例子：排序算法的for循环</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">for x in array</span><span class="token punctuation">:</span>    <span class="token key atrule">if x &lt; pivot</span><span class="token punctuation">:</span>        less.append(x)    <span class="token key atrule">else</span><span class="token punctuation">:</span>        greater.append(x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Python的语句不需要用分号结尾。但是，分号却可以用来给同在一行的语句切分</em></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">a = 5; b = 6; c = 7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="万物皆对象"><a href="#万物皆对象" class="headerlink" title="万物皆对象"></a>万物皆对象</h4><p>Python语言的一个重要特性就是它的对象模型的一致性。每个数字、字符串、数据结构、函数、类、模块等等，都是在Python解释器的自有“盒子”内，它被认为是Python对象。每个对象都有类型（例如，字符串或函数）和内部数据。在实际中，这可以让语言非常灵活，因为函数也可以被当做对象使用。</p><p><em>注释标记为#</em></p><p>例子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">results = <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">for line in file_handle</span><span class="token punctuation">:</span>    <span class="token comment"># keep the empty lines for now</span>    <span class="token comment"># if len(line) == 0:</span>    <span class="token comment">#   continue</span>    results.append(line.replace('foo'<span class="token punctuation">,</span> 'bar'))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="变量与参数传递"><a href="#变量与参数传递" class="headerlink" title="变量与参数传递"></a>变量与参数传递</h4><p>创建一个整数列表：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a = <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设将a赋值给一个新变量b：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b = a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在Python中，a和b实际上是同一个对象，即原有列表[1, 2, 3]。你可以在a中添加一个元素，然后检查b：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a.append(4)In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bOut<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="python是强类型化语言"><a href="#python是强类型化语言" class="headerlink" title="python是强类型化语言"></a>python是强类型化语言</h4><p><em>python是强类型化语言，意味着每个对象都有明确的类型（或类）（str型不能与int型相加），默许转换只会发生在特定的情况下（float型能与int型相加）</em><br>例子1：str型不能与int型相加</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> '5' + 5<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>TypeError                                 Traceback (most recent call last)&lt;ipython<span class="token punctuation">-</span>input<span class="token punctuation">-</span>16<span class="token punctuation">-</span>f9dbf5f0b234<span class="token punctuation">&gt;</span> in &lt;module<span class="token punctuation">&gt;</span>()<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 1 '5' + 5<span class="token key atrule">TypeError</span><span class="token punctuation">:</span> must be str<span class="token punctuation">,</span> not int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子2：loat型能与int型相加</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a = 4.5In <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b = 2<span class="token comment"># String formatting, to be visited later</span>In <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> print('a is <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> b is <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>'.format(type(a)<span class="token punctuation">,</span> type(b)))a is &lt;class 'float'<span class="token punctuation">&gt;</span><span class="token punctuation">,</span> b is &lt;class 'int'<span class="token punctuation">&gt;</span>In <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a / bOut<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2.25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>isinstance</strong></em>函数 : 检查对象是某个类型的实例,可以用类型元组，检查对象的类型是否在元组中</p><p><em>Python的对象通常都有属性（其它存储在对象内部的Python对象）和方法（对象的附属函数可以访问对象的内部数据）</em></p><h4 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h4><p><strong>Iterable object（可迭代对象）</strong><br>可迭代（Iterable） 对象是数组的泛化。这个概念是说任何对象都可以被定制为可在 for..of 循环中使用的对象。</p><p>数组是可迭代的。但不仅仅是数组。很多其他内建对象也都是可迭代的。例如字符串也是可迭代的。</p><p>如果从技术上讲，对象不是数组，而是表示某物的集合（列表，集合），for..of 是一个能够遍历它的很好的语法</p><p><em><strong>iter</strong></em>函数 : 判断对象是否是可迭代的</p><p>可定义<em><strong>isiterable</strong></em>函数</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def isiterable(obj)</span><span class="token punctuation">:</span>    <span class="token key atrule">try</span><span class="token punctuation">:</span>        iter(obj)        return True    <span class="token key atrule">except TypeError</span><span class="token punctuation">:</span> <span class="token comment"># not iterable</span>        return False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>isiterable</strong></em>函数 ：返回字符串以及大多数Python集合类型为True</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> isiterable('a string')Out<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>In <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> isiterable(<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>In <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> isiterable(5)Out<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h4><p>在Python中，模块就是一个有.py扩展名、包含Python代码的文件。假设有以下模块：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># some_module.py</span>PI = 3.14159<span class="token key atrule">def f(x)</span><span class="token punctuation">:</span>    return x + 2def g(a<span class="token punctuation">,</span> <span class="token key atrule">b)</span><span class="token punctuation">:</span>    return a + b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想从同目录下的另一个文件访问<em>some_module.py</em>中定义的变量和函数，可以：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">import some_moduleresult = some_module.f(5)pi = some_module.PI<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">from some_module import f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> PIresult = g(5<span class="token punctuation">,</span> PI)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用as关键词，你可以给引入起不同的变量名：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">import some_module as smfrom some_module import PI as pi<span class="token punctuation">,</span> g as gfr1 = sm.f(pi)r2 = gf(6<span class="token punctuation">,</span> pi)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二元运算符和比较运算符"><a href="#二元运算符和比较运算符" class="headerlink" title="二元运算符和比较运算符"></a>二元运算符和比较运算符</h4><p><em>要判断两个引用是否指向同一个对象，可以使用</em><strong>is</strong><em>方法。</em><strong>is not</strong><em>方法可以判断两个对象是不同的（因为</em><strong>list</strong><em>总是创建一个新的Python列表（即复制），我们可以断定c是不同于a的。使用is比较与==运算符不同，如下）：</em></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a = <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b = aIn <span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c = list(a)In <span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a is bOut<span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>In <span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a is not cOut<span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>In <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a == cOut<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tvax3.sinaimg.cn/large/007mx13gly1gum94jxbkuj60mj0elqao02.jpg" alt="二元运算符和比较运算符"></p><h4 id="可变与不可变对象"><a href="#可变与不可变对象" class="headerlink" title="可变与不可变对象"></a>可变与不可变对象</h4><p><em>Python中的大多数对象(列表、字典、NumPy数组，和用户定义的类型（类）)都是可变对象），即这些对象或包含的值可以被修改，而字符串和元组为不可变对象</em></p><p><img src="https://tva1.sinaimg.cn/large/007mx13gly1gumtsu38qdj60mg068n0l02.jpg" alt="标量类型"></p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#单引号或双引号来写字符串</span>a ='one way of writing a string'b ="another way"<span class="token comment">#对于有换行符的字符串，可以使用三引号，’’’或”””写字符串</span>    c ="""    This is a longer string that    spans multiple lines    """<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Python的字符串是不可变的，不能修改字符串</p><p>str函数：可以被转化为字符串</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a =5.6In<span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s = str(a)In<span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">]</span><span class="token punctuation">:</span>print(s)5.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>字符串是一个序列的Unicode字符，因此可以像其它序列，比如列表和元组一样处理：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s ='python'In<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(s)Out<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'n'</span><span class="token punctuation">]</span>In<span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'pyt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>语法s[:3]被称作切片，适用于许多Python序列。</p><p><em>反斜杠是转义字符</em></p><p>意思是它备用来表示特殊字符，比如换行符\n或Unicode字符。要写一个包含反斜杠的字符串，需要进行转义：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s ='12\\34'In<span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span>print(s)12\34<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>可以在字符串前面加一个r(代表raw)，表明字符就是它自身</em></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a ='this is the first half 'In<span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b ='and this is the second half'In<span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a + bOut<span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'this is the first half and this is the second half'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>字符串对象有format方法，可以替换格式化的参数为字符串，产生一个新的字符串：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> template ='<span class="token punctuation">{</span>0<span class="token punctuation">:</span>.2f<span class="token punctuation">}</span> <span class="token punctuation">{</span>1<span class="token punctuation">:</span>s<span class="token punctuation">}</span> are worth US$<span class="token punctuation">{</span>2<span class="token punctuation">:</span>d<span class="token punctuation">}</span>'<span class="token comment">#{0:.2f}表示格式化第一个参数为带有两位小数的浮点数。</span><span class="token comment">#{1:s}表示格式化第二个参数为字符串。</span><span class="token comment">#{2:d}表示格式化第三个参数为一个整数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>要替换参数为这些格式化的参数，我们传递format方法一个序列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span> template.format(4.5560<span class="token punctuation">,</span><span class="token string">'Argentine Pesos'</span><span class="token punctuation">,</span>1)Out<span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'4.56 Argentine Pesos are worth US$1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="字节和Unicode"><a href="#字节和Unicode" class="headerlink" title="字节和Unicode"></a>字节和Unicode</h4><p>在Python 3及以上版本中，Unicode是一级的字符串类型，这样可以更一致的处理ASCII和Non-ASCII文本。在老的Python版本中，字符串都是字节，不使用Unicode编码。<br>相关函数：<em><strong>encode</strong></em> <em><strong>decode</strong></em></p><h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><p>Python中的布尔值有两个，True和False</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>str、bool、int和float也是函数，可以用来转换类型：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">91</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s ='3.14159'In<span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">:</span> fval = float(s)In<span class="token punctuation">[</span><span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">:</span> type(fval)Out<span class="token punctuation">[</span><span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">:</span> floatIn<span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">:</span> int(fval)Out<span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">3</span>In<span class="token punctuation">[</span><span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bool(fval)Out<span class="token punctuation">[</span><span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token boolean important">True</span>In<span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bool(0)Out<span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token boolean important">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="None"><a href="#None" class="headerlink" title="None"></a>None</h4><p>None是Python的空值类型。如果一个函数没有明确的返回值，就会默认返回None：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a =NoneIn<span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a isNoneOut<span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token boolean important">True</span>In<span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b =5In<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b isnotNoneOut<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token boolean important">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>None也常常作为函数的默认参数</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">def add_and_maybe_multiply(a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token key atrule">c=None)</span><span class="token punctuation">:</span>    result = a + b<span class="token key atrule">if c isnotNone</span><span class="token punctuation">:</span>        result = result * creturn result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，None不仅是一个保留字，还是唯一的NoneType的实例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">:</span> type(None)Out<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">:</span>NoneType<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h4><p>Python内建的datetime模块提供了datetime、date和time类型。datetime类型结合了date和time，是最常使用的：</p><p>Python内建的datetime模块提供了datetime、date和time类型。datetime类型结合了date和time，是最常使用的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">:</span>from datetime import datetime<span class="token punctuation">,</span> date<span class="token punctuation">,</span> timeIn<span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dt = datetime(2011<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>21)In<span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dt.dayOut<span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">29</span>In<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dt.minuteOut<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据datetime实例，你可以用date和time提取出各自的对象：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dt.date()Out<span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime.date(2011<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>29)In<span class="token punctuation">[</span><span class="token number">107</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dt.time()Out<span class="token punctuation">[</span><span class="token number">107</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime.time(20<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>21)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>strftime方法可以将datetime格式化为字符串：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dt.strftime('%m/%d/%Y %H<span class="token punctuation">:</span>%M')Out<span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'10/29/2011 20:30'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>strptime可以将字符串转换成datetime对象：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime.strptime('20091031'<span class="token punctuation">,</span>'%Y%m%d')Out<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime.datetime(2009<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://tva3.sinaimg.cn/large/007mx13gly1gun84pnb4aj60j80b178b02.jpg" alt="格式化指令"></p><p><u>聚类或对时间序列进行分组</u>，替换datetimes的time字段有时会很有用。例如，用0替换分和秒：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dt.replace(minute=0<span class="token punctuation">,</span> second=0)Out<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime.datetime(2011<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为datetime.datetime是不可变类型，上面的方法会产生新的对象。</p><p>两个datetime对象的差会产生一个datetime.timedelta类型：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dt2 = datetime(2011<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span>30)In<span class="token punctuation">[</span><span class="token number">112</span><span class="token punctuation">]</span><span class="token punctuation">:</span> delta = dt2 <span class="token punctuation">-</span> dtIn<span class="token punctuation">[</span><span class="token number">113</span><span class="token punctuation">]</span><span class="token punctuation">:</span> deltaOut<span class="token punctuation">[</span><span class="token number">113</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime.timedelta(17<span class="token punctuation">,</span>7179)In<span class="token punctuation">[</span><span class="token number">114</span><span class="token punctuation">]</span><span class="token punctuation">:</span> type(delta)Out<span class="token punctuation">[</span><span class="token number">114</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime.timedelta<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果timedelta(17, 7179)指明了timedelta将17天、7179秒的编码方式。</p><p>将timedelta添加到datetime，会产生一个新的偏移datetime：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dtOut<span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime.datetime(2011<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span>21)In<span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dt + deltaOut<span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span> datetime.datetime(2011<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span>30)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a><strong>控制流</strong></h4><p>Python有若干内建的关键字进行条件逻辑、循环和其它控制流操作。<br>if、elif和else</p><h5 id="if"><a href="#if" class="headerlink" title="if"></a><em>if</em></h5><p>if是最广为人知的控制流语句。它检查一个条件，如果为True，就执行后面的语句：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">if x &lt;0</span><span class="token punctuation">:</span>print('It's negative')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>if后面可以跟一个或多个elif，所有条件都是False时，还可以添加一个else：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">if x &lt;0</span><span class="token punctuation">:</span>print('It's negative')<span class="token key atrule">elif x == 0</span><span class="token punctuation">:</span>    print('Equal to zero')<span class="token key atrule">elif 0 &lt; x &lt; 5</span><span class="token punctuation">:</span>    print('Positive but smaller than 5')<span class="token key atrule">else</span><span class="token punctuation">:</span>    print('Positiveand larger than or equal to 5')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果某个条件为True，后面的elif就不会被执行。当使用and和or时，复合条件语句是从左到右执行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a =5; b =7In<span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c =8; d =4In<span class="token punctuation">[</span><span class="token number">119</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token key atrule">if a &lt; b or c &gt; d</span><span class="token punctuation">:</span><span class="token punctuation">...</span>..<span class="token punctuation">:</span>print('Made it')Made it<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，c &gt; d不会被执行，因为第一个比较是True：</p><p>也可以把比较式串在一起：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">:</span>4<span class="token punctuation">&gt;</span>3<span class="token punctuation">&gt;</span>2<span class="token punctuation">&gt;</span>1Out<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token boolean important">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a><em>for循环</em></h5><p>for循环是在一个集合（列表或元组）中进行迭代，或者就是一个迭代器。for循环的标准语法是：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">for value in collection</span><span class="token punctuation">:</span><span class="token comment"># do something with value</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你可以用continue使for循环提前，跳过剩下的部分。看下面这个例子，将一个列表中的整数相加，跳过None：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">sequence =<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>None<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>None<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>total =0<span class="token key atrule">for value in sequence</span><span class="token punctuation">:</span><span class="token key atrule">if value isNone</span><span class="token punctuation">:</span>continue    total += value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以用break跳出for循环。下面的代码将各元素相加，直到遇到5：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">sequence =<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>total_until_5 =0<span class="token key atrule">for value in sequence</span><span class="token punctuation">:</span><span class="token key atrule">if value ==5</span><span class="token punctuation">:</span>break    total_until_5 += value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>break只中断for循环的最内层，其余的for循环仍会运行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">121</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token key atrule">for i in range(4)</span><span class="token punctuation">:</span><span class="token key atrule">.....:for j in range(4)</span><span class="token punctuation">:</span><span class="token key atrule">.....:if j &gt; i</span><span class="token punctuation">:</span><span class="token punctuation">...</span>..<span class="token punctuation">:</span>break<span class="token punctuation">...</span>..<span class="token punctuation">:</span>print((i<span class="token punctuation">,</span> j))<span class="token key atrule">.....</span><span class="token punctuation">:</span>(0<span class="token punctuation">,</span>0)(1<span class="token punctuation">,</span>0)(1<span class="token punctuation">,</span>1)(2<span class="token punctuation">,</span>0)(2<span class="token punctuation">,</span>1)(2<span class="token punctuation">,</span>2)(3<span class="token punctuation">,</span>0)(3<span class="token punctuation">,</span>1)(3<span class="token punctuation">,</span>2)(3<span class="token punctuation">,</span>3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果集合或迭代器中的元素序列（元组或列表），可以用for循环将其方便地拆分成变量：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">for a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token key atrule">c in iterator</span><span class="token punctuation">:</span><span class="token comment"># do something</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="While循环"><a href="#While循环" class="headerlink" title="While循环"></a><em>While循环</em></h5><p>while循环指定了条件和代码，当条件为False或用break退出循环，代码才会退出：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">x =256total =0<span class="token key atrule">while x &gt;0</span><span class="token punctuation">:</span><span class="token key atrule">if total &gt;500</span><span class="token punctuation">:</span>break    total += x    x = x //2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="pass非操作语句"><a href="#pass非操作语句" class="headerlink" title="pass非操作语句"></a><em>pass非操作语句</em></h5><p>pass是Python中的非操作语句。代码块不需要任何动作时可以使用（作为未执行代码的占位符）；因为Python需要使用空白字符划定代码块，所以需要pass：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">if x &lt;0</span><span class="token punctuation">:</span>print('negative<span class="token tag">!')</span><span class="token key atrule">elif x ==0</span><span class="token punctuation">:</span><span class="token comment"># TODO: put something smart here</span>pass<span class="token key atrule">else</span><span class="token punctuation">:</span>print('positive<span class="token tag">!')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="range函数"><a href="#range函数" class="headerlink" title="range函数"></a><em>range函数</em></h5><p>range函数返回一个迭代器，它产生一个均匀分布的整数序列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span> range(10)Out<span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span> range(0<span class="token punctuation">,</span>10)In<span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(range(10))Out<span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>range的三个参数是（起点，终点，步进）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(range(0<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>2))Out<span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span>In<span class="token punctuation">[</span><span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(range(5<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">-</span>1))Out<span class="token punctuation">[</span><span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，<u>range产生的整数不包括终点</u>。range的常见用法是用序号迭代序列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">seq =<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token key atrule">for i in range(len(seq))</span><span class="token punctuation">:</span>    val = seq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以使用list来存储range在其他数据结构中生成的所有整数，默认的迭代器形式通常是你想要的。下面的代码对0到99999中3或5的倍数求和：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">sum =0<span class="token key atrule">for i in range(100000)</span><span class="token punctuation">:</span><span class="token comment"># % is the modulo operator</span><span class="token key atrule">if i %3==0or i %5==0</span><span class="token punctuation">:</span>        sum += i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然range可以产生任意大的数，但任意时刻耗用的内存却很小。<br>三元表达式</p><h4 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h4><p>Python中的三元表达式可以将if-else语句放到一行里。语法如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">value = true<span class="token punctuation">-</span>expr if condition else false<span class="token punctuation">-</span>expr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>true-expr或false-expr可以是任何Python代码。它和下面的代码效果相同：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">if condition</span><span class="token punctuation">:</span>    value = true<span class="token punctuation">-</span>expr<span class="token key atrule">else</span><span class="token punctuation">:</span>    value = false<span class="token punctuation">-</span>expr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下面是一个更具体的例子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In<span class="token punctuation">[</span><span class="token number">126</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x =5In<span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">:</span>'Non<span class="token punctuation">-</span>negative'if x <span class="token punctuation">&gt;</span>=0else'Negative'Out<span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'Non-negative'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>和if-else一样，只有一个表达式会被执行。因此，三元表达式中的if和else可以包含大量的计算，但只有True的分支会被执行。因此，三元表达式中的if和else可以包含大量的计算，但只有True的分支会被执行。</p><p>虽然使用三元表达式可以压缩代码，但会降低<u>代码可读性</u>。</p><h2 id="第03章-Python的数据结构、函数和文件"><a href="#第03章-Python的数据结构、函数和文件" class="headerlink" title="第03章 Python的数据结构、函数和文件"></a><a href="https://www.bookstack.cn/read/pyda-2e-zh/3.md">第03章 Python的数据结构、函数和文件</a></h2><h3 id="3-1-数据结构和序列"><a href="#3-1-数据结构和序列" class="headerlink" title="3.1 数据结构和序列"></a><a href="https://www.bookstack.cn/read/pyda-2e-zh/3.1.md">3.1 数据结构和序列</a></h3><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>元组是<u>一个固定长度，不可改变的Python序列对象</u>。创建元组的最简单方式，是用<u>逗号分隔一列值</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tup = 4<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tupOut<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> (4<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> 6)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当用复杂的表达式定义元组，最好将值放到<u>圆括号</u>内，如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> nested_tup = (4<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> 6)<span class="token punctuation">,</span> (7<span class="token punctuation">,</span> 8)In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> nested_tupOut<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ((4<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> 6)<span class="token punctuation">,</span> (7<span class="token punctuation">,</span> 8))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用<u>tuple可以将任意序列或迭代器</u>转换成元组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tuple(<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> (4<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> 2)In <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tup = tuple('string')In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tupOut<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ('s'<span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> 'g')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以用方括号访问元组中的元素。和C、C++、JAVA等语言一样，<u>序列是从0开始的</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tup<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'s'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>元组中存储的对象可能是可变对象。<u>一旦创建了元组，元组中的对象就不能修改了</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tup = tuple(<span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean important">True</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tup<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> = False<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>TypeError                                 Traceback (most recent call last)&lt;ipython<span class="token punctuation">-</span>input<span class="token punctuation">-</span>10<span class="token punctuation">-</span>c7308343b841<span class="token punctuation">&gt;</span> in &lt;module<span class="token punctuation">&gt;</span>()<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 1 tup<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> = False<span class="token key atrule">TypeError</span><span class="token punctuation">:</span> 'tuple' object does not support item assignment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><u>如果元组中的某个对象是可变的，比如列表，可以在原位进行修改</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tup<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>.append(3)In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tupOut<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ('foo'<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以用<u>加号运算符将元组串联起来</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> (4<span class="token punctuation">,</span> None<span class="token punctuation">,</span> 'foo') + (6<span class="token punctuation">,</span> 0) + ('bar'<span class="token punctuation">,</span>)Out<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> (4<span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> 'bar')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>元组乘以一个整数，像列表一样，会将几个元组的复制串联起来：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ('foo'<span class="token punctuation">,</span> 'bar') * 4Out<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ('foo'<span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> 'bar')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><u>对象本身并没有被复制，只是引用了它</u>。</p><h5 id="拆分元组"><a href="#拆分元组" class="headerlink" title="拆分元组"></a>拆分元组</h5><p>如果你想将元组赋值给类似元组的变量，<u>Python会试图拆分等号右边的值</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tup = (4<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> 6)In <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c = tupIn <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bOut<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>即使含有元组的元组也会被拆分：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tup = 4<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> (6<span class="token punctuation">,</span> 7)In <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> (c<span class="token punctuation">,</span> d) = tupIn <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dOut<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用这个功能，你可以很容易地替换变量的名字，其它语言可能是这样：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">tmp = aa = bb = tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是在<u>Python中，替换</u>可以这样做：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span> b = 1<span class="token punctuation">,</span> <span class="token number">2</span>In <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> aOut<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span>In <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bOut<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span>In <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b<span class="token punctuation">,</span> a = a<span class="token punctuation">,</span> bIn <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> aOut<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span>In <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bOut<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变量拆分常用来迭代元组或列表序列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq = <span class="token punctuation">[</span>(1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> 3)<span class="token punctuation">,</span> (4<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> 6)<span class="token punctuation">,</span> (7<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> 9)<span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> for a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token key atrule">c in seq</span><span class="token punctuation">:</span><span class="token key atrule">....</span><span class="token punctuation">:</span>     print('a=<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> b=<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> c=<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>'.format(a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c))a=1<span class="token punctuation">,</span> b=2<span class="token punctuation">,</span> c=3a=4<span class="token punctuation">,</span> b=5<span class="token punctuation">,</span> c=6a=7<span class="token punctuation">,</span> b=8<span class="token punctuation">,</span> c=9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>format的用法参考<a href="https://www.cnblogs.com/lovejh/p/9201219.html">python格式化输出之format用法</a></p><p>format基本用法参考</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> print('<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>'.format('hello'<span class="token punctuation">,</span>'world'))  <span class="token comment"># 不带字段</span>hello world<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> print('<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>'.format('hello'<span class="token punctuation">,</span>'world'))  <span class="token comment"># 带数字编号</span>hello world<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> print('<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>'.format('hello'<span class="token punctuation">,</span>'world'))  <span class="token comment"># 打乱顺序</span>hello world hello<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> print('<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>'.format('hello'<span class="token punctuation">,</span>'world'))world world hello<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> print('<span class="token punctuation">{</span>a<span class="token punctuation">}</span> <span class="token punctuation">{</span>tom<span class="token punctuation">}</span> <span class="token punctuation">{</span>a<span class="token punctuation">}</span>'.format(tom='hello'<span class="token punctuation">,</span>a='world'))  <span class="token comment"># 带关键字</span>world hello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一个常见用法是从函数返回多个值。后面会详解。</p><p>Python最近新增了更多高级的元组拆分功能，允许从元组的开头“摘取”几个元素。它使用了特殊的语法*rest，这也用在函数签名中以抓取任意长度列表的位置参数：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> values = 1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span>In <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token important">*rest</span> = valuesIn <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span> bOut<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> (1<span class="token punctuation">,</span> 2)In <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> restOut<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>rest的部分是想要舍弃的部分，rest的名字不重要。作为惯用写法，<u>许多Python程序员会将不需要的变量使用下划线</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token important">*_</span> = values<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="tuple方法"><a href="#tuple方法" class="headerlink" title="tuple方法"></a>tuple方法</h5><p>因为元组的大小和内容不能修改，它的实例方法都很轻量。其中一个很有用的就是count（也适用于列表），它可以统计某个值得出现频率：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a = (1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> 2)In <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a.count(2)Out<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>与元组对比(括号定义，不能修改)，<u>列表的长度可变、内容可以被修改。你可以用方括号定义，或用list函数</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a_list = <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> None<span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tup = ('foo'<span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> 'baz')In <span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_list = list(tup)In <span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_listOut<span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> = 'peekaboo'In <span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_listOut<span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'peekaboo'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列表和元组的语义接近，在许多函数中可以交叉使用。</p><p>list函数常用来<u>在数据处理中实体化迭代器或生成器</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">:</span> gen = range(10)In <span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> genOut<span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> range(0<span class="token punctuation">,</span> 10)In <span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(gen)Out<span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="添加和删除元素"><a href="#添加和删除元素" class="headerlink" title="添加和删除元素"></a>添加和删除元素</h5><p>可以用<u>append</u>在列表末尾添加元素：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_list.append('dwarf')In <span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_listOut<span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'peekaboo'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">,</span> <span class="token string">'dwarf'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><u>insert</u>可以在特定的位置插入元素：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_list.insert(1<span class="token punctuation">,</span> 'red')In <span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_listOut<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'peekaboo'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">,</span> <span class="token string">'dwarf'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>插入的序号必须在0和列表长度之间。</p><blockquote><p>警告：与append相比，insert耗费的计算量大，因为对后续元素的引用必须在内部迁移，以便为新元素提供空间。如果要在序列的头部和尾部插入元素，你可能需要使用collections.deque，一个双尾部队列。</p></blockquote><p>insert的逆运算是<u>pop</u>，它移除并返回指定位置的元素：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_list.pop(2)Out<span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'peekaboo'</span>In <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_listOut<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">,</span> <span class="token string">'dwarf'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以用remove去除某个值，remove会先寻找第一个值并除去：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_list.append('foo')In <span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_listOut<span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">,</span> <span class="token string">'dwarf'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_list.remove('foo')In <span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b_listOut<span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">,</span> <span class="token string">'dwarf'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不考虑性能，使用<u>append和remove</u>，可以把Python的列表当做完美的“多重集”数据结构。</p><p>用in可以检查列表是否包含某个值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 'dwarf' in b_listOut<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>否定in可以再加一个not：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 'dwarf' not in b_listOut<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在列表中检查是否存在某个值远比字典和集合速度慢，因为Python是线性搜索列表中的值，但在字典和集合中，在同样的时间内还可以检查其它项（基于哈希表）。</p><h5 id="串联和组合列表"><a href="#串联和组合列表" class="headerlink" title="串联和组合列表"></a>串联和组合列表</h5><p>与元组类似，可以用加号将两个列表串联起来：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span> + <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> (2<span class="token punctuation">,</span> 3)<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> (2<span class="token punctuation">,</span> 3)<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果已经定义了一个列表，用extend方法可以追加多个元素：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x = <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x.extend(<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> (2<span class="token punctuation">,</span> 3)<span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span> xOut<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> (2<span class="token punctuation">,</span> 3)<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过加法将列表串联的计算量较大，因为要新建一个列表，并且要复制对象。用extend追加元素，尤其是到一个大列表中，更为可取。因此：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">everything = <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token key atrule">for chunk in list_of_lists</span><span class="token punctuation">:</span>    everything.extend(chunk)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>要比串联方法快：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">everything = <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token key atrule">for chunk in list_of_lists</span><span class="token punctuation">:</span>    everything = everything + chunk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><p>你可以用<u>sort函数</u>将一个列表原地排序（不创建新的对象）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a = <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a.sort()In <span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">]</span><span class="token punctuation">:</span> aOut<span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>sort有一些选项，有时会很好用。其中之一是<u>二级排序key</u>，可以用这个key进行排序。例如，我们可以按长度对字符串进行排序：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b = <span class="token punctuation">[</span><span class="token string">'saw'</span><span class="token punctuation">,</span> <span class="token string">'small'</span><span class="token punctuation">,</span> <span class="token string">'He'</span><span class="token punctuation">,</span> <span class="token string">'foxes'</span><span class="token punctuation">,</span> <span class="token string">'six'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b.sort(key=len)In <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bOut<span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'He'</span><span class="token punctuation">,</span> <span class="token string">'saw'</span><span class="token punctuation">,</span> <span class="token string">'six'</span><span class="token punctuation">,</span> <span class="token string">'small'</span><span class="token punctuation">,</span> <span class="token string">'foxes'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>稍后，我们会学习sorted函数，它可以产生一个排好序的序列副本。</p><h5 id="二分搜索和维护已排序的列表"><a href="#二分搜索和维护已排序的列表" class="headerlink" title="二分搜索和维护已排序的列表"></a>二分搜索和维护已排序的列表</h5><p><u>bisect模块支持二分查找</u>，和向已排序的列表插入值。bisect.bisect可以找到插入值后仍保证排序的位置，bisect.insort是向这个位置插入值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span> import bisectIn <span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c = <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bisect.bisect(c<span class="token punctuation">,</span> 2)Out<span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4</span>In <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bisect.bisect(c<span class="token punctuation">,</span> 5)Out<span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">6</span>In <span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bisect.insort(c<span class="token punctuation">,</span> 6)In <span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">:</span> cOut<span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>注意：bisect模块不会检查列表是否已排好序，进行检查的话会耗费大量计算。因此，对未排序的列表使用bisect不会产生错误，但结果不一定正确。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>用切边可以选取大多数序列类型的一部分，<u>切片的基本形式是在方括号中使用start:stop</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq = <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq<span class="token punctuation">[</span>1<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>切片也可以被序列赋值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq<span class="token punctuation">[</span>3<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> = <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seqOut<span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>切片的起始元素是包括的，<u>不包含结束元素</u>。因此，结果中包含的<u>元素个数是stop - start</u>。</p><p><u>start或stop都可以被省略，省略之后，分别默认序列的开头和结尾</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq<span class="token punctuation">[</span>3<span class="token punctuation">:</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><u>负数表明从后向前切片</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq<span class="token punctuation">[</span><span class="token punctuation">-</span>4<span class="token punctuation">:</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq<span class="token punctuation">[</span><span class="token punctuation">-</span>6<span class="token punctuation">:</span><span class="token number">-2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>需要一段时间来熟悉使用切片，尤其是当你之前学的是R或MATLAB。下图展示了正整数和负整数的切片。在图中，指数标示在边缘以表明切片是在哪里开始哪里结束的。</p><p><img src="https://tva1.sinaimg.cn/large/007mx13gly1guo30xjryij60yg0eswir02.jpg" alt="Python切片演示"></p><p>在<u>第二个冒号</u>后面使用<u>step</u>，可以隔一个取一个元素：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一个聪明的方法是<u>使用-1，它可以将列表或元组颠倒过来</u>：</p><pre><code>In [82]: seq[::-1]Out[82]: [1, 0, 6, 5, 3, 6, 3, 2, 7]</code></pre><h4 id="序列函数"><a href="#序列函数" class="headerlink" title="序列函数"></a>序列函数</h4><p>Python有一些有用的序列函数。</p><h5 id="enumerate函数"><a href="#enumerate函数" class="headerlink" title="enumerate函数"></a>enumerate函数</h5><p>迭代一个序列时，你可能想跟踪当前项的序号。手动的方法可能是下面这样：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">i = 0<span class="token key atrule">for value in collection</span><span class="token punctuation">:</span>   <span class="token comment"># do something with value</span>   i += 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为这么做很常见，Python内建了一个enumerate函数，可以返回(i, value)元组序列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">for i<span class="token punctuation">,</span> <span class="token key atrule">value in enumerate(collection)</span><span class="token punctuation">:</span>   <span class="token comment"># do something with value</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当你索引数据时，使用enumerate的一个好方法是计算序列（唯一的）dict映射到位置的值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">]</span><span class="token punctuation">:</span> some_list = <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mapping = <span class="token punctuation">{</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">85</span><span class="token punctuation">]</span><span class="token punctuation">:</span> for i<span class="token punctuation">,</span> <span class="token key atrule">v in enumerate(some_list)</span><span class="token punctuation">:</span>   <span class="token key atrule">....</span><span class="token punctuation">:</span>     mapping<span class="token punctuation">[</span>v<span class="token punctuation">]</span> = iIn <span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mappingOut<span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'bar'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token key atrule">'baz'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token key atrule">'foo'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="sorted函数"><a href="#sorted函数" class="headerlink" title="sorted函数"></a>sorted函数</h5><p>sorted函数可以从任意序列的元素返回一个新的排好序的列表：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sorted(<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sorted('horse race')Out<span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><u>sorted函数可以接受和sort相同的参数。</u></p><h5 id="zip函数"><a href="#zip函数" class="headerlink" title="zip函数"></a>zip函数</h5><p><u>zip可以将多个列表、元组或其它序列成对组合成一个元组列表</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq1 = <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq2 = <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">91</span><span class="token punctuation">]</span><span class="token punctuation">:</span> zipped = zip(seq1<span class="token punctuation">,</span> seq2)In <span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(zipped)Out<span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>('foo'<span class="token punctuation">,</span> 'one')<span class="token punctuation">,</span> ('bar'<span class="token punctuation">,</span> 'two')<span class="token punctuation">,</span> ('baz'<span class="token punctuation">,</span> 'three')<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>zip可以处理任意多的序列，元素的个数取决于最短的序列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seq3 = <span class="token punctuation">[</span><span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">True</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(zip(seq1<span class="token punctuation">,</span> seq2<span class="token punctuation">,</span> seq3))Out<span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>('foo'<span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> False)<span class="token punctuation">,</span> ('bar'<span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> True)<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>zip的常见用法之一是同时迭代多个序列，可能结合enumerate使用：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">:</span> for i<span class="token punctuation">,</span> (a<span class="token punctuation">,</span> b) in enumerate(zip(seq1<span class="token punctuation">,</span> <span class="token key atrule">seq2))</span><span class="token punctuation">:</span>   <span class="token key atrule">....</span><span class="token punctuation">:</span>     print('<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>'.format(i<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b))   <span class="token key atrule">....</span><span class="token punctuation">:</span><span class="token key atrule">0</span><span class="token punctuation">:</span> foo<span class="token punctuation">,</span> one<span class="token key atrule">1</span><span class="token punctuation">:</span> bar<span class="token punctuation">,</span> two<span class="token key atrule">2</span><span class="token punctuation">:</span> baz<span class="token punctuation">,</span> three<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给出一个“被压缩的”序列，zip可以被用来解压序列。也可以当作把行的列表转换为列的列表。这个方法看起来有点神奇：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pitchers = <span class="token punctuation">[</span>('Nolan'<span class="token punctuation">,</span> 'Ryan')<span class="token punctuation">,</span> ('Roger'<span class="token punctuation">,</span> 'Clemens')<span class="token punctuation">,</span>   <span class="token key atrule">....</span><span class="token punctuation">:</span>             ('Schilling'<span class="token punctuation">,</span> 'Curt')<span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">:</span> first_names<span class="token punctuation">,</span> last_names = zip(<span class="token important">*pitchers)</span>In <span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">:</span> first_namesOut<span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ('Nolan'<span class="token punctuation">,</span> <span class="token string">'Roger'</span><span class="token punctuation">,</span> 'Schilling')In <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">:</span> last_namesOut<span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ('Ryan'<span class="token punctuation">,</span> <span class="token string">'Clemens'</span><span class="token punctuation">,</span> 'Curt')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="reversed函数"><a href="#reversed函数" class="headerlink" title="reversed函数"></a>reversed函数</h5><p>reversed可以<u>从后向前迭代一个序列</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(reversed(range(10)))Out<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要记住<u>reversed是一个生成器</u>（后面详细介绍），只有<u>实体化（即列表或for循环）之后才能创建翻转的序列</u>。</p><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>字典可能是Python最为重要的数据结构。它更为常见的名字是<u>哈希映射或关联数组</u>。它是<u>键值对的大小可变集合</u>，键和值都是Python对象。<u>创建字典的方法之一是使用尖括号，用冒号分隔键和值</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">:</span> empty_dict = <span class="token punctuation">{</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1 = <span class="token punctuation">{</span><span class="token key atrule">'a'</span> <span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1Out<span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你可以像访问<u>列表或元组中的元素一样，访问、插入或设定字典中的元素</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> = 'an integer'In <span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1Out<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token key atrule">7</span><span class="token punctuation">:</span> <span class="token string">'an integer'</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以用<u>检查列表和元组是否包含某个值的方法，检查字典中是否包含某个键</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">107</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 'b' in d1Out<span class="token punctuation">[</span><span class="token number">107</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以用del关键字或pop方法（返回值的同时删除键）删除值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> = 'some value'In <span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1Out<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token key atrule">7</span><span class="token punctuation">:</span> <span class="token string">'an integer'</span><span class="token punctuation">,</span> <span class="token key atrule">5</span><span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1<span class="token punctuation">[</span><span class="token string">'dummy'</span><span class="token punctuation">]</span> = 'another value'In <span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1Out<span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token key atrule">7</span><span class="token punctuation">:</span> <span class="token string">'an integer'</span><span class="token punctuation">,</span> <span class="token key atrule">5</span><span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token key atrule">'dummy'</span><span class="token punctuation">:</span> <span class="token string">'another value'</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">112</span><span class="token punctuation">]</span><span class="token punctuation">:</span> del d1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">113</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1Out<span class="token punctuation">[</span><span class="token number">113</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token key atrule">7</span><span class="token punctuation">:</span> <span class="token string">'an integer'</span><span class="token punctuation">,</span> <span class="token key atrule">'dummy'</span><span class="token punctuation">:</span> <span class="token string">'another value'</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">114</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ret = d1.pop('dummy')In <span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">]</span><span class="token punctuation">:</span> retOut<span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'another value'</span>In <span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1Out<span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token key atrule">7</span><span class="token punctuation">:</span> <span class="token string">'an integer'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><u>keys和values是字典的键和值的迭代器方法</u>。虽然键值对没有顺序，这两个方法可以用相同的顺序输出键和值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(d1.keys())Out<span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(d1.values())Out<span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'an integer'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用update方法可以将一个字典与另一个融合：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">119</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1.update(<span class="token punctuation">{</span><span class="token key atrule">'b'</span> <span class="token punctuation">:</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token key atrule">'c'</span> <span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">}</span>)In <span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d1Out<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token string">'some value'</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token key atrule">7</span><span class="token punctuation">:</span> <span class="token string">'an integer'</span><span class="token punctuation">,</span> <span class="token key atrule">'c'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>update方法是原地改变字典，因此任何传递给update的键的旧的值都会被舍弃。</p><h5 id="用序列创建字典"><a href="#用序列创建字典" class="headerlink" title="用序列创建字典"></a>用序列创建字典</h5><p>常常，你可能想将<u>两个序列配对组合成字典</u>。下面是一种写法：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">mapping = <span class="token punctuation">{</span><span class="token punctuation">}</span>for key<span class="token punctuation">,</span> value in zip(key_list<span class="token punctuation">,</span> <span class="token key atrule">value_list)</span><span class="token punctuation">:</span>    mapping<span class="token punctuation">[</span>key<span class="token punctuation">]</span> = value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为<u>字典本质上是2元元组的集合</u>，dict可以接受2元元组的列表：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">121</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mapping = dict(zip(range(5)<span class="token punctuation">,</span> reversed(range(5))))In <span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mappingOut<span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">0</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token key atrule">1</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token key atrule">2</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token key atrule">3</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token key atrule">4</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="dict-函数"><a href="#dict-函数" class="headerlink" title="dict() 函数"></a>dict() 函数</h5><p>函数输入输出实例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#输入：</span>dict0 = dict()  <span class="token comment"># 传一个空字典</span>print('dict0<span class="token punctuation">:</span>'<span class="token punctuation">,</span> dict0)dict1 = dict(<span class="token punctuation">{</span><span class="token key atrule">'three'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token key atrule">'four'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span>)  <span class="token comment"># 传一个字典</span>print('dict1<span class="token punctuation">:</span>'<span class="token punctuation">,</span> dict1)dict2 = dict(five=5<span class="token punctuation">,</span> six=6)  <span class="token comment"># 传关键字</span>print('dict2<span class="token punctuation">:</span>'<span class="token punctuation">,</span> dict2)dict3 = dict(<span class="token punctuation">[</span>('seven'<span class="token punctuation">,</span> 7)<span class="token punctuation">,</span> ('eight'<span class="token punctuation">,</span> 8)<span class="token punctuation">]</span>)  <span class="token comment"># 传一个包含一个或多个元祖的列表</span>print('dict3<span class="token punctuation">:</span>'<span class="token punctuation">,</span> dict3)dict5 = dict(zip(<span class="token punctuation">[</span><span class="token string">'eleven'</span><span class="token punctuation">,</span> <span class="token string">'twelve'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span>))  <span class="token comment"># 传一个zip()函数</span>print('dict5<span class="token punctuation">:</span>'<span class="token punctuation">,</span> dict5)<span class="token comment">#输出：</span><span class="token key atrule">dict0</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">dict1</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'four'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token key atrule">'three'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token key atrule">dict2</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'five'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token key atrule">'six'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token key atrule">dict3</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'seven'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token key atrule">'eight'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token key atrule">dict5</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'twelve'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token key atrule">'eleven'</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面会谈到dict comprehensions，另一种构建字典的优雅方式。<br>默认值</p><p>下面的逻辑很常见：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">if key in some_dict</span><span class="token punctuation">:</span>    value = some_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token key atrule">else</span><span class="token punctuation">:</span>    value = default_value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因此，dict的方法get和pop可以取默认值进行返回，上面的if-else语句可以简写成下面：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">value = some_dict.get(key<span class="token punctuation">,</span> default_value)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>get默认会返回None，如果不存在键，pop会抛出一个例外。关于设定值，常见的情况是在字典的值是属于其它集合，如列表。例如，你可以通过首字母，将一个列表中的单词分类：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span> words = <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'atom'</span><span class="token punctuation">,</span> <span class="token string">'book'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span> by_letter = <span class="token punctuation">{</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">for word in words</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     letter = word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     <span class="token key atrule">if letter not in by_letter</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>         by_letter<span class="token punctuation">[</span>letter<span class="token punctuation">]</span> = <span class="token punctuation">[</span>word<span class="token punctuation">]</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     <span class="token key atrule">else</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>         by_letter<span class="token punctuation">[</span>letter<span class="token punctuation">]</span>.append(word)   <span class="token key atrule">.....</span><span class="token punctuation">:</span>In <span class="token punctuation">[</span><span class="token number">126</span><span class="token punctuation">]</span><span class="token punctuation">:</span> by_letterOut<span class="token punctuation">[</span><span class="token number">126</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'atom'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'book'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>setdefault方法就正是用于单词分类。前面的for循环可以改写为：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">for word in words</span><span class="token punctuation">:</span>    letter = word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    by_letter.setdefault(letter<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>).append(word)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>collections模块有一个很有用的类，defaultdict，它可以进一步简化上面。传递类型或函数以生成每个位置的默认值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">from collections import defaultdictby_letter = defaultdict(list)<span class="token key atrule">for word in words</span><span class="token punctuation">:</span>    by_letter<span class="token punctuation">[</span>word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>.append(word)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="如何使用defaultdict"><a href="#如何使用defaultdict" class="headerlink" title="如何使用defaultdict"></a>如何使用defaultdict</h5><p>defaultdict接受一个工厂函数作为参数，如下来构造：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">dict =defaultdict( factory_function)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个factory_function可以是list、set、str等等，作用是当key不存在时，返回的是工厂函数的默认值，比如list对应[ ]，str对应的是空字符串，set对应set( )，int对应0，如下举例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">from collections import defaultdictdict1 = defaultdict(int)dict2 = defaultdict(set)dict3 = defaultdict(str)dict4 = defaultdict(list)dict1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> ='two'print(dict1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>)print(dict2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>)print(dict3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>)print(dict4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>)<span class="token comment">#输出为</span>0set()<span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="有效的键类型"><a href="#有效的键类型" class="headerlink" title="有效的键类型"></a>有效的键类型</h5><p>字典的值可以是任意Python对象，而键通常是不可变的标量类型（<u>整数、浮点型、字符串</u>）或<u>元组（元组中的对象必须是不可变的）</u>，这被称为“可哈希性。可以用<u>hash函数可检测一个对象是否是可哈希的</u>（可被用作字典的键）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">:</span> hash('string')Out<span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">5023931463650008331</span>In <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">:</span> hash((1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> (2<span class="token punctuation">,</span> 3)))Out<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1097636502276347782</span>In <span class="token punctuation">[</span><span class="token number">129</span><span class="token punctuation">]</span><span class="token punctuation">:</span> hash((1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>)) <span class="token comment"># fails because lists are mutable</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>TypeError                                 Traceback (most recent call last)&lt;ipython<span class="token punctuation">-</span>input<span class="token punctuation">-</span>129<span class="token punctuation">-</span>800cd14ba8be<span class="token punctuation">&gt;</span> in &lt;module<span class="token punctuation">&gt;</span>()<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 1 hash((1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>)) <span class="token comment"># fails because lists are mutable</span><span class="token key atrule">TypeError</span><span class="token punctuation">:</span> <span class="token key atrule">unhashable type</span><span class="token punctuation">:</span> <span class="token string">'list'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要用列表当做键，一种方法是将列表转化为元组，只要内部元素可以被哈希，它也就可以被哈希：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">130</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d = <span class="token punctuation">{</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">131</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d<span class="token punctuation">[</span>tuple(<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>)<span class="token punctuation">]</span> = 5In <span class="token punctuation">[</span><span class="token number">132</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dOut<span class="token punctuation">[</span><span class="token number">132</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>(1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token key atrule">3)</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>集合是<u>无序的不可重复的元素的集合</u>。你可以把它当做<u>字典，但是只有键没有值</u>。可以用两种方式创建集合：通过set函数或使用尖括号set语句：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">133</span><span class="token punctuation">]</span><span class="token punctuation">:</span> set(<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">133</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">134</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>Out<span class="token punctuation">[</span><span class="token number">134</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>集合支持<u>合并、交集、差分和对称差等数学集合运算</u>。考虑两个示例集合：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">135</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a = <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">136</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b = <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>合并是取两个集合中不重复的元素。可以用union方法，或者|运算符：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a.union(b)Out<span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">138</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token punctuation">|</span> bOut<span class="token punctuation">[</span><span class="token number">138</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>交集的元素包含在两个集合中。可以用intersection或&amp;运算符：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">139</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a.intersection(b)Out<span class="token punctuation">[</span><span class="token number">139</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a &amp; bOut<span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/007mx13gly1guoajywdctj60jb0cj7a902.jpg" alt="常用的集合方法">。</p><p>所有逻辑集合操作都有另外的原地实现方法，可以直接用结果替代集合的内容。对于大的集合，这么做效率更高：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">141</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c = a.copy()In <span class="token punctuation">[</span><span class="token number">142</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c <span class="token punctuation">|</span>= bIn <span class="token punctuation">[</span><span class="token number">143</span><span class="token punctuation">]</span><span class="token punctuation">:</span> cOut<span class="token punctuation">[</span><span class="token number">143</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">144</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d = a.copy()In <span class="token punctuation">[</span><span class="token number">145</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d <span class="token important">&amp;=</span> bIn <span class="token punctuation">[</span><span class="token number">146</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dOut<span class="token punctuation">[</span><span class="token number">146</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与字典类似，<u>集合元素通常都是不可变的</u>。要获得类似列表的元素，必须转换成元组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">147</span><span class="token punctuation">]</span><span class="token punctuation">:</span> my_data = <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">148</span><span class="token punctuation">]</span><span class="token punctuation">:</span> my_set = <span class="token punctuation">{</span>tuple(my_data)<span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">149</span><span class="token punctuation">]</span><span class="token punctuation">:</span> my_setOut<span class="token punctuation">[</span><span class="token number">149</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>(1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> 4)<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你使用issubset还可以检测一个集合是否是另一个集合的子集或父集：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a_set = <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">151</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>.issubset(a_set)Out<span class="token punctuation">[</span><span class="token number">151</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>In <span class="token punctuation">[</span><span class="token number">152</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a_set.issuperset(<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>)Out<span class="token punctuation">[</span><span class="token number">152</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>集合的内容相同时，集合才对等：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">153</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span> == <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span>Out<span class="token punctuation">[</span><span class="token number">153</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="列表、集合和字典推导式"><a href="#列表、集合和字典推导式" class="headerlink" title="列表、集合和字典推导式"></a>列表、集合和字典推导式</h4><p><u>列表推导式</u>是Python最受喜爱的特性之一。它允许用户方便的从一个集合过滤元素，形成列表，在传递参数的过程中还可以修改元素。形式如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>expr for val in collection if condition<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它等同于下面的for循环;</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">result = <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token key atrule">for val in collection</span><span class="token punctuation">:</span>    <span class="token key atrule">if condition</span><span class="token punctuation">:</span>        result.append(expr)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>filter条件可以被忽略，只留下表达式就行。例如，给定一个字符串列表，我们可以过滤出长度在2及以下的字符串，并将其转换成大写：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">154</span><span class="token punctuation">]</span><span class="token punctuation">:</span> strings = <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'as'</span><span class="token punctuation">,</span> <span class="token string">'bat'</span><span class="token punctuation">,</span> <span class="token string">'car'</span><span class="token punctuation">,</span> <span class="token string">'dove'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">155</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>x.upper() for x in strings if len(x) <span class="token punctuation">&gt;</span> 2<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">155</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'BAT'</span><span class="token punctuation">,</span> <span class="token string">'CAR'</span><span class="token punctuation">,</span> <span class="token string">'DOVE'</span><span class="token punctuation">,</span> <span class="token string">'PYTHON'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用相似的方法，还可以推导集合和字典。<u>字典的推导式</u>如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">dict_comp = <span class="token punctuation">{</span><span class="token key atrule">key-expr</span> <span class="token punctuation">:</span> value<span class="token punctuation">-</span>expr for value in collection if condition<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><u>集合的推导式</u>与列表很像，只不过用的是<u>尖括号</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">set_comp = <span class="token punctuation">{</span>expr for value in collection if condition<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与列表推导式类似，集合与字典的推导也很方便，而且使代码的读写都很容易。来看前面的字符串列表。假如我们只想要字符串的长度，用集合推导式的方法非常方便：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">156</span><span class="token punctuation">]</span><span class="token punctuation">:</span> unique_lengths = <span class="token punctuation">{</span>len(x) for x in strings<span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">157</span><span class="token punctuation">]</span><span class="token punctuation">:</span> unique_lengthsOut<span class="token punctuation">[</span><span class="token number">157</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>map函数可以进一步简化：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">158</span><span class="token punctuation">]</span><span class="token punctuation">:</span> set(map(len<span class="token punctuation">,</span> strings))Out<span class="token punctuation">[</span><span class="token number">158</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>map()是一个 Python 内建函数，它允许你不需要使用循环就可以编写简洁的代码，具体用法参考[Python Map 函数的使用](<a href="https://zhuanlan.zhihu.com/p/205466485">Python Map 函数的使用 - 知乎 (zhihu.com)</a>)，基本用法为：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">map(function<span class="token punctuation">,</span> iterable<span class="token punctuation">,</span> <span class="token punctuation">...</span>)<span class="token comment">#function` - 针对每一个迭代调用的函数</span><span class="token comment">#iterable` - 支持迭代的一个或者多个对象。在 Python 中大部分内建对象，例如 lists, dictionaries, 和 tuples 都是可迭代的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>作为一个字典推导式的例子，我们可以创建一个字符串的查找映射表以确定它在列表中的位置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">159</span><span class="token punctuation">]</span><span class="token punctuation">:</span> loc_mapping = <span class="token punctuation">{</span><span class="token key atrule">val</span> <span class="token punctuation">:</span> index for index<span class="token punctuation">,</span> val in enumerate(strings)<span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">160</span><span class="token punctuation">]</span><span class="token punctuation">:</span> loc_mappingOut<span class="token punctuation">[</span><span class="token number">160</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token key atrule">'as'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token key atrule">'bat'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token key atrule">'car'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token key atrule">'dove'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token key atrule">'python'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="嵌套列表推导式"><a href="#嵌套列表推导式" class="headerlink" title="嵌套列表推导式"></a>嵌套列表推导式</h4><p>假设我们有一个包含列表的列表，包含了一些英文名和西班牙名：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">161</span><span class="token punctuation">]</span><span class="token punctuation">:</span> all_data = <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'John'</span><span class="token punctuation">,</span> <span class="token string">'Emily'</span><span class="token punctuation">,</span> <span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token string">'Mary'</span><span class="token punctuation">,</span> <span class="token string">'Steven'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>             <span class="token punctuation">[</span><span class="token string">'Maria'</span><span class="token punctuation">,</span> <span class="token string">'Juan'</span><span class="token punctuation">,</span> <span class="token string">'Javier'</span><span class="token punctuation">,</span> <span class="token string">'Natalia'</span><span class="token punctuation">,</span> <span class="token string">'Pilar'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你可能是从一些文件得到的这些名字，然后想按照语言进行分类。现在假设我们想用一个列表包含所有的名字，这些名字中包含两个或更多的e。可以用for循环来做：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">names_of_interest = <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token key atrule">for names in all_data</span><span class="token punctuation">:</span>    enough_es = <span class="token punctuation">[</span>name for name in names if name.count('e') <span class="token punctuation">&gt;</span>= 2<span class="token punctuation">]</span>    names_of_interest.extend(enough_es)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以用嵌套列表推导式的方法，将这些写在一起，如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">162</span><span class="token punctuation">]</span><span class="token punctuation">:</span> result = <span class="token punctuation">[</span>name for names in all_data for name in names   <span class="token key atrule">.....</span><span class="token punctuation">:</span>           if name.count('e') <span class="token punctuation">&gt;</span>= 2<span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">163</span><span class="token punctuation">]</span><span class="token punctuation">:</span> resultOut<span class="token punctuation">[</span><span class="token number">163</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Steven'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>嵌套列表推导式看起来有些复杂。列表推导式的for部分是根据嵌套的顺序，过滤条件还是放在最后。下面是另一个例子，我们将一个整数元组的列表扁平化成了一个整数列表：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">164</span><span class="token punctuation">]</span><span class="token punctuation">:</span> some_tuples = <span class="token punctuation">[</span>(1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> 3)<span class="token punctuation">,</span> (4<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> 6)<span class="token punctuation">,</span> (7<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> 9)<span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">165</span><span class="token punctuation">]</span><span class="token punctuation">:</span> flattened = <span class="token punctuation">[</span>x for tup in some_tuples for x in tup<span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">166</span><span class="token punctuation">]</span><span class="token punctuation">:</span> flattenedOut<span class="token punctuation">[</span><span class="token number">166</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>记住，for表达式的顺序是与嵌套for循环的顺序一样（而不是列表推导式的顺序）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">flattened = <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token key atrule">for tup in some_tuples</span><span class="token punctuation">:</span>    <span class="token key atrule">for x in tup</span><span class="token punctuation">:</span>        flattened.append(x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你可以有任意多级别的嵌套，但是如果你有两三个以上的嵌套，你就应该考虑下代码可读性的问题了。分辨列表推导式的列表推导式中的语法也是很重要的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">167</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>x for x in tup<span class="token punctuation">]</span> for tup in some_tuples<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">167</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这段代码产生了一个列表的列表，而不是扁平化的只包含元素的列表。</p><h3 id="3-2-函数"><a href="#3-2-函数" class="headerlink" title="3.2 函数"></a><a href="https://www.bookstack.cn/read/pyda-2e-zh/3.2.md">3.2 函数</a></h3><p>函数是Python中最主要也是最重要的代码组织和复用手段。作为最重要的原则，如果你要重复使用相同或非常类似的代码，就需要写一个函数。通过给函数起一个名字，还可以提高代码的可读性。</p><p>函数使用<code>def</code>关键字声明，用<code>return</code>关键字返回值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">def my_function(x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token key atrule">z=1.5)</span><span class="token punctuation">:</span>    <span class="token key atrule">if z &gt; 1</span><span class="token punctuation">:</span>        return z * (x + y)    <span class="token key atrule">else</span><span class="token punctuation">:</span>        return z / (x + y)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时拥有多条<code>return</code>语句也是可以的。如果到达函数末尾时没有遇到任何一条<code>return</code>语句，则返回<code>None</code>。</p><p>函数可以有一些位置参数（<code>positional</code>）和一些关键字参数（<code>keyword</code>）。<u>关键字参数通常用于指定默认值或可选参数</u>。在上面的函数中，<u>x和y是位置参数，而z则是关键字参数</u>。也就是说，该函数可以下面这3种方式进行调用：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">my_function(5<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> z=0.7)my_function(3.14<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> 3.5)my_function(10<span class="token punctuation">,</span> 20)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><u>函数参数的主要限制在于：关键字参数必须位于位置参数（如果有的话）之后。</u>你可以任何顺序指定关键字参数。也就是说，你不用死记硬背函数参数的顺序，只要记得它们的名字就可以了。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#笔记：也可以用"关键字传递位置参数"。前面的例子，也可以写为：</span>    my_function(x=5<span class="token punctuation">,</span> y=6<span class="token punctuation">,</span> z=7)    my_function(y=6<span class="token punctuation">,</span> x=5<span class="token punctuation">,</span> z=7)<span class="token comment">#这种写法可以提高可读性。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="命名空间、作用域，和局部函数"><a href="#命名空间、作用域，和局部函数" class="headerlink" title="命名空间、作用域，和局部函数"></a>命名空间、作用域，和局部函数</h4><p>函数可以访问两种不同作用域中的变量：<u>全局（global）和局部（local）</u>。Python有一种更科学的<u>用于描述变量作用域的名称，即命名空间（namespace）</u>。任何<u>在函数中赋值的变量</u>默认都是被分配到<u>局部命名空间</u>（local namespace）中的。局部命名空间是在函数被调用时创建的，函数参数会立即填入该命名空间。在函数执行完毕之后，局部命名空间就会被销毁（会有一些例外的情况，具体请参见后面介绍闭包的那一节）。看看下面这个函数：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def func()</span><span class="token punctuation">:</span>    a = <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">for i in range(5)</span><span class="token punctuation">:</span>        a.append(i)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>调用<code>func()</code>之后，首先会创建出空列表a，然后添加5个元素，最后a会在该函数退出的时候被销毁。假如我们像下面这样定义a：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">a = <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token key atrule">def func()</span><span class="token punctuation">:</span>    <span class="token key atrule">for i in range(5)</span><span class="token punctuation">:</span>        a.append(i)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>虽然可以在函数中对全局变量进行赋值操作，但是那些变量必须用global关键字声明成全局的才行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">168</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a = NoneIn <span class="token punctuation">[</span><span class="token number">169</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">def bind_a_variable()</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     global a   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     a = <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span> bind_a_variable()   <span class="token key atrule">.....</span><span class="token punctuation">:</span>In <span class="token punctuation">[</span><span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">:</span> print(a)<span class="token punctuation">[</span><span class="token punctuation">]</span>注意：我常常建议人们不要频繁使用global关键字。因为全局变量一般是用于存放系统的某些状态的。如果你发现自己用了很多，那可能就说明得要来点儿面向对象编程了（即使用类）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h4><p>在我第一次用Python编程时（之前已经习惯了Java和C++），最喜欢的一个功能是：函数可以返回多个值。下面是一个简单的例子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def f()</span><span class="token punctuation">:</span>    a = 5    b = 6    c = 7    return a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> ca<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c = f()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在数据分析和其他科学计算应用中，你会发现自己常常这么干。该函数其实只返回了一个对象，也就是一个元组，最后该元组会被拆包到各个结果变量中。在上面的例子中，我们还可以这样写：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">return_value = f()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的return_value将会是一个含有3个返回值的三元元组。此外，还有一种非常具有吸引力的多值返回方式——返回字典：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def f()</span><span class="token punctuation">:</span>    a = 5    b = 6    c = 7    return <span class="token punctuation">{</span><span class="token key atrule">'a'</span> <span class="token punctuation">:</span> a<span class="token punctuation">,</span> <span class="token key atrule">'b'</span> <span class="token punctuation">:</span> b<span class="token punctuation">,</span> <span class="token key atrule">'c'</span> <span class="token punctuation">:</span> c<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>取决于工作内容，第二种方法可能很有用。</p><h4 id="函数也是对象"><a href="#函数也是对象" class="headerlink" title="函数也是对象"></a>函数也是对象</h4><p>由于Python函数都是对象(<a href="https://zhuanlan.zhihu.com/p/75265007">2分钟让你明白什么是面向对象编程 - 知乎 (zhihu.com)</a>)，因此，在其他语言中较难表达的一些设计思想在Python中就要简单很多了。假设我们有下面这样一个字符串数组，希望对其进行一些数据清理工作并执行一堆转换：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">171</span><span class="token punctuation">]</span><span class="token punctuation">:</span> states = <span class="token punctuation">[</span><span class="token string">'   Alabama '</span><span class="token punctuation">,</span> <span class="token string">'Georgia!'</span><span class="token punctuation">,</span> <span class="token string">'Georgia'</span><span class="token punctuation">,</span> <span class="token string">'georgia'</span><span class="token punctuation">,</span> <span class="token string">'FlOrIda'</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>           <span class="token string">'south   carolina##'</span><span class="token punctuation">,</span> <span class="token string">'West virginia?'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不管是谁，只要处理过由用户提交的调查数据，就能明白这种乱七八糟的数据是怎么一回事。为了得到一组能用于分析工作的格式统一的字符串，需要做很多事情：去除空白符、删除各种标点符号、正确的大写格式等。做法之一是使用内建的字符串方法和正则表达式re模块(<a href="http://www.itwangqing.net.cn/15623206542335.html#:~:text=%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88RE,%E8%BF%87re%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0%E3%80%82">可参考正则表达式re模块 </a>)：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">import re<span class="token key atrule">def clean_strings(strings)</span><span class="token punctuation">:</span>    result = <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">for value in strings</span><span class="token punctuation">:</span>        value = value.strip()        value = re.sub('<span class="token punctuation">[</span><span class="token tag">!</span><span class="token comment">#?]', '', value)</span>        value = value.title()<span class="token comment">#</span>        result.append(value)    return result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>strip</code>方法的功能为移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。其语法与实例为（可参考<a href="https://www.runoob.com/python/att-string-strip.html">Python strip()方法)</a>）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#语法</span>str.strip(<span class="token punctuation">[</span>chars<span class="token punctuation">]</span>);<span class="token comment">#实例</span>str = "00000003210Runoob01230000000"; print str.strip( '0' );  <span class="token comment"># 去除首尾字符 0</span>str2 = "   Runoob      ";   <span class="token comment"># 去除首尾空格</span>print str2.strip();<span class="token comment">#输出：</span>3210Runoob0123Runoob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>title</code>方法返回”标题化”的字符串,就是说所有单词的首个字母转化为大写，其余字母均为小写，用法为：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">str.title();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">173</span><span class="token punctuation">]</span><span class="token punctuation">:</span> clean_strings(states)Out<span class="token punctuation">[</span><span class="token number">173</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alabama'</span><span class="token punctuation">,</span> <span class="token string">'Georgia'</span><span class="token punctuation">,</span> <span class="token string">'Georgia'</span><span class="token punctuation">,</span> <span class="token string">'Georgia'</span><span class="token punctuation">,</span> <span class="token string">'Florida'</span><span class="token punctuation">,</span> <span class="token string">'South   Carolina'</span><span class="token punctuation">,</span> <span class="token string">'West Virginia'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实还有另外一种不错的办法：将<u>需要在一组给定字符串上执行的所有运算做成一个列表，再将列表中的运算一个一个执行</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def remove_punctuation(value)</span><span class="token punctuation">:</span>    return re.sub('<span class="token punctuation">[</span><span class="token tag">!</span><span class="token comment">#?]', '', value)</span>clean_ops = <span class="token punctuation">[</span>str.strip<span class="token punctuation">,</span> remove_punctuation<span class="token punctuation">,</span> str.title<span class="token punctuation">]</span>def clean_strings(strings<span class="token punctuation">,</span> <span class="token key atrule">ops)</span><span class="token punctuation">:</span>    result = <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">for value in strings</span><span class="token punctuation">:</span>        <span class="token key atrule">for function in ops</span><span class="token punctuation">:</span>            value = function(value)        result.append(value)    return result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们就有了：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">175</span><span class="token punctuation">]</span><span class="token punctuation">:</span> clean_strings(states<span class="token punctuation">,</span> clean_ops)Out<span class="token punctuation">[</span><span class="token number">175</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alabama'</span><span class="token punctuation">,</span> <span class="token string">'Georgia'</span><span class="token punctuation">,</span> <span class="token string">'Georgia'</span><span class="token punctuation">,</span> <span class="token string">'Georgia'</span><span class="token punctuation">,</span> <span class="token string">'Florida'</span><span class="token punctuation">,</span> <span class="token string">'South   Carolina'</span><span class="token punctuation">,</span> <span class="token string">'West Virginia'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种多函数模式使你能在很高的层次上轻松修改字符串的转换方式。此时的clean_strings也更具可复用性！</p><p>还可以将函数用作其他函数的参数，比如内置的<code>map</code>函数，它用于<u>在一组数据上应用一个函数</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">176</span><span class="token punctuation">]</span><span class="token punctuation">:</span> for x in map(remove_punctuation<span class="token punctuation">,</span> <span class="token key atrule">states)</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     print(x)Alabama GeorgiaGeorgiageorgiaFlOrIdasouth   carolinaWest virginia<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="匿名（lambda）函数"><a href="#匿名（lambda）函数" class="headerlink" title="匿名（lambda）函数"></a>匿名（lambda）函数</h4><p>Python支持一种被称为匿名的、或<code>lambda</code>函数。<u>它仅由单条语句组成，该语句的结果就是返回值</u>。它是通过<code>lambda</code>关键字定义的，<u>这个关键字没有别的含义，仅仅是说“我们正在声明的是一个匿名函数”</u>。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def short_function(x)</span><span class="token punctuation">:</span>    return x * 2<span class="token key atrule">equiv_anon = lambda x</span><span class="token punctuation">:</span> x * 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>本书其余部分一般将其称为lambda函数。它们在数据分析工作中非常方便，因为你会发现很多数据转换函数都以函数作为参数的。<u>直接传入lambda函数比编写完整函数声明要少输入很多字（也更清晰）</u>，甚至比将<code>lambda</code>函数赋值给一个变量还要少输入很多字。看看下面这个简单得有些傻的例子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">def apply_to_list(some_list<span class="token punctuation">,</span> <span class="token key atrule">f)</span><span class="token punctuation">:</span>    return <span class="token punctuation">[</span>f(x) for x in some_list<span class="token punctuation">]</span>ints = <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>apply_to_list(ints<span class="token punctuation">,</span> <span class="token key atrule">lambda x</span><span class="token punctuation">:</span> x * 2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>虽然你可以直接编写<code>[x *2for x in ints]</code>，但是这里我们可以非常轻松地传入一个自定义运算给apply_to_list函数。</p><p>再来看另外一个例子。假设有一组字符串，你想要根据各字符串不同字母的数量对其进行排序：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">177</span><span class="token punctuation">]</span><span class="token punctuation">:</span> strings = <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'card'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">,</span> <span class="token string">'abab'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里，我们可以传入一个lambda函数到列表的sort方法：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">strings.sort(key=lambda x</span><span class="token punctuation">:</span> len(set(list(x)))) <span class="token comment">#字符串中的不同的字符数目</span>In <span class="token punctuation">[</span><span class="token number">179</span><span class="token punctuation">]</span><span class="token punctuation">:</span> stringsOut<span class="token punctuation">[</span><span class="token number">179</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'aaaa'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'abab'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'card'</span><span class="token punctuation">]</span><span class="token comment">#笔记：lambda函数之所以会被称为匿名函数，与def声明的函数不同，原因之一就是这种函数对象本身是没有提供名称name属性。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="柯里化：部分参数应用"><a href="#柯里化：部分参数应用" class="headerlink" title="柯里化：部分参数应用"></a>柯里化：部分参数应用</h4><p>柯里化（currying）是一个有趣的计算机科学术语，它指的是通过“部分参数应用”（partial argument application）从现有函数派生出新函数的技术。例如，假设我们有一个执行两数相加的简单函数：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">def add_numbers(x<span class="token punctuation">,</span> <span class="token key atrule">y)</span><span class="token punctuation">:</span>    return x + y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过这个函数，我们可以派生出一个新的只有一个参数的函数——add_five，它用于对其参数加5：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">add_five = lambda y</span><span class="token punctuation">:</span> add_numbers(5<span class="token punctuation">,</span> y)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>add_numbers的第二个参数称为“柯里化的”（curried）。这里没什么特别花哨的东西，因为我们其实就只是定义了一个可以调用现有函数的新函数而已。内置的<code>functools</code>模块可以用partial函数将此过程简化：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">from functools import partialadd_five = partial(add_numbers<span class="token punctuation">,</span> 5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p>能以一种一致的方式对序列进行迭代（比如列表中的对象或文件中的行）是Python的一个重要特点。这是通过一种叫做迭代器协议（iterator protocol，它是一种使对象可迭代的通用方式）的方式实现的，一个原生的使对象可迭代的方法。比如说，对字典进行迭代可以得到其所有的键：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">:</span> some_dict = <span class="token punctuation">{</span><span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token key atrule">'c'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">181</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">for key in some_dict</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     print(key)abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当你编写<code>for key in some_dict</code>时，Python解释器首先会尝试从some_dict创建一个迭代器：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">182</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dict_iterator = iter(some_dict)In <span class="token punctuation">[</span><span class="token number">183</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dict_iteratorOut<span class="token punctuation">[</span><span class="token number">183</span><span class="token punctuation">]</span><span class="token punctuation">:</span> &lt;dict_keyiterator at 0x7fbbd5a9f908<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>迭代器是一种特殊对象，它可以在诸如for循环之类的上下文中向Python解释器输送对象。大部分能接受列表之类的对象的方法也都可以接受任何可迭代对象。比如<code>min、max、sum</code>等内置方法以及<code>list、tuple</code>等类型构造器：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">184</span><span class="token punctuation">]</span><span class="token punctuation">:</span> list(dict_iterator)Out<span class="token punctuation">[</span><span class="token number">184</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成器（generator）是构造新的可迭代对象的一种简单方式。一般的函数执行之后只会返回单个值，而生成器则是<u>以延迟的方式返回一个值序列，即每返回一个值之后暂停，直到下一个值被请求时再继续</u>。要创建一个生成器，只需将函数中的<code>return</code>替换为<code>yeild</code>即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def squares(n=10)</span><span class="token punctuation">:</span>    print('Generating squares from 1 to <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>'.format(n <span class="token important">**</span> 2))    for i in range(1<span class="token punctuation">,</span> <span class="token key atrule">n + 1)</span><span class="token punctuation">:</span>        yield i <span class="token important">**</span> 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>调用该生成器时，没有任何代码会被立即执行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">186</span><span class="token punctuation">]</span><span class="token punctuation">:</span> gen = squares()In <span class="token punctuation">[</span><span class="token number">187</span><span class="token punctuation">]</span><span class="token punctuation">:</span> genOut<span class="token punctuation">[</span><span class="token number">187</span><span class="token punctuation">]</span><span class="token punctuation">:</span> &lt;generator object squares at 0x7fbbd5ab4570<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直到你从<u>该生成器中请求元素</u>时，它才会开始执行其代码：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">188</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">for x in gen</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     print(x<span class="token punctuation">,</span> end=' ')Generating squares from 1 to 1001 4 9 16 25 36 49 64 81 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h5><p>另一种更简洁的构造生成器的方法是使用生成器表达式（generator expression）。<u>这是一种类似于列表、字典、集合推导式的生成器。其创建方式为，把列表推导式两端的方括号改成圆括号</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">189</span><span class="token punctuation">]</span><span class="token punctuation">:</span> gen = (x <span class="token important">**</span> 2 for x in range(100))In <span class="token punctuation">[</span><span class="token number">190</span><span class="token punctuation">]</span><span class="token punctuation">:</span> genOut<span class="token punctuation">[</span><span class="token number">190</span><span class="token punctuation">]</span><span class="token punctuation">:</span> &lt;generator object &lt;genexpr<span class="token punctuation">&gt;</span> at 0x7fbbd5ab29e8<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>它跟下面这个冗长得多的生成器是完全等价的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def _make_gen()</span><span class="token punctuation">:</span>    <span class="token key atrule">for x in range(100)</span><span class="token punctuation">:</span>        yield x <span class="token important">**</span> 2gen = _make_gen()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>生成器表达式也可以取代列表推导式，作为函数参数：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">191</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sum(x <span class="token important">**</span> 2 for x in range(100))Out<span class="token punctuation">[</span><span class="token number">191</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">328350</span>In <span class="token punctuation">[</span><span class="token number">192</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dict((i<span class="token punctuation">,</span> i <span class="token important">**2)</span> for i in range(5))Out<span class="token punctuation">[</span><span class="token number">192</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">0</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token key atrule">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token key atrule">2</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token key atrule">3</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token key atrule">4</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="itertools模块"><a href="#itertools模块" class="headerlink" title="itertools模块"></a><code>itertools</code>模块</h5><p>标准库<code>itertools</code>模块中有一组用于许多常见数据算法的生成器。例如，<code>groupby</code>可以接受任何序列和一个函数。它根据函数的返回值对序列中的连续元素进行分组。下面是一个例子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">193</span><span class="token punctuation">]</span><span class="token punctuation">:</span> import itertoolsIn <span class="token punctuation">[</span><span class="token number">194</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">first_letter = lambda x</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">195</span><span class="token punctuation">]</span><span class="token punctuation">:</span> names = <span class="token punctuation">[</span><span class="token string">'Alan'</span><span class="token punctuation">,</span> <span class="token string">'Adam'</span><span class="token punctuation">,</span> <span class="token string">'Wes'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">,</span> <span class="token string">'Albert'</span><span class="token punctuation">,</span> <span class="token string">'Steven'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">196</span><span class="token punctuation">]</span><span class="token punctuation">:</span> for letter<span class="token punctuation">,</span> names in itertools.groupby(names<span class="token punctuation">,</span> <span class="token key atrule">first_letter)</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     print(letter<span class="token punctuation">,</span> list(names)) <span class="token comment"># names is a generator</span>A <span class="token punctuation">[</span><span class="token string">'Alan'</span><span class="token punctuation">,</span> <span class="token string">'Adam'</span><span class="token punctuation">]</span>W <span class="token punctuation">[</span><span class="token string">'Wes'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">]</span>A <span class="token punctuation">[</span><span class="token string">'Albert'</span><span class="token punctuation">]</span>S <span class="token punctuation">[</span><span class="token string">'Steven'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下表中列出了一些我经常用到的<code>itertools</code>函数。建议参阅Python官方文档，进一步学习。</p><p><img src="https://tvax3.sinaimg.cn/large/007mx13gly1guomv4yveej60jc06pac302.jpg" alt="一些有用的itertools函数"></p><h4 id="错误和异常处理"><a href="#错误和异常处理" class="headerlink" title="错误和异常处理"></a>错误和异常处理</h4><p>优雅地处理Python的错误和异常是构建健壮程序的重要部分。在数据分析中，许多函数函数只用于部分输入。例如，Python的<code>float</code>函数可以将字符串转换成浮点数，但输入有误时，有ValueError错误：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">197</span><span class="token punctuation">]</span><span class="token punctuation">:</span> float('1.2345')Out<span class="token punctuation">[</span><span class="token number">197</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1.2345</span>In <span class="token punctuation">[</span><span class="token number">198</span><span class="token punctuation">]</span><span class="token punctuation">:</span> float('something')<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>ValueError                                Traceback (most recent call last)&lt;ipython<span class="token punctuation">-</span>input<span class="token punctuation">-</span>198<span class="token punctuation">-</span>439904410854<span class="token punctuation">&gt;</span> in &lt;module<span class="token punctuation">&gt;</span>()<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 1 float('something')<span class="token key atrule">ValueError</span><span class="token punctuation">:</span> <span class="token key atrule">could not convert string to float</span><span class="token punctuation">:</span> <span class="token string">'something'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假如想优雅地处理<code>float</code>的错误，让它返回输入值。我们可以写一个函数，在try/except中调用float：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def attempt_float(x)</span><span class="token punctuation">:</span>    <span class="token key atrule">try</span><span class="token punctuation">:</span>        return float(x)    <span class="token key atrule">except</span><span class="token punctuation">:</span>        return x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当<code>float(x)</code>抛出异常时，才会执行<code>except</code>的部分：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">:</span> attempt_float('1.2345')Out<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1.2345</span>In <span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span><span class="token punctuation">:</span> attempt_float('something')Out<span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'something'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你可能注意到float抛出的异常不仅是<code>ValueError</code>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">:</span> float((1<span class="token punctuation">,</span> 2))<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>TypeError                                 Traceback (most recent call last)&lt;ipython<span class="token punctuation">-</span>input<span class="token punctuation">-</span>202<span class="token punctuation">-</span>842079ebb635<span class="token punctuation">&gt;</span> in &lt;module<span class="token punctuation">&gt;</span>()<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 1 float((1<span class="token punctuation">,</span> 2))<span class="token key atrule">TypeError</span><span class="token punctuation">:</span> float() argument must be a string or a number<span class="token punctuation">,</span> not 'tuple'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可能只想处理<code>ValueError，TypeError</code>错误（输入不是字符串或数值）可能是合理的bug。可以写一个异常类型：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def attempt_float(x)</span><span class="token punctuation">:</span>    <span class="token key atrule">try</span><span class="token punctuation">:</span>        return float(x)    <span class="token key atrule">except ValueError</span><span class="token punctuation">:</span>        return x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后有：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">204</span><span class="token punctuation">]</span><span class="token punctuation">:</span> attempt_float((1<span class="token punctuation">,</span> 2))<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>TypeError                                 Traceback (most recent call last)&lt;ipython<span class="token punctuation">-</span>input<span class="token punctuation">-</span>204<span class="token punctuation">-</span>9bdfd730cead<span class="token punctuation">&gt;</span> in &lt;module<span class="token punctuation">&gt;</span>()<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 1 attempt_float((1<span class="token punctuation">,</span> 2))&lt;ipython<span class="token punctuation">-</span>input<span class="token punctuation">-</span>203<span class="token punctuation">-</span>3e06b8379b6b<span class="token punctuation">&gt;</span> in attempt_float(x)      <span class="token key atrule">1 def attempt_float(x)</span><span class="token punctuation">:</span>      <span class="token key atrule">2     try</span><span class="token punctuation">:</span><span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 3         return float(x)      <span class="token key atrule">4     except ValueError</span><span class="token punctuation">:</span>      5         return x<span class="token key atrule">TypeError</span><span class="token punctuation">:</span> float() argument must be a string or a number<span class="token punctuation">,</span> not 'tuple'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以用<u>元组包含多个异常</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">def attempt_float(x)</span><span class="token punctuation">:</span>    <span class="token key atrule">try</span><span class="token punctuation">:</span>        return float(x)    except (TypeError<span class="token punctuation">,</span> <span class="token key atrule">ValueError)</span><span class="token punctuation">:</span>        return x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>某些情况下，你可能不想抑制异常，你想无论try部分的代码是否成功，都执行一段代码。可以使用finally：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">f = open(path<span class="token punctuation">,</span> 'w')<span class="token key atrule">try</span><span class="token punctuation">:</span>    write_to_file(f)<span class="token key atrule">finally</span><span class="token punctuation">:</span>    f.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，文件处理f总会被关闭。相似的，你可以用else让只在try部分成功的情况下，才执行代码：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">f = open(path<span class="token punctuation">,</span> 'w')<span class="token key atrule">try</span><span class="token punctuation">:</span>    write_to_file(f)<span class="token key atrule">except</span><span class="token punctuation">:</span>    print('Failed')<span class="token key atrule">else</span><span class="token punctuation">:</span>    print('Succeeded')<span class="token key atrule">finally</span><span class="token punctuation">:</span>    f.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="IPython的异常"><a href="#IPython的异常" class="headerlink" title="IPython的异常"></a>IPython的异常</h5><p>如果是在%run一个脚本或一条语句时抛出异常，IPython默认会打印完整的调用栈（traceback），在栈的每个点都会有几行上下文：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> %run examples/ipython_bug.py<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>AssertionError                            Traceback (most recent call last)/home/wesm/code/pydata<span class="token punctuation">-</span>book/examples/ipython_bug.py in &lt;module<span class="token punctuation">&gt;</span>()     13     throws_an_exception()     14<span class="token punctuation">---</span><span class="token punctuation">&gt;</span> 15 calling_things()/home/wesm/code/pydata<span class="token punctuation">-</span>book/examples/ipython_bug.py in calling_things()     <span class="token key atrule">11 def calling_things()</span><span class="token punctuation">:</span>     12     works_fine()<span class="token punctuation">---</span><span class="token punctuation">&gt;</span> 13     throws_an_exception()     14     15 calling_things()/home/wesm/code/pydata<span class="token punctuation">-</span>book/examples/ipython_bug.py in throws_an_exception()      7     a = 5      8     b = 6<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 9     assert(a + b == 10)     10     <span class="token key atrule">11 def calling_things()</span><span class="token punctuation">:</span>AssertionError<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自身就带有文本是相对于Python标准解释器的极大优点。你可以用魔术命令%xmode，从Plain（与Python标准解释器相同）到Verbose（带有函数的参数值）控制文本显示的数量。后面可以看到，发生错误之后，（用%debug或%pdb magics）可以进入stack进行事后调试。</p><h3 id="3-3-文件和操作系统"><a href="#3-3-文件和操作系统" class="headerlink" title="3.3 文件和操作系统"></a>3.3 文件和操作系统</h3><p>本书的代码示例大多使用诸如pandas.read_csv之类的高级工具将磁盘上的数据文件读入Python数据结构。但我们还是需要了解一些有关Python文件处理方面的基础知识。好在它本来就很简单，这也是Python在文本和文件处理方面的如此流行的原因之一。</p><p>为了打开一个文件以便读写，可以使用内置的<code>open</code>函数以及一个相对或绝对的文件路径：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">207</span><span class="token punctuation">]</span><span class="token punctuation">:</span> path = 'examples/segismundo.txt'In <span class="token punctuation">[</span><span class="token number">208</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f = open(path)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认情况下，文件是以只读模式<code>（’r’）</code>打开的。然后，我们就可以像处理列表那样来处理这个文件句柄f了，比如对行进行迭代：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">for line in f</span><span class="token punctuation">:</span>    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从文件中取出的行都带有完整的行结束符（EOL），因此你常常会看到下面这样的代码（得到一组没有EOL的行）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">209</span><span class="token punctuation">]</span><span class="token punctuation">:</span> lines = <span class="token punctuation">[</span>x.rstrip() for x in open(path)<span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">:</span> linesOut<span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sueña el rico en su riqueza,'</span><span class="token punctuation">,</span> <span class="token string">'que más cuidados le ofrece;'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'sueña el pobre que padece'</span><span class="token punctuation">,</span> <span class="token string">'su miseria y su pobreza;'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'sueña el que a medrar empieza,'</span><span class="token punctuation">,</span> <span class="token string">'sueña el que afana y pretende,'</span><span class="token punctuation">,</span> <span class="token string">'sueña el que agravia y ofende,'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'y en el mundo, en conclusión,'</span><span class="token punctuation">,</span> <span class="token string">'todos sueñan lo que son,'</span><span class="token punctuation">,</span> <span class="token string">'aunque ninguno lo entiende.'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果<u>使用<code>open</code>创建文件对象，一定要用<code>close</code>关闭它</u>。关闭文件可以返回操作系统资源：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">211</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f.close()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用<code>with</code>语句可以可以更容易地清理打开的文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">212</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">with open(path) as f</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     lines = <span class="token punctuation">[</span>x.rstrip() for x in f<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样可以在退出代码块时，自动关闭文件。</p><p><code>rstrip()</code>函数： 删除 string 字符串末尾的指定字符（默认为空格），语法与实例如下：（可参考<a href="https://www.runoob.com/python/att-string-rstrip.html"><code>rstrip()</code> )</a>）</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#用法</span>str.rstrip(<span class="token punctuation">[</span>chars<span class="token punctuation">]</span>)<span class="token comment">#实例</span>str = "     this is string example<span class="token punctuation">...</span>.wow<span class="token tag">!</span><span class="token tag">!</span><span class="token tag">!</span>     ";print str.rstrip();str = "88888888this is string example<span class="token punctuation">...</span>.wow<span class="token tag">!</span><span class="token tag">!!8888888</span>";print str.rstrip('8');<span class="token comment">#输出</span>     this is string example<span class="token punctuation">...</span>.wow<span class="token tag">!</span><span class="token tag">!</span><span class="token tag">!</span>88888888this is string example<span class="token punctuation">...</span>.wow<span class="token tag">!</span><span class="token tag">!</span><span class="token tag">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果输入<code>f =open(path,’w’)</code>，就会有一个新文件被创建在examples/segismundo.txt，并覆盖掉该位置原来的任何数据。另外有一个x文件模式，它可以创建可写的文件，但是如果文件路径存在，就无法创建。下表列出了所有的读/写模式。</p><p><img src="https://tvax2.sinaimg.cn/large/007mx13gly1gup4do8w6pj60yg0b3ad702.jpg" alt="Python的文件模式"></p><p>对于可读文件，一些常用的方法是<code>read、seek和tell</code>。<code>read</code>会从文件返回字符。字符的内容是由文件的编码决定的（如UTF-8），如果是二进制模式打开的就是原始字节：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">213</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f = open(path)In <span class="token punctuation">[</span><span class="token number">214</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f.read(10)Out<span class="token punctuation">[</span><span class="token number">214</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'Sueña el r'</span>In <span class="token punctuation">[</span><span class="token number">215</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f2 = open(path<span class="token punctuation">,</span> 'rb')  <span class="token comment"># Binary mode</span>In <span class="token punctuation">[</span><span class="token number">216</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f2.read(10)Out<span class="token punctuation">[</span><span class="token number">216</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b'Sue\xc3\xb1a el '<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>read</code>模式会将文件句柄的位置提前，<u>提前的数量是读取的字节数</u>。<code>tell</code>可以给出当前的位置：</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">In [217]: f.tell()Out[217]: 11In [218]: f2.tell()Out[218]: 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>尽管我们从文件读取了10个字符，位置却是11，这是因为用默认的编码用了这么多字节才解码了这10个字符。你可以用sys模块检查默认的编码：</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">In [219]: import sysIn [220]: sys.getdefaultencoding()Out[220]: 'utf-8'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>seek</code>将文件位置更改为<u>文件中的指定字节</u>：</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">In [221]: f.seek(3)Out[221]: 3In [222]: f.read(1)Out[222]: 'ñ'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后，关闭文件：</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">In [223]: f.close()In [224]: f2.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>向文件写入，可以使用文件的write或writelines方法。例如，我们可以创建一个无空行版的prof_mod.py：</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">In [225]: with open('tmp.txt', 'w') as handle:   .....:     handle.writelines(x for x in open(path) if len(x) &gt; 1)In [226]: with open('tmp.txt') as f:   .....:     lines = f.readlines()In [227]: linesOut[227]: ['Sueña el rico en su riqueza,\n', 'que más cuidados le ofrece;\n', 'sueña el pobre que padece\n', 'su miseria y su pobreza;\n', 'sueña el que a medrar empieza,\n', 'sueña el que afana y pretende,\n', 'sueña el que agravia y ofende,\n', 'y en el mundo, en conclusión,\n', 'todos sueñan lo que son,\n', 'aunque ninguno lo entiende.\n']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下表列出了一些最常用的文件方法。</p><p><img src="https://tvax2.sinaimg.cn/large/007mx13gly1gup4xa6mknj60yg0e8q7h02.jpg" alt="Python重要的文件方法或属性"></p><h5 id="文件的字节和Unicode"><a href="#文件的字节和Unicode" class="headerlink" title="文件的字节和Unicode"></a>文件的字节和Unicode</h5><p>Python文件的默认操作是“文本模式”，也就是说，你需要处理Python的字符串（即Unicode）。它与“二进制模式”相对，文件模式加一个b。我们来看上一节的文件（UTF-8编码、包含非ASCII字符）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">230</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">with open(path) as f</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     chars = f.read(10)In <span class="token punctuation">[</span><span class="token number">231</span><span class="token punctuation">]</span><span class="token punctuation">:</span> charsOut<span class="token punctuation">[</span><span class="token number">231</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'Sueña el r'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>UTF-8是长度可变的Unicode编码，所以当我从文件请求一定数量的字符时，Python会从文件读取足够多（可能少至10或多至40字节）的字节进行解码。如果以“rb”模式打开文件，则读取确切的请求字节数：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">232</span><span class="token punctuation">]</span><span class="token punctuation">:</span> with open(path<span class="token punctuation">,</span> 'rb') as f<span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     data = f.read(10)In <span class="token punctuation">[</span><span class="token number">233</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">233</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b'Sue\xc3\xb1a el '<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>取决于文本的编码，你可以将字节解码为str对象，但只有当<u>每个编码的Unicode字符都完全成形时</u>才能这么做：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.decode('utf8')Out<span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'Sueña el '</span>In <span class="token punctuation">[</span><span class="token number">235</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>.decode('utf8')<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>UnicodeDecodeError                        Traceback (most recent call last)&lt;ipython<span class="token punctuation">-</span>input<span class="token punctuation">-</span>235<span class="token punctuation">-</span>300e0af10bb7<span class="token punctuation">&gt;</span> in &lt;module<span class="token punctuation">&gt;</span>()<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 1 data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>.decode('utf8')<span class="token key atrule">UnicodeDecodeError</span><span class="token punctuation">:</span> 'utf<span class="token punctuation">-</span><span class="token key atrule">8' codec can't decode byte 0xc3 in position 3</span><span class="token punctuation">:</span> unexpected end of data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文本模式结合了<code>open</code>的编码选项，提供了一种更方便的方法将Unicode转换为另一种编码：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">236</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sink_path = 'sink.txt'In <span class="token punctuation">[</span><span class="token number">237</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">with open(path) as source</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     with open(sink_path<span class="token punctuation">,</span> <span class="token string">'xt'</span><span class="token punctuation">,</span> <span class="token key atrule">encoding='iso-8859-1') as sink</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>         sink.write(source.read())In <span class="token punctuation">[</span><span class="token number">238</span><span class="token punctuation">]</span><span class="token punctuation">:</span> with open(sink_path<span class="token punctuation">,</span> <span class="token key atrule">encoding='iso-8859-1') as f</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     print(f.read(10))Sueña el r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，<u>不要在二进制模式中使用<code>seek</code></u>。如果文件位置位于定义Unicode字符的字节的中间位置，读取后面会产生错误：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f = open(path)In <span class="token punctuation">[</span><span class="token number">241</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f.read(5)Out<span class="token punctuation">[</span><span class="token number">241</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'Sueña'</span>In <span class="token punctuation">[</span><span class="token number">242</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f.seek(4)Out<span class="token punctuation">[</span><span class="token number">242</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4</span>In <span class="token punctuation">[</span><span class="token number">243</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f.read(1)<span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span><span class="token punctuation">---</span>UnicodeDecodeError                        Traceback (most recent call last)&lt;ipython<span class="token punctuation">-</span>input<span class="token punctuation">-</span>243<span class="token punctuation">-</span>7841103e33f5<span class="token punctuation">&gt;</span> in &lt;module<span class="token punctuation">&gt;</span>()<span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 1 f.read(1)/miniconda/envs/book<span class="token punctuation">-</span>env/lib/python3.6/codecs.py in decode(self<span class="token punctuation">,</span> input<span class="token punctuation">,</span> final)    319         <span class="token comment"># decode input (taking the buffer into account)</span>    320         data = self.buffer + input<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span> 321         (result<span class="token punctuation">,</span> consumed) = self._buffer_decode(data<span class="token punctuation">,</span> self.errors<span class="token punctuation">,</span> final)    322         <span class="token comment"># keep undecoded input until the next call</span>    323         self.buffer = data<span class="token punctuation">[</span>consumed<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token key atrule">UnicodeDecodeError</span><span class="token punctuation">:</span> 'utf<span class="token punctuation">-</span><span class="token key atrule">8' codec can't decode byte 0xb1 in position 0</span><span class="token punctuation">:</span> invalid start byteIn <span class="token punctuation">[</span><span class="token number">244</span><span class="token punctuation">]</span><span class="token punctuation">:</span> f.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你经常要对非ASCII字符文本进行数据分析，通晓Python的Unicode功能是非常重要的。更多内容，参阅Python官方文档。</p><h2 id="第-04-章-NumPy-基础：数组和矢量计算"><a href="#第-04-章-NumPy-基础：数组和矢量计算" class="headerlink" title="第 04 章 NumPy 基础：数组和矢量计算"></a><a href="https://www.bookstack.cn/read/pyda-2e-zh/4.md">第 04 章 NumPy 基础：数组和矢量计算</a></h2><p>NumPy（Numerical Python的简称）是Python数值计算最重要的基础包。大多数提供科学计算的包都是用NumPy的数组作为构建基础。</p><p>NumPy的部分功能如下：</p><ul><li>ndarray，一个具有矢量算术运算和复杂广播能力的快速且节省空间的多维数组。</li><li>用于对整组数据进行快速运算的标准数学函数（无需编写循环）。</li><li>用于读写磁盘数据的工具以及用于操作内存映射文件的工具。</li><li>线性代数、随机数生成以及傅里叶变换功能。</li><li>用于集成由C、C++、Fortran等语言编写的代码的A C API。</li></ul><p>由于NumPy提供了一个简单易用的C API，因此很容易将数据传递给由低级语言编写的外部库，外部库也能以NumPy数组的形式将数据返回给Python。这个功能使Python成为一种包装C/C++/Fortran历史代码库的选择，并使被包装库拥有一个动态的、易用的接口。</p><p>NumPy本身并没有提供多么高级的数据分析功能，<u>理解NumPy数组以及面向数组的计算</u>将有助于你更加高效地使用诸如pandas之类的工具。因为NumPy是一个很大的题目，我会在附录A中介绍更多NumPy高级功能，比如广播。</p><p>对于大部分数据分析应用而言，我最关注的功能主要集中在：</p><ul><li>用于数据整理和清理、子集构造和过滤、转换等快速的矢量化数组运算。</li><li>常用的数组算法，如排序、唯一化、集合运算等。</li><li>高效的描述统计和数据聚合/摘要运算。</li><li>用于异构数据集的合并/连接运算的数据对齐和关系型数据运算。</li><li>将条件逻辑表述为数组表达式（而不是带有if-elif-else分支的循环）。</li><li>数据的分组运算（聚合、转换、函数应用等）</li></ul><p>虽然NumPy提供了通用的数值数据处理的计算基础，但大多数读者可能还是想将<u>pandas作为统计和分析工作</u>的基础，尤其是处理表格数据时。pandas还提供了一些NumPy所没有的领域特定的功能，如时间序列处理等。</p><ul><li>笔记：Python的面向数组计算可以追溯到1995年，Jim Hugunin创建了Numeric库。接下来的10年，许多科学编程社区纷纷开始使用Python的数组编程，但是进入21世纪，库的生态系统变得碎片化了。2005年，Travis Oliphant从Numeric和Numarray项目整了出了NumPy项目，进而所有社区都集合到了这个框架下。</li></ul><p>NumPy之于数值计算特别重要的原因之一，是因为它可以高效处理大数组的数据。这是因为：</p><ul><li>NumPy是在一个连续的内存块中存储数据，独立于其他Python内置对象。NumPy的C语言编写的算法库可以操作内存，而不必进行类型检查或其它前期工作。比起Python的内置序列，NumPy数组使用的内存更少。</li><li>NumPy可以在整个数组上执行复杂的计算，而不需要Python的for循环。</li></ul><p>要搞明白具体的性能差距，考察一个包含一百万整数的数组，和一个等价的Python列表：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> import numpy as npIn <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span> my_arr = np.arange(1000000)In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> my_list = list(range(1000000))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>各个序列分别乘以2：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> %time for _ in range(10)<span class="token punctuation">:</span> my_arr2 = my_arr * 2<span class="token key atrule">CPU times</span><span class="token punctuation">:</span> user 20 ms<span class="token punctuation">,</span> <span class="token key atrule">sys</span><span class="token punctuation">:</span> 50 ms<span class="token punctuation">,</span> <span class="token key atrule">total</span><span class="token punctuation">:</span> 70 ms<span class="token key atrule">Wall time</span><span class="token punctuation">:</span> 72.4 msIn <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> %time for _ in range(10)<span class="token punctuation">:</span> my_list2 = <span class="token punctuation">[</span>x * 2 for x in my_list<span class="token punctuation">]</span><span class="token key atrule">CPU times</span><span class="token punctuation">:</span> user 760 ms<span class="token punctuation">,</span> <span class="token key atrule">sys</span><span class="token punctuation">:</span> 290 ms<span class="token punctuation">,</span> <span class="token key atrule">total</span><span class="token punctuation">:</span> 1.05 s<span class="token key atrule">Wall time</span><span class="token punctuation">:</span> 1.05 s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于NumPy的算法要比纯Python快10到100倍（甚至更快），并且使用的内存更少。</p><h3 id="4-1-NumPy的ndarray：一种多维数组对象"><a href="#4-1-NumPy的ndarray：一种多维数组对象" class="headerlink" title="4.1 NumPy的ndarray：一种多维数组对象"></a>4.1 NumPy的ndarray：一种多维数组对象</h3><p><code>NumPy</code>最重要的一个特点就是其N维数组对象（即<code>ndarray</code>），该对象是一个快速而灵活的大数据集容器。你可以利用这种数组对整块数据执行一些数学运算，其语法跟标量元素之间的运算一样。</p><p>要明白Python是如何利用与标量值类似的语法进行批次计算，我先引入<code>NumPy</code>，然后生成一个包含随机数据的小数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> import numpy as np<span class="token comment"># Generate some random data</span>In <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data = np.random.randn(2<span class="token punctuation">,</span> 3)In <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-0.2047</span><span class="token punctuation">,</span>  <span class="token number">0.4789</span><span class="token punctuation">,</span> <span class="token number">-0.5194</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">-0.5557</span><span class="token punctuation">,</span>  <span class="token number">1.9658</span><span class="token punctuation">,</span>  <span class="token number">1.3934</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后进行数学运算：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data * 10Out<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">-2.0471</span><span class="token punctuation">,</span>   <span class="token number">4.7894</span><span class="token punctuation">,</span>  <span class="token number">-5.1944</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token number">-5.5573</span><span class="token punctuation">,</span>  <span class="token number">19.6578</span><span class="token punctuation">,</span>  <span class="token number">13.9341</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data + dataOut<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-0.4094</span><span class="token punctuation">,</span>  <span class="token number">0.9579</span><span class="token punctuation">,</span> <span class="token number">-1.0389</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">-1.1115</span><span class="token punctuation">,</span>  <span class="token number">3.9316</span><span class="token punctuation">,</span>  <span class="token number">2.7868</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个例子中，所有的元素都乘以10。第二个例子中，每个元素都与自身相加。</p><blockquote><p>笔记：在本章及全书中，我会使用标准的NumPy惯用法<code>import numpy as np</code>。你当然也可以在代码中使用<code>from numpy import *</code>，但不建议这么做。<code>numpy</code>的命名空间很大，包含许多函数，其中一些的名字与Python的内置函数重名（比如min和max）。</p></blockquote><p>ndarray是一个通用的同构数据多维容器，也就是说，其中的所有元素必须是相同类型的。每个数组都有一个shape（一个表示各维度大小的元组）和一个dtype（一个用于说明数组数据类型的对象）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.shapeOut<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> (2<span class="token punctuation">,</span> 3)In <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.dtypeOut<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dtype('float64')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>本章将会介绍<code>NumPy</code>数组的基本用法，这对于本书后面各章的理解基本够用。虽然大多数数据分析工作不需要深入理解<code>NumPy</code>，但是精通面向数组的编程和思维方式是成为Python科学计算牛人的一大关键步骤。</p><blockquote><p>笔记：当你在本书中看到“数组”、“<code>NumPy</code>数组”、”<code>ndarray</code>”时，基本上都指的是同一样东西，即<code>ndarray</code>对象。</p></blockquote><h4 id="创建ndarray"><a href="#创建ndarray" class="headerlink" title="创建ndarray"></a>创建<code>ndarray</code></h4><p>创建数组最简单的办法就是使用<code>array</code>函数。它接受一切序列型的对象（包括其他数组），然后产生一个新的含有传入数据的<code>NumPy</code>数组。以一个列表的转换为例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data1 = <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7.5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr1 = np.array(data1)In <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr1Out<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">6.</span> <span class="token punctuation">,</span>  <span class="token number">7.5</span><span class="token punctuation">,</span>  <span class="token number">8.</span> <span class="token punctuation">,</span>  <span class="token number">0.</span> <span class="token punctuation">,</span>  <span class="token number">1.</span> <span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>嵌套序列（比如由一组等长列表组成的列表）将会被转换为一个多维数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data2 = <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2 = np.array(data2)In <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2Out<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为data2是列表的列表，<code>NumPy</code>数组arr2的两个维度的shape是从data2引入的。可以用属性ndim和shape验证：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2.ndimOut<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span>In <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2.shapeOut<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> (2<span class="token punctuation">,</span> 4)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>除非特别说明（稍后将会详细介绍），<code>np.array</code>会尝试为新建的这个数组推断出一个较为合适的数据类型。数据类型保存在一个特殊的<code>dtype</code>对象中。比如说，在上面的两个例子中，我们有：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr1.dtypeOut<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dtype('float64')In <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2.dtypeOut<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dtype('int64')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>除<code>np.array</code>之外，还有一些函数也可以新建数组。比如，zeros和ones分别可以创建指定长度或形状的全0或全1数组。empty可以创建一个没有任何具体值的数组。要用这些方法创建多维数组，只需传入一个表示形状的元组即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.zeros(10)Out<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.zeros((3<span class="token punctuation">,</span> 6))Out<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.empty((2<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> 2))Out<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：认为np.empty会返回全0数组的想法是不安全的。很多情况下（如前所示），它返回的都是一些未初始化的垃圾值。</p></blockquote><p><code>arange</code>是Python内置函数<code>range</code>的数组版：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.arange(15)Out<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下表列出了一些数组创建函数。由于NumPy关注的是数值计算，因此，如果没有特别指定，数据类型基本都是float64（浮点数）。</p><p><img src="https://tvax3.sinaimg.cn/large/007mx13gly1guq8uv8wuzj60jc08xtd802.jpg" alt="数组创建函数"></p><h4 id="ndarray的数据类型"><a href="#ndarray的数据类型" class="headerlink" title="ndarray的数据类型"></a><code>ndarray</code>的数据类型</h4><p>dtype（数据类型）是一个特殊的对象，它含有<code>ndarray</code>将一块内存解释为特定数据类型所需的信息：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr1 = np.array(<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=np.float64)    In <span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2 = np.array(<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=np.int32)    In <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr1.dtype    Out<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dtype('float64')    In <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2.dtype    Out<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dtype('int32')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>dtype是<code>NumPy</code>灵活交互其它系统的源泉之一。多数情况下，它们直接映射到相应的机器表示，这使得“读写磁盘上的二进制数据流”以及“集成低级语言代码（如C、Fortran）”等工作变得更加简单。数值型dtype的命名方式相同：一个类型名（如float或int），后面跟一个用于表示各元素位长的数字。标准的双精度浮点值（即Python中的float对象）需要占用8字节（即64位）。因此，该类型在NumPy中就记作float64。下表列出了NumPy所支持的全部数据类型。</p><blockquote><p>笔记：记不住这些NumPy的dtype也没关系，新手更是如此。通常只需要知道你所处理的数据的大致类型是浮点数、复数、整数、布尔值、字符串，还是普通的Python对象即可。当你需要控制数据在内存和磁盘中的存储方式时（尤其是对大数据集），那就得了解如何控制存储类型。</p></blockquote><p><img src="https://tva2.sinaimg.cn/large/007mx13gly1guq8vovj85j60y30l0jxz02.jpg" alt="一种多维数组对象"></p><p><img src="https://tvax1.sinaimg.cn/large/007mx13gly1guq8vq13wkj60y30boq6002.jpg" alt="一种多维数组对象"></p><p>你可以通过<code>ndarray</code>的astype方法明确地将一个数组从一个dtype转换成另一个dtype：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.array(<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.dtypeOut<span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dtype('int64')In <span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> float_arr = arr.astype(np.float64)In <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> float_arr.dtypeOut<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dtype('float64')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在本例中，整数被转换成了浮点数。如果将浮点数转换成整数，则小数部分将会被截取删除：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.array(<span class="token punctuation">[</span><span class="token number">3.7</span><span class="token punctuation">,</span> <span class="token number">-1.2</span><span class="token punctuation">,</span> <span class="token number">-2.6</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">12.9</span><span class="token punctuation">,</span> <span class="token number">10.1</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>  <span class="token number">3.7</span><span class="token punctuation">,</span>  <span class="token number">-1.2</span><span class="token punctuation">,</span>  <span class="token number">-2.6</span><span class="token punctuation">,</span>   <span class="token number">0.5</span><span class="token punctuation">,</span>  <span class="token number">12.9</span><span class="token punctuation">,</span>  <span class="token number">10.1</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.astype(np.int32)Out<span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">-2</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=int32)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果某字符串数组表示的全是数字，也可以用astype将其转换为数值形式：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">:</span> numeric_strings = np.array(<span class="token punctuation">[</span><span class="token string">'1.25'</span><span class="token punctuation">,</span> <span class="token string">'-9.6'</span><span class="token punctuation">,</span> <span class="token string">'42'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=np.string_)In <span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">:</span> numeric_strings.astype(float)Out<span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>  <span class="token number">1.25</span><span class="token punctuation">,</span>  <span class="token number">-9.6</span> <span class="token punctuation">,</span>  <span class="token number">42.</span>  <span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：使用<code>numpy.string</code>_类型时，一定要小心，因为<code>NumPy</code>的字符串数据是大小固定的，发生截取时，不会发出警告。<code>pandas</code>提供了更多非数值数据的便利的处理方法。</p></blockquote><p>如果转换过程因为某种原因而失败了（比如某个不能被转换为float64的字符串），就会引发一个ValueError。这里，我比较懒，写的是float而不是np.float64；NumPy很聪明，它会将Python类型映射到等价的dtype上。</p><p>数组的dtype还有另一个属性：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">]</span><span class="token punctuation">:</span> int_array = np.arange(10)In <span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">]</span><span class="token punctuation">:</span> calibers = np.array(<span class="token punctuation">[</span><span class="token number">.22</span><span class="token punctuation">,</span> <span class="token number">.270</span><span class="token punctuation">,</span> <span class="token number">.357</span><span class="token punctuation">,</span> <span class="token number">.380</span><span class="token punctuation">,</span> <span class="token number">.44</span><span class="token punctuation">,</span> <span class="token number">.50</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=np.float64)In <span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">:</span> int_array.astype(calibers.dtype)Out<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">2.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">7.</span><span class="token punctuation">,</span>  <span class="token number">8.</span><span class="token punctuation">,</span>  <span class="token number">9.</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你还可以用简洁的类型代码来表示dtype：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span><span class="token punctuation">:</span> empty_uint32 = np.empty(8<span class="token punctuation">,</span> dtype='u4')In <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span> empty_uint32Out<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>         <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1075314688</span><span class="token punctuation">,</span>          <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1075707904</span><span class="token punctuation">,</span>          <span class="token number">0</span><span class="token punctuation">,</span>       <span class="token number">1075838976</span><span class="token punctuation">,</span>          <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1072693248</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=uint32)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>笔记：调用astype总会创建一个新的数组（一个数据的备份），即使新的dtype与旧的dtype相同。</p></blockquote><h4 id="NumPy数组的运算"><a href="#NumPy数组的运算" class="headerlink" title="NumPy数组的运算"></a><code>NumPy</code>数组的运算</h4><p>数组很重要，因为它使你不用编写循环即可对数据执行批量运算。NumPy用户称其为矢量化（vectorization）。大小相等的数组之间的任何算术运算都会将运算应用到元素级：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">,</span> <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4.</span><span class="token punctuation">,</span> <span class="token number">5.</span><span class="token punctuation">,</span> <span class="token number">6.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">2.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">6.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr * arrOut<span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">1.</span><span class="token punctuation">,</span>   <span class="token number">4.</span><span class="token punctuation">,</span>   <span class="token number">9.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">16.</span><span class="token punctuation">,</span>  <span class="token number">25.</span><span class="token punctuation">,</span>  <span class="token number">36.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr <span class="token punctuation">-</span> arrOut<span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组与标量的算术运算会将标量值传播到各个元素：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 1 / arrOut<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.</span>    <span class="token punctuation">,</span>  <span class="token number">0.5</span>   <span class="token punctuation">,</span>  <span class="token number">0.3333</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.25</span>  <span class="token punctuation">,</span>  <span class="token number">0.2</span>   <span class="token punctuation">,</span>  <span class="token number">0.1667</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr <span class="token important">**</span> 0.5Out<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.</span>    <span class="token punctuation">,</span>  <span class="token number">1.4142</span><span class="token punctuation">,</span>  <span class="token number">1.7321</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2.</span>    <span class="token punctuation">,</span>  <span class="token number">2.2361</span><span class="token punctuation">,</span>  <span class="token number">2.4495</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>大小相同的数组之间的比较会生成布尔值数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2 = np.array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">4.</span><span class="token punctuation">,</span> <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">,</span> <span class="token number">12.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2Out<span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">0.</span><span class="token punctuation">,</span>   <span class="token number">4.</span><span class="token punctuation">,</span>   <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">7.</span><span class="token punctuation">,</span>   <span class="token number">2.</span><span class="token punctuation">,</span>  <span class="token number">12.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2 <span class="token punctuation">&gt;</span> arrOut<span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span>array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=bool)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不同大小的数组之间的运算叫做广播（broadcasting），将在附录A中对其进行详细讨论。本书的内容不需要对广播机制有多深的理解。</p><h4 id="基本的索引和切片"><a href="#基本的索引和切片" class="headerlink" title="基本的索引和切片"></a>基本的索引和切片</h4><p>NumPy数组的索引是一个内容丰富的主题，因为选取数据子集或单个元素的方式有很多。一维数组很简单。从表面上看，它们跟Python列表的功能差不多：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.arange(10)In <span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 5In <span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span>5<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span>5<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span> = 12In <span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如上所示，当你将一个标量值赋值给一个切片时（如arr[5:8]=12），该值会自动传播（也就说后面将会讲到的“广播”）到整个选区。跟列表最重要的区别在于，数组切片是原始数组的视图。这意味着数据不会被复制，视图上的任何修改都会直接反映到源数组上。</p><p>作为例子，先创建一个arr的切片：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr_slice = arr<span class="token punctuation">[</span>5<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr_sliceOut<span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，当我修稿arr_slice中的值，变动也会体现在原始数组arr中：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr_slice<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> = 12345In <span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>    <span class="token number">0</span><span class="token punctuation">,</span>     <span class="token number">1</span><span class="token punctuation">,</span>     <span class="token number">2</span><span class="token punctuation">,</span>     <span class="token number">3</span><span class="token punctuation">,</span>     <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">,</span>    <span class="token number">12</span><span class="token punctuation">,</span>     <span class="token number">8</span><span class="token punctuation">,</span>   <span class="token number">9</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切片[ : ]会给数组中的所有值赋值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr_slice<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> = 64In <span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你刚开始接触NumPy，可能会对此感到惊讶（尤其是当你曾经用过其他热衷于复制数组数据的编程语言）。由于NumPy的设计目的是处理大数据，所以你可以想象一下，假如NumPy坚持要将数据复制来复制去的话会产生何等的性能和内存问题。</p><blockquote><p>注意：如果你想要得到的是ndarray切片的一份副本而非视图，就需要明确地进行复制操作，例如<code>arr[5:8].copy()</code>。</p></blockquote><p>对于高维度数组，能做的事情更多。在一个二维数组中，各索引位置上的元素不再是标量而是一维数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d = np.array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此，可以对各个元素进行递归访问，但这样需要做的事情有点多。你可以传入一个以逗号隔开的索引列表来选取单个元素。也就是说，下面两种方式是等价的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 3In <span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下图说明了二维数组的索引方式。轴0作为行，轴1作为列。</p><p><img src="https://tva1.sinaimg.cn/large/007mx13gly1guq91p9gxzj60kp0ifws802.jpg" alt="NumPy数组中的元素索引"></p><p>在多维数组中，如果省略了后面的索引，则返回对象会是一个维度低一点的<code>ndarray</code>（它含有高一级维度上的所有数据）。因此，在2×2×3数组arr3d中：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr3d = np.array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr3dOut<span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>arr3d[0]是一个2×3数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr3d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    Out<span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>标量值和数组都可以被赋值给arr3d[0]：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> old_values = arr3d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.copy()    In <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr3d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> = 42    In <span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr3d    Out<span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)    In <span class="token punctuation">[</span><span class="token number">82</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr3d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> = old_values    In <span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr3d    Out<span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相似的，arr3d[1,0]可以访问索引以(1,0)开头的那些值（以一维数组的形式返回）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr3d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>    Out<span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>虽然是用两步进行索引的，表达式是相同的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">85</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x = arr3d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    In <span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x    Out<span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)    In <span class="token punctuation">[</span><span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    Out<span class="token punctuation">[</span><span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，在上面所有这些选取数组子集的例子中，返回的数组都是视图。</p><h4 id="切片索引"><a href="#切片索引" class="headerlink" title="切片索引"></a>切片索引</h4><p>ndarray的切片语法跟Python列表这样的一维对象差不多：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span>1<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于之前的二维数组arr2d，其切片方式稍显不同：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2dOut<span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">91</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">91</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看出，它是沿着第0轴（即第一个轴）切片的。也就是说，切片是沿着一个轴向选取元素的。表达式arr2d[:2]可以被认为是“选取arr2d的前两行”。</p><p>你可以一次传入多个切片，就像传入多个索引那样：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> 1<span class="token punctuation">:</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>像这样进行切片时，只能得到相同维数的数组视图。通过将整数索引和切片混合，可以得到低维度的切片。</p><p>例如，我可以选取第二行的前两列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相似的，还可以选择第三列的前两行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下图对此进行了说明。注意，“只有冒号”表示选取整个轴，因此你可以像下面这样只对高维轴进行切片：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://static.sitestack.cn/projects/pyda-2e-zh/img/7178691-9da32d2f4629c304.png" alt="图4-2 二维数组切片"></p><p>自然，对切片表达式的赋值操作也会被扩散到整个选区：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2d<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> 1<span class="token punctuation">:</span><span class="token punctuation">]</span> = 0In <span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr2dOut<span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="布尔型索引"><a href="#布尔型索引" class="headerlink" title="布尔型索引"></a>布尔型索引</h4><p>来看这样一个例子，假设我们有一个用于存储数据的数组以及一个存储姓名的数组（含有重复项）。在这里，我将使用numpy.random中的randn函数生成一些正态分布的随机数据：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">:</span> names = np.array(<span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data = np.random.randn(7<span class="token punctuation">,</span> 4)In <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">:</span> namesOut<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype='&lt;U4')In <span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.0929</span><span class="token punctuation">,</span>  <span class="token number">0.2817</span><span class="token punctuation">,</span>  <span class="token number">0.769</span> <span class="token punctuation">,</span>  <span class="token number">1.2464</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.0072</span><span class="token punctuation">,</span> <span class="token number">-1.2962</span><span class="token punctuation">,</span>  <span class="token number">0.275</span> <span class="token punctuation">,</span>  <span class="token number">0.2289</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.3529</span><span class="token punctuation">,</span>  <span class="token number">0.8864</span><span class="token punctuation">,</span> <span class="token number">-2.0016</span><span class="token punctuation">,</span> <span class="token number">-0.3718</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.669</span> <span class="token punctuation">,</span> <span class="token number">-0.4386</span><span class="token punctuation">,</span> <span class="token number">-0.5397</span><span class="token punctuation">,</span>  <span class="token number">0.477</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3.2489</span><span class="token punctuation">,</span> <span class="token number">-1.0212</span><span class="token punctuation">,</span> <span class="token number">-0.5771</span><span class="token punctuation">,</span>  <span class="token number">0.1241</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.3026</span><span class="token punctuation">,</span>  <span class="token number">0.5238</span><span class="token punctuation">,</span>  <span class="token number">0.0009</span><span class="token punctuation">,</span>  <span class="token number">1.3438</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.7135</span><span class="token punctuation">,</span> <span class="token number">-0.8312</span><span class="token punctuation">,</span> <span class="token number">-2.3702</span><span class="token punctuation">,</span> <span class="token number">-1.8608</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设每个名字都对应data数组中的一行，而我们想要选出对应于名字”Bob”的所有行。跟算术运算一样，数组的比较运算（如==）也是矢量化的。因此，对names和字符串”Bob”的比较运算将会产生一个布尔型数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">:</span> names == 'Bob'Out<span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=bool)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个布尔型数组可用于数组索引：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>names == 'Bob'<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.0929</span><span class="token punctuation">,</span>  <span class="token number">0.2817</span><span class="token punctuation">,</span>  <span class="token number">0.769</span> <span class="token punctuation">,</span>  <span class="token number">1.2464</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.669</span> <span class="token punctuation">,</span> <span class="token number">-0.4386</span><span class="token punctuation">,</span> <span class="token number">-0.5397</span><span class="token punctuation">,</span>  <span class="token number">0.477</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>布尔型数组的长度必须跟被索引的轴长度一致。此外，还可以将布尔型数组跟切片、整数（或整数序列，稍后将对此进行详细讲解）混合使用：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>names == 'Bob'<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.0929</span><span class="token punctuation">,</span>  <span class="token number">0.2817</span><span class="token punctuation">,</span>  <span class="token number">0.769</span> <span class="token punctuation">,</span>  <span class="token number">1.2464</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.669</span> <span class="token punctuation">,</span> <span class="token number">-0.4386</span><span class="token punctuation">,</span> <span class="token number">-0.5397</span><span class="token punctuation">,</span>  <span class="token number">0.477</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：如果布尔型数组的长度不对，布尔型选择就会出错，因此一定要小心。</p></blockquote><p>下面的例子，我选取了<code>names == 'Bob'</code>的行，并索引了列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>names == 'Bob'<span class="token punctuation">,</span> 2<span class="token punctuation">:</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.769</span> <span class="token punctuation">,</span>  <span class="token number">1.2464</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.5397</span><span class="token punctuation">,</span>  <span class="token number">0.477</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>names == 'Bob'<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">1.2464</span><span class="token punctuation">,</span>  <span class="token number">0.477</span> <span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要选择除”Bob”以外的其他值，既可以使用不等于符号（!=），也可以通过~对条件进行否定：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> names <span class="token tag">!=</span> 'Bob'Out<span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=bool)In <span class="token punctuation">[</span><span class="token number">107</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>~(names == 'Bob')<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">107</span><span class="token punctuation">]</span><span class="token punctuation">:</span>array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.0072</span><span class="token punctuation">,</span> <span class="token number">-1.2962</span><span class="token punctuation">,</span>  <span class="token number">0.275</span> <span class="token punctuation">,</span>  <span class="token number">0.2289</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.3529</span><span class="token punctuation">,</span>  <span class="token number">0.8864</span><span class="token punctuation">,</span> <span class="token number">-2.0016</span><span class="token punctuation">,</span> <span class="token number">-0.3718</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3.2489</span><span class="token punctuation">,</span> <span class="token number">-1.0212</span><span class="token punctuation">,</span> <span class="token number">-0.5771</span><span class="token punctuation">,</span>  <span class="token number">0.1241</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.3026</span><span class="token punctuation">,</span>  <span class="token number">0.5238</span><span class="token punctuation">,</span>  <span class="token number">0.0009</span><span class="token punctuation">,</span>  <span class="token number">1.3438</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.7135</span><span class="token punctuation">,</span> <span class="token number">-0.8312</span><span class="token punctuation">,</span> <span class="token number">-2.3702</span><span class="token punctuation">,</span> <span class="token number">-1.8608</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>~操作符用来反转条件很好用：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">:</span> cond = names == 'Bob'In <span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>~cond<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.0072</span><span class="token punctuation">,</span> <span class="token number">-1.2962</span><span class="token punctuation">,</span>  <span class="token number">0.275</span> <span class="token punctuation">,</span>  <span class="token number">0.2289</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.3529</span><span class="token punctuation">,</span>  <span class="token number">0.8864</span><span class="token punctuation">,</span> <span class="token number">-2.0016</span><span class="token punctuation">,</span> <span class="token number">-0.3718</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3.2489</span><span class="token punctuation">,</span> <span class="token number">-1.0212</span><span class="token punctuation">,</span> <span class="token number">-0.5771</span><span class="token punctuation">,</span>  <span class="token number">0.1241</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.3026</span><span class="token punctuation">,</span>  <span class="token number">0.5238</span><span class="token punctuation">,</span>  <span class="token number">0.0009</span><span class="token punctuation">,</span>  <span class="token number">1.3438</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.7135</span><span class="token punctuation">,</span> <span class="token number">-0.8312</span><span class="token punctuation">,</span> <span class="token number">-2.3702</span><span class="token punctuation">,</span> <span class="token number">-1.8608</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选取这三个名字中的两个需要组合应用多个布尔条件，使用&amp;（和）、|（或）之类的布尔算术运算符即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mask = (names == 'Bob') <span class="token punctuation">|</span> (names == 'Will')In <span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">:</span> maskOut<span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=bool)In <span class="token punctuation">[</span><span class="token number">112</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>mask<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">112</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.0929</span><span class="token punctuation">,</span>  <span class="token number">0.2817</span><span class="token punctuation">,</span>  <span class="token number">0.769</span> <span class="token punctuation">,</span>  <span class="token number">1.2464</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.3529</span><span class="token punctuation">,</span>  <span class="token number">0.8864</span><span class="token punctuation">,</span> <span class="token number">-2.0016</span><span class="token punctuation">,</span> <span class="token number">-0.3718</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.669</span> <span class="token punctuation">,</span> <span class="token number">-0.4386</span><span class="token punctuation">,</span> <span class="token number">-0.5397</span><span class="token punctuation">,</span>  <span class="token number">0.477</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3.2489</span><span class="token punctuation">,</span> <span class="token number">-1.0212</span><span class="token punctuation">,</span> <span class="token number">-0.5771</span><span class="token punctuation">,</span>  <span class="token number">0.1241</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过布尔型索引选取数组中的数据，将总是创建数据的副本，即使返回一模一样的数组也是如此。</p><blockquote><p>注意：Python关键字and和or在布尔型数组中无效。要使用&amp;与|。</p></blockquote><p>通过布尔型数组设置值是一种经常用到的手段。为了将data中的所有负值都设置为0，我们只需：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">113</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>data &lt; 0<span class="token punctuation">]</span> = 0In <span class="token punctuation">[</span><span class="token number">114</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">114</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.0929</span><span class="token punctuation">,</span>  <span class="token number">0.2817</span><span class="token punctuation">,</span>  <span class="token number">0.769</span> <span class="token punctuation">,</span>  <span class="token number">1.2464</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.0072</span><span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.275</span> <span class="token punctuation">,</span>  <span class="token number">0.2289</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.3529</span><span class="token punctuation">,</span>  <span class="token number">0.8864</span><span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.669</span> <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.477</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3.2489</span><span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.1241</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.3026</span><span class="token punctuation">,</span>  <span class="token number">0.5238</span><span class="token punctuation">,</span>  <span class="token number">0.0009</span><span class="token punctuation">,</span>  <span class="token number">1.3438</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过一维布尔数组设置整行或列的值也很简单：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>names <span class="token tag">!=</span> 'Joe'<span class="token punctuation">]</span> = 7In <span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.0072</span><span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.275</span> <span class="token punctuation">,</span>  <span class="token number">0.2289</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">,</span>  <span class="token number">7.</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.3026</span><span class="token punctuation">,</span>  <span class="token number">0.5238</span><span class="token punctuation">,</span>  <span class="token number">0.0009</span><span class="token punctuation">,</span>  <span class="token number">1.3438</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后面会看到，这类二维数据的操作也可以用pandas方便的来做。</p><h4 id="花式索引"><a href="#花式索引" class="headerlink" title="花式索引"></a>花式索引</h4><p>花式索引（Fancy indexing）是一个NumPy术语，它指的是利用整数数组进行索引。假设我们有一个8×4数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.empty((8<span class="token punctuation">,</span> 4))In <span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">for i in range(8):.....</span><span class="token punctuation">:</span>     arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> = iIn <span class="token punctuation">[</span><span class="token number">119</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">119</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2.</span><span class="token punctuation">,</span>  <span class="token number">2.</span><span class="token punctuation">,</span>  <span class="token number">2.</span><span class="token punctuation">,</span>  <span class="token number">2.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">6.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">7.</span><span class="token punctuation">,</span>  <span class="token number">7.</span><span class="token punctuation">,</span>  <span class="token number">7.</span><span class="token punctuation">,</span>  <span class="token number">7.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了以特定顺序选取行子集，只需传入一个用于指定顺序的整数列表或<code>ndarray</code>即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">6.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这段代码确实达到我们的要求了！使用负数索引将会从末尾开始选取行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">121</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-3</span><span class="token punctuation">,</span> <span class="token number">-5</span><span class="token punctuation">,</span> <span class="token number">-7</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">121</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一次传入多个索引数组会有一点特别。它返回的是一个一维数组，其中的元素对应各个索引元组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.arange(32).reshape((8<span class="token punctuation">,</span> 4))In <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>附录A中会详细介绍reshape方法。</p><p>最终选出的是元素(1,0)、(5,3)、(7,1)和(2,2)。无论数组是多少维的，花式索引总是一维的。</p><p>这个花式索引的行为可能会跟某些用户的预期不一样（包括我在内），选取矩阵的行列子集应该是矩形区域的形式才对。下面是得到该结果的一个办法：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>记住，花式索引跟切片不一样，它总是将数据复制到新数组中。</p></blockquote><h4 id="数组转置和轴对换"><a href="#数组转置和轴对换" class="headerlink" title="数组转置和轴对换"></a>数组转置和轴对换</h4><p>转置是重塑的一种特殊形式，它返回的是源数据的视图（不会进行任何复制操作）。数组不仅有transpose方法，还有一个特殊的T属性：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">126</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.arange(15).reshape((3<span class="token punctuation">,</span> 5))In <span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.TOut<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在进行矩阵计算时，经常需要用到该操作，比如利用np.dot计算矩阵内积：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">129</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.random.randn(6<span class="token punctuation">,</span> 3)In <span class="token punctuation">[</span><span class="token number">130</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">130</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-0.8608</span><span class="token punctuation">,</span>  <span class="token number">0.5601</span><span class="token punctuation">,</span> <span class="token number">-1.2659</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.1198</span><span class="token punctuation">,</span> <span class="token number">-1.0635</span><span class="token punctuation">,</span>  <span class="token number">0.3329</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-2.3594</span><span class="token punctuation">,</span> <span class="token number">-0.1995</span><span class="token punctuation">,</span> <span class="token number">-1.542</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.9707</span><span class="token punctuation">,</span> <span class="token number">-1.307</span> <span class="token punctuation">,</span>  <span class="token number">0.2863</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.378</span> <span class="token punctuation">,</span> <span class="token number">-0.7539</span><span class="token punctuation">,</span>  <span class="token number">0.3313</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.3497</span><span class="token punctuation">,</span>  <span class="token number">0.0699</span><span class="token punctuation">,</span>  <span class="token number">0.2467</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">131</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.dot(arr.T<span class="token punctuation">,</span> arr)Out<span class="token punctuation">[</span><span class="token number">131</span><span class="token punctuation">]</span><span class="token punctuation">:</span>array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">9.2291</span><span class="token punctuation">,</span>  <span class="token number">0.9394</span><span class="token punctuation">,</span>  <span class="token number">4.948</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.9394</span><span class="token punctuation">,</span>  <span class="token number">3.7662</span><span class="token punctuation">,</span> <span class="token number">-1.3622</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4.948</span> <span class="token punctuation">,</span> <span class="token number">-1.3622</span><span class="token punctuation">,</span>  <span class="token number">4.3437</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于高维数组，transpose需要得到一个由轴编号组成的元组才能对这些轴进行转置（比较费脑子）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">132</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.arange(16).reshape((2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> 4))In <span class="token punctuation">[</span><span class="token number">133</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">133</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">134</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.transpose((1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> 2))Out<span class="token punctuation">[</span><span class="token number">134</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里，第一个轴被换成了第二个，第二个轴被换成了第一个，最后一个轴不变。</p><p>简单的转置可以使用.T，它其实就是进行轴对换而已。ndarray还有一个swapaxes方法，它需要接受一对轴编号：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">135</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">135</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">136</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.swapaxes(1<span class="token punctuation">,</span> 2)Out<span class="token punctuation">[</span><span class="token number">136</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>swapaxes也是返回源数据的视图（不会进行任何复制操作）。</p><h3 id="4-2-通用函数：快速的元素级数组函数"><a href="#4-2-通用函数：快速的元素级数组函数" class="headerlink" title="4.2 通用函数：快速的元素级数组函数"></a>4.2 通用函数：快速的元素级数组函数</h3><p>通用函数（即ufunc）是一种对ndarray中的数据执行元素级运算的函数。你可以将其看做简单函数（接受一个或多个标量值，并产生一个或多个标量值）的矢量化包装器。</p><p>许多ufunc都是简单的元素级变体，如<code>sqrt</code>和<code>exp</code>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.arange(10)In <span class="token punctuation">[</span><span class="token number">138</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">138</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">139</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.sqrt(arr)Out<span class="token punctuation">[</span><span class="token number">139</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">1.</span>    <span class="token punctuation">,</span>  <span class="token number">1.4142</span><span class="token punctuation">,</span>  <span class="token number">1.7321</span><span class="token punctuation">,</span>  <span class="token number">2.</span>    <span class="token punctuation">,</span>  <span class="token number">2.2361</span><span class="token punctuation">,</span>  <span class="token number">2.4495</span><span class="token punctuation">,</span>        <span class="token number">2.6458</span><span class="token punctuation">,</span>  <span class="token number">2.8284</span><span class="token punctuation">,</span>  <span class="token number">3.</span>    <span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.exp(arr)Out<span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>    <span class="token number">1.</span>    <span class="token punctuation">,</span>     <span class="token number">2.7183</span><span class="token punctuation">,</span>     <span class="token number">7.3891</span><span class="token punctuation">,</span>    <span class="token number">20.0855</span><span class="token punctuation">,</span>    <span class="token number">54.5982</span><span class="token punctuation">,</span>         <span class="token number">148.4132</span><span class="token punctuation">,</span>   <span class="token number">403.4288</span><span class="token punctuation">,</span>  <span class="token number">1096.6332</span><span class="token punctuation">,</span>  <span class="token number">2980.958</span> <span class="token punctuation">,</span>  <span class="token number">8103.0839</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些都是一元（unary）ufunc。另外一些（如<code>add</code>或<code>maximum</code>）接受2个数组（因此也叫二元（binary）ufunc），并返回一个结果数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">141</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x = np.random.randn(8)In <span class="token punctuation">[</span><span class="token number">142</span><span class="token punctuation">]</span><span class="token punctuation">:</span> y = np.random.randn(8)In <span class="token punctuation">[</span><span class="token number">143</span><span class="token punctuation">]</span><span class="token punctuation">:</span> xOut<span class="token punctuation">[</span><span class="token number">143</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">-0.0119</span><span class="token punctuation">,</span>  <span class="token number">1.0048</span><span class="token punctuation">,</span>  <span class="token number">1.3272</span><span class="token punctuation">,</span> <span class="token number">-0.9193</span><span class="token punctuation">,</span> <span class="token number">-1.5491</span><span class="token punctuation">,</span>  <span class="token number">0.0222</span><span class="token punctuation">,</span>  <span class="token number">0.7584</span><span class="token punctuation">,</span>       <span class="token number">-0.6605</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">144</span><span class="token punctuation">]</span><span class="token punctuation">:</span> yOut<span class="token punctuation">[</span><span class="token number">144</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0.8626</span><span class="token punctuation">,</span> <span class="token number">-0.01</span>  <span class="token punctuation">,</span>  <span class="token number">0.05</span>  <span class="token punctuation">,</span>  <span class="token number">0.6702</span><span class="token punctuation">,</span>  <span class="token number">0.853</span> <span class="token punctuation">,</span> <span class="token number">-0.9559</span><span class="token punctuation">,</span> <span class="token number">-0.0235</span><span class="token punctuation">,</span>       <span class="token number">-2.3042</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">145</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.maximum(x<span class="token punctuation">,</span> y)Out<span class="token punctuation">[</span><span class="token number">145</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0.8626</span><span class="token punctuation">,</span>  <span class="token number">1.0048</span><span class="token punctuation">,</span>  <span class="token number">1.3272</span><span class="token punctuation">,</span>  <span class="token number">0.6702</span><span class="token punctuation">,</span>  <span class="token number">0.853</span> <span class="token punctuation">,</span>  <span class="token number">0.0222</span><span class="token punctuation">,</span>  <span class="token number">0.7584</span><span class="token punctuation">,</span>          <span class="token number">-0.6605</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，<code>numpy.maximum</code>计算了x和y中元素级别最大的元素。</p><p>虽然并不常见，但有些ufunc的确可以返回多个数组。<code>modf</code>就是一个例子，它是Python内置函数<code>divmod</code>(返回小数)的矢量化版本，<u>它会返回浮点数数组的小数和整数部分</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">146</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.random.randn(7) * 5In <span class="token punctuation">[</span><span class="token number">147</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">147</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">-3.2623</span><span class="token punctuation">,</span> <span class="token number">-6.0915</span><span class="token punctuation">,</span> <span class="token number">-6.663</span> <span class="token punctuation">,</span>  <span class="token number">5.3731</span><span class="token punctuation">,</span>  <span class="token number">3.6182</span><span class="token punctuation">,</span>  <span class="token number">3.45</span>  <span class="token punctuation">,</span>  <span class="token number">5.0077</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">148</span><span class="token punctuation">]</span><span class="token punctuation">:</span> remainder<span class="token punctuation">,</span> whole_part = np.modf(arr)In <span class="token punctuation">[</span><span class="token number">149</span><span class="token punctuation">]</span><span class="token punctuation">:</span> remainderOut<span class="token punctuation">[</span><span class="token number">149</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">-0.2623</span><span class="token punctuation">,</span> <span class="token number">-0.0915</span><span class="token punctuation">,</span> <span class="token number">-0.663</span> <span class="token punctuation">,</span>  <span class="token number">0.3731</span><span class="token punctuation">,</span><span class="token number">0.6182</span><span class="token punctuation">,</span>  <span class="token number">0.45</span>  <span class="token punctuation">,</span>  <span class="token number">0.0077</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">:</span> whole_partOut<span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">-3.</span><span class="token punctuation">,</span> <span class="token number">-6.</span><span class="token punctuation">,</span> <span class="token number">-6.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Ufuncs可以接受一个out可选参数，这样就能在数组原地进行操作：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">151</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">151</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">-3.2623</span><span class="token punctuation">,</span> <span class="token number">-6.0915</span><span class="token punctuation">,</span> <span class="token number">-6.663</span> <span class="token punctuation">,</span>  <span class="token number">5.3731</span><span class="token punctuation">,</span>  <span class="token number">3.6182</span><span class="token punctuation">,</span>  <span class="token number">3.45</span>  <span class="token punctuation">,</span>  <span class="token number">5.0077</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">152</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.sqrt(arr)Out<span class="token punctuation">[</span><span class="token number">152</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>    nan<span class="token punctuation">,</span>     nan<span class="token punctuation">,</span>     nan<span class="token punctuation">,</span>  <span class="token number">2.318</span> <span class="token punctuation">,</span>  <span class="token number">1.9022</span><span class="token punctuation">,</span>  <span class="token number">1.8574</span><span class="token punctuation">,</span>  <span class="token number">2.2378</span><span class="token punctuation">]</span>)<span class="token comment">#影响对象arr</span>In <span class="token punctuation">[</span><span class="token number">153</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.sqrt(arr<span class="token punctuation">,</span> arr)Out<span class="token punctuation">[</span><span class="token number">153</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>    nan<span class="token punctuation">,</span>     nan<span class="token punctuation">,</span>     nan<span class="token punctuation">,</span>  <span class="token number">2.318</span> <span class="token punctuation">,</span>  <span class="token number">1.9022</span><span class="token punctuation">,</span>  <span class="token number">1.8574</span><span class="token punctuation">,</span>  <span class="token number">2.2378</span><span class="token punctuation">]</span>)<span class="token comment">#不影响对象arr</span>In <span class="token punctuation">[</span><span class="token number">154</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">154</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>    nan<span class="token punctuation">,</span>     nan<span class="token punctuation">,</span>     nan<span class="token punctuation">,</span>  <span class="token number">2.318</span> <span class="token punctuation">,</span>  <span class="token number">1.9022</span><span class="token punctuation">,</span>  <span class="token number">1.8574</span><span class="token punctuation">,</span>  <span class="token number">2.2378</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下表分别列出了一些一元和二元ufunc。</p><p><img src="https://tvax2.sinaimg.cn/large/007mx13gly1guqdusy290j60yg0i7jxf02.jpg" alt="快速的元素级数组函数"></p><p><img src="https://tvax4.sinaimg.cn/large/007mx13gly1guqdvwgwrjj60yg0bkdjz02.jpg" alt="快速的元素级数组函数"></p><p><img src="https://tvax1.sinaimg.cn/large/007mx13gly1guqdwlc3ubj60yg07mabp02.jpg" alt="快速的元素级数组函数"></p><p><img src="https://tva4.sinaimg.cn/large/007mx13gly1guqdxnskoqj60yg0ijq8u02.jpg" alt="快速的元素级数组函数"></p><h3 id="4-3-利用数组进行数据处理"><a href="#4-3-利用数组进行数据处理" class="headerlink" title="4.3 利用数组进行数据处理"></a><img src="https://tvax2.sinaimg.cn/large/007mx13gly1guqdxrg4ydj60yg06vjts02.jpg" alt="快速的元素级数组函数">4.3 利用数组进行数据处理</h3><p>NumPy数组使你可以将许多种数据处理任务表述为简洁的数组表达式（否则需要编写循环）。<u>用数组表达式代替循环的做法，通常被称为矢量化。</u>一般来说，矢量化数组运算要比等价的纯Python方式快上一两个数量级（甚至更多），尤其是各种数值计算。在后面内容中（见附录A）我将介绍广播，这是一种针对矢量化计算的强大手段。</p><p>作为简单的例子，假设我们想要在一组值（网格型）上计算函数sqrt(x^2+y^2)。<code>np.meshgrid</code>函数接受两个一维数组，并产生两个二维矩阵（对应于两个数组中所有的(x,y)对）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">155</span><span class="token punctuation">]</span><span class="token punctuation">:</span> points = np.arange(<span class="token punctuation">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> 0.01) <span class="token comment"># 1000 equally spaced points</span>In <span class="token punctuation">[</span><span class="token number">156</span><span class="token punctuation">]</span><span class="token punctuation">:</span> xs<span class="token punctuation">,</span> ys = np.meshgrid(points<span class="token punctuation">,</span> points)In <span class="token punctuation">[</span><span class="token number">157</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ysOut<span class="token punctuation">[</span><span class="token number">157</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-5.</span>  <span class="token punctuation">,</span> <span class="token number">-5.</span>  <span class="token punctuation">,</span> <span class="token number">-5.</span>  <span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span> <span class="token number">-5.</span>  <span class="token punctuation">,</span> <span class="token number">-5.</span>  <span class="token punctuation">,</span> <span class="token number">-5.</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-4.99</span><span class="token punctuation">,</span> <span class="token number">-4.99</span><span class="token punctuation">,</span> <span class="token number">-4.99</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span> <span class="token number">-4.99</span><span class="token punctuation">,</span> <span class="token number">-4.99</span><span class="token punctuation">,</span> <span class="token number">-4.99</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-4.98</span><span class="token punctuation">,</span> <span class="token number">-4.98</span><span class="token punctuation">,</span> <span class="token number">-4.98</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span> <span class="token number">-4.98</span><span class="token punctuation">,</span> <span class="token number">-4.98</span><span class="token punctuation">,</span> <span class="token number">-4.98</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">...</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">4.97</span><span class="token punctuation">,</span>  <span class="token number">4.97</span><span class="token punctuation">,</span>  <span class="token number">4.97</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span>  <span class="token number">4.97</span><span class="token punctuation">,</span>  <span class="token number">4.97</span><span class="token punctuation">,</span>  <span class="token number">4.97</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4.98</span><span class="token punctuation">,</span>  <span class="token number">4.98</span><span class="token punctuation">,</span>  <span class="token number">4.98</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span>  <span class="token number">4.98</span><span class="token punctuation">,</span>  <span class="token number">4.98</span><span class="token punctuation">,</span>  <span class="token number">4.98</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4.99</span><span class="token punctuation">,</span>  <span class="token number">4.99</span><span class="token punctuation">,</span>  <span class="token number">4.99</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span>  <span class="token number">4.99</span><span class="token punctuation">,</span>  <span class="token number">4.99</span><span class="token punctuation">,</span>  <span class="token number">4.99</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，对该函数的求值运算就好办了，把这两个数组当做两个浮点数那样编写表达式即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">158</span><span class="token punctuation">]</span><span class="token punctuation">:</span> z = np.sqrt(xs <span class="token important">**</span> 2 + ys <span class="token important">**</span> 2)In <span class="token punctuation">[</span><span class="token number">159</span><span class="token punctuation">]</span><span class="token punctuation">:</span> zOut<span class="token punctuation">[</span><span class="token number">159</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">7.0711</span><span class="token punctuation">,</span>  <span class="token number">7.064</span> <span class="token punctuation">,</span>  <span class="token number">7.0569</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span>  <span class="token number">7.0499</span><span class="token punctuation">,</span>  <span class="token number">7.0569</span><span class="token punctuation">,</span>  <span class="token number">7.064</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">7.064</span> <span class="token punctuation">,</span>  <span class="token number">7.0569</span><span class="token punctuation">,</span>  <span class="token number">7.0499</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span>  <span class="token number">7.0428</span><span class="token punctuation">,</span>  <span class="token number">7.0499</span><span class="token punctuation">,</span>  <span class="token number">7.0569</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">7.0569</span><span class="token punctuation">,</span>  <span class="token number">7.0499</span><span class="token punctuation">,</span>  <span class="token number">7.0428</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span>  <span class="token number">7.0357</span><span class="token punctuation">,</span>  <span class="token number">7.0428</span><span class="token punctuation">,</span> <span class="token number">7.0499</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">...</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">7.0499</span><span class="token punctuation">,</span>  <span class="token number">7.0428</span><span class="token punctuation">,</span>  <span class="token number">7.0357</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span>  <span class="token number">7.0286</span><span class="token punctuation">,</span>  <span class="token number">7.0357</span><span class="token punctuation">,</span>  <span class="token number">7.0428</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">7.0569</span><span class="token punctuation">,</span>  <span class="token number">7.0499</span><span class="token punctuation">,</span>  <span class="token number">7.0428</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span>  <span class="token number">7.0357</span><span class="token punctuation">,</span>  <span class="token number">7.0428</span><span class="token punctuation">,</span>  <span class="token number">7.0499</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">7.064</span> <span class="token punctuation">,</span>  <span class="token number">7.0569</span><span class="token punctuation">,</span>  <span class="token number">7.0499</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span>  <span class="token number">7.0428</span><span class="token punctuation">,</span>  <span class="token number">7.0499</span><span class="token punctuation">,</span>  <span class="token number">7.0569</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作为第9章的先导，我用<code>matplotlib</code>创建了这个二维数组的可视化：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">160</span><span class="token punctuation">]</span><span class="token punctuation">:</span> import matplotlib.pyplot as pltIn <span class="token punctuation">[</span><span class="token number">161</span><span class="token punctuation">]</span><span class="token punctuation">:</span> plt.imshow(z<span class="token punctuation">,</span> cmap=plt.cm.gray); plt.colorbar()Out<span class="token punctuation">[</span><span class="token number">161</span><span class="token punctuation">]</span><span class="token punctuation">:</span> &lt;matplotlib.colorbar.Colorbar at 0x7f715e3fa630<span class="token punctuation">&gt;</span>In <span class="token punctuation">[</span><span class="token number">162</span><span class="token punctuation">]</span><span class="token punctuation">:</span> plt.title("Image plot of $\sqrt<span class="token punctuation">{</span>x^2 + y^2<span class="token punctuation">}</span>$ for a grid of values")Out<span class="token punctuation">[</span><span class="token number">162</span><span class="token punctuation">]</span><span class="token punctuation">:</span> &lt;matplotlib.text.Text at 0x7f715d2de748<span class="token punctuation">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下图是用<code>matplotlib</code>的<code>imshow</code>函数创建的。</p><p><img src="https://tva1.sinaimg.cn/large/007mx13gly1guqe73hxqpj608a07k74p02.jpg" alt="根据网格对函数求值的结果"></p><h4 id="将条件逻辑表述为数组运算"><a href="#将条件逻辑表述为数组运算" class="headerlink" title="将条件逻辑表述为数组运算"></a>将条件逻辑表述为数组运算</h4><p><code>numpy.where</code>函数是三元表达式<code>x if condition else y</code>的矢量化版本。假设我们有一个布尔数组和两个值数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">165</span><span class="token punctuation">]</span><span class="token punctuation">:</span> xarr = np.array(<span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">1.3</span><span class="token punctuation">,</span> <span class="token number">1.4</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">166</span><span class="token punctuation">]</span><span class="token punctuation">:</span> yarr = np.array(<span class="token punctuation">[</span><span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token number">2.4</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">167</span><span class="token punctuation">]</span><span class="token punctuation">:</span> cond = np.array(<span class="token punctuation">[</span><span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>假设我们想要根据cond中的值选取xarr和yarr的值：当cond中的值为True时，选取xarr的值，否则从yarr中选取。列表推导式的写法应该如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">168</span><span class="token punctuation">]</span><span class="token punctuation">:</span> result = <span class="token punctuation">[</span><span class="token key atrule">(x if c else y)   .....</span><span class="token punctuation">:</span>           for x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> c in zip(xarr<span class="token punctuation">,</span> yarr<span class="token punctuation">,</span> cond)<span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">169</span><span class="token punctuation">]</span><span class="token punctuation">:</span> resultOut<span class="token punctuation">[</span><span class="token number">169</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1.1000000000000001</span><span class="token punctuation">,</span> <span class="token number">2.2000000000000002</span><span class="token punctuation">,</span> <span class="token number">1.3</span><span class="token punctuation">,</span> <span class="token number">1.3999999999999999</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这有几个问题。第一，它对大数组的处理速度不是很快（因为所有工作都是由纯Python完成的）。第二，无法用于多维数组。若使用<code>np.where</code>，则可以将该功能写得非常简洁：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">:</span> result = np.where(cond<span class="token punctuation">,</span> xarr<span class="token punctuation">,</span> yarr)In <span class="token punctuation">[</span><span class="token number">171</span><span class="token punctuation">]</span><span class="token punctuation">:</span> resultOut<span class="token punctuation">[</span><span class="token number">171</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">1.1</span><span class="token punctuation">,</span>  <span class="token number">2.2</span><span class="token punctuation">,</span>  <span class="token number">1.3</span><span class="token punctuation">,</span>  <span class="token number">1.4</span><span class="token punctuation">,</span>  <span class="token number">2.5</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>np.where</code>的第二个和第三个参数不必是数组，它们都可以是标量值。在数据分析工作中，where通常用于根据另一个数组而产生一个新的数组。假设有一个由随机数据组成的矩阵，你希望将所有正值替换为2，将所有负值替换为－2。若利用np.where，则会非常简单：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">172</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.random.randn(4<span class="token punctuation">,</span> 4)In <span class="token punctuation">[</span><span class="token number">173</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">173</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-0.5031</span><span class="token punctuation">,</span> <span class="token number">-0.6223</span><span class="token punctuation">,</span> <span class="token number">-0.9212</span><span class="token punctuation">,</span> <span class="token number">-0.7262</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.2229</span><span class="token punctuation">,</span>  <span class="token number">0.0513</span><span class="token punctuation">,</span> <span class="token number">-1.1577</span><span class="token punctuation">,</span>  <span class="token number">0.8167</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.4336</span><span class="token punctuation">,</span>  <span class="token number">1.0107</span><span class="token punctuation">,</span>  <span class="token number">1.8249</span><span class="token punctuation">,</span> <span class="token number">-0.9975</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.8506</span><span class="token punctuation">,</span> <span class="token number">-0.1316</span><span class="token punctuation">,</span>  <span class="token number">0.9124</span><span class="token punctuation">,</span>  <span class="token number">0.1882</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">174</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr <span class="token punctuation">&gt;</span> 0Out<span class="token punctuation">[</span><span class="token number">174</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=bool)In <span class="token punctuation">[</span><span class="token number">175</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.where(arr <span class="token punctuation">&gt;</span> 0<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">-</span>2)Out<span class="token punctuation">[</span><span class="token number">175</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-2</span><span class="token punctuation">,</span> <span class="token number">-2</span><span class="token punctuation">,</span> <span class="token number">-2</span><span class="token punctuation">,</span> <span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">-2</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">-2</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>np.where</code>，可以将标量和数组结合起来。例如，我可用常数2替换arr中所有正的值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">176</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.where(arr <span class="token punctuation">&gt;</span> 0<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> arr) <span class="token comment"># set only positive values to 2Out[176]: array([[-0.5031, -0.6223, -0.9212, -0.7262],       [ 2.    ,  2.    , -1.1577,  2.    ],       [ 2.    ,  2.    ,  2.    , -0.9975],       [ 2.    , -0.1316,  2.    ,  2.    ]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传递给where的数组大小可以不相等，甚至可以是标量值。</p><h4 id="数学和统计方法"><a href="#数学和统计方法" class="headerlink" title="数学和统计方法"></a>数学和统计方法</h4><p>可以通过数组上的一组数学函数对整个数组或某个轴向的数据进行统计计算。<code>sum、mean</code>以及标准差<code>std</code>等聚合计算（aggregation，通常叫做约简（reduction））既可以当做数组的实例方法调用，也可以当做顶级NumPy函数使用。</p><p>这里，我生成了一些正态分布随机数据，然后做了聚类统计：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">177</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.random.randn(5<span class="token punctuation">,</span> 4)In <span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">2.1695</span><span class="token punctuation">,</span> <span class="token number">-0.1149</span><span class="token punctuation">,</span>  <span class="token number">2.0037</span><span class="token punctuation">,</span>  <span class="token number">0.0296</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.7953</span><span class="token punctuation">,</span>  <span class="token number">0.1181</span><span class="token punctuation">,</span> <span class="token number">-0.7485</span><span class="token punctuation">,</span>  <span class="token number">0.585</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.1527</span><span class="token punctuation">,</span> <span class="token number">-1.5657</span><span class="token punctuation">,</span> <span class="token number">-0.5625</span><span class="token punctuation">,</span> <span class="token number">-0.0327</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.929</span> <span class="token punctuation">,</span> <span class="token number">-0.4826</span><span class="token punctuation">,</span> <span class="token number">-0.0363</span><span class="token punctuation">,</span>  <span class="token number">1.0954</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.9809</span><span class="token punctuation">,</span> <span class="token number">-0.5895</span><span class="token punctuation">,</span>  <span class="token number">1.5817</span><span class="token punctuation">,</span> <span class="token number">-0.5287</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">179</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.mean()Out<span class="token punctuation">[</span><span class="token number">179</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 0.19607051119998253In <span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.mean(arr)Out<span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 0.19607051119998253In <span class="token punctuation">[</span><span class="token number">181</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.sum()Out<span class="token punctuation">[</span><span class="token number">181</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">3.9214102239996507</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mean和sum这类的函数可以接受一个axis选项参数，用于计算该轴向上的统计值，最终结果是一个<u>少一维的数组</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">182</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.mean(axis=1)Out<span class="token punctuation">[</span><span class="token number">182</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">1.022</span> <span class="token punctuation">,</span>  <span class="token number">0.1875</span><span class="token punctuation">,</span> <span class="token number">-0.502</span> <span class="token punctuation">,</span> <span class="token number">-0.0881</span><span class="token punctuation">,</span>  <span class="token number">0.3611</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">183</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.sum(axis=0)Out<span class="token punctuation">[</span><span class="token number">183</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">3.1693</span><span class="token punctuation">,</span> <span class="token number">-2.6345</span><span class="token punctuation">,</span>  <span class="token number">2.2381</span><span class="token punctuation">,</span>  <span class="token number">1.1486</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里，<code>arr.mean(1)</code>是“计算行的平均值”，<code>arr.sum(0)</code>是“计算每列的和”。</p><p>其他如cumsum和cumprod之类的方法则不聚合，而是产生一个由中间结果组成的数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">184</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.array(<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">185</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.cumsum()Out<span class="token punctuation">[</span><span class="token number">185</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在多维数组中，累加函数（如cumsum）返回的是同样大小的数组，但是会根据每个低维的切片沿着标记轴计算部分聚类：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">186</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">187</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">187</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">188</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.cumsum(axis=0)Out<span class="token punctuation">[</span><span class="token number">188</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">189</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.cumprod(axis=1)Out<span class="token punctuation">[</span><span class="token number">189</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">336</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下表列出了全部的基本数组统计方法。后续章节中有很多例子都会用到这些方法。</p><p><img src="https://tvax3.sinaimg.cn/large/007mx13gly1guqeinaiw4j60yg0b577s02.jpg" alt="利用数组进行数据处理"></p><p><img src="https://tva1.sinaimg.cn/large/007mx13gly1guqeiuk84mj60yg06dwfs02.jpg" alt=" 利用数组进行数据处理"></p><h4 id="用于布尔型数组的方法"><a href="#用于布尔型数组的方法" class="headerlink" title="用于布尔型数组的方法"></a>用于布尔型数组的方法</h4><p>在上面这些方法中，布尔值会被强制转换为1（True）和0（False）。因此，sum经常被用来对布尔型数组中的True值计数：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">190</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.random.randn(100)In <span class="token punctuation">[</span><span class="token number">191</span><span class="token punctuation">]</span><span class="token punctuation">:</span> (arr <span class="token punctuation">&gt;</span> 0).sum() <span class="token comment"># Number of positive valuesOut[191]: 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外还有两个方法<code>any</code>和<code>all</code>，它们对布尔型数组非常有用。<code>any</code>用于测试数组中是否存在一个或多个<code>True</code>，而<code>all</code>则检查数组中所有值是否都是<code>True</code>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">192</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bools = np.array(<span class="token punctuation">[</span><span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">193</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bools.any()Out<span class="token punctuation">[</span><span class="token number">193</span><span class="token punctuation">]</span><span class="token punctuation">:</span> TrueIn <span class="token punctuation">[</span><span class="token number">194</span><span class="token punctuation">]</span><span class="token punctuation">:</span> bools.all()Out<span class="token punctuation">[</span><span class="token number">194</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这两个方法也能用于非布尔型数组，所有非0元素将会被当做True。</p><h4 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h4><p>跟Python内置的列表类型一样，NumPy数组也可以通过sort方法就地排序：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">195</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.random.randn(6)In <span class="token punctuation">[</span><span class="token number">196</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">196</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0.6095</span><span class="token punctuation">,</span> <span class="token number">-0.4938</span><span class="token punctuation">,</span>  <span class="token number">1.24</span>  <span class="token punctuation">,</span> <span class="token number">-0.1357</span><span class="token punctuation">,</span>  <span class="token number">1.43</span>  <span class="token punctuation">,</span> <span class="token number">-0.8469</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">197</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.sort()In <span class="token punctuation">[</span><span class="token number">198</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">198</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">-0.8469</span><span class="token punctuation">,</span> <span class="token number">-0.4938</span><span class="token punctuation">,</span> <span class="token number">-0.1357</span><span class="token punctuation">,</span>  <span class="token number">0.6095</span><span class="token punctuation">,</span>  <span class="token number">1.24</span>  <span class="token punctuation">,</span>  <span class="token number">1.43</span>  <span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多维数组可以在任何一个轴向上进行排序，只需将轴编号传给sort即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">199</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.random.randn(5<span class="token punctuation">,</span> 3)In <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.6033</span><span class="token punctuation">,</span>  <span class="token number">1.2636</span><span class="token punctuation">,</span> <span class="token number">-0.2555</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.4457</span><span class="token punctuation">,</span>  <span class="token number">0.4684</span><span class="token punctuation">,</span> <span class="token number">-0.9616</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-1.8245</span><span class="token punctuation">,</span>  <span class="token number">0.6254</span><span class="token punctuation">,</span>  <span class="token number">1.0229</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1.1074</span><span class="token punctuation">,</span>  <span class="token number">0.0909</span><span class="token punctuation">,</span> <span class="token number">-0.3501</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.218</span> <span class="token punctuation">,</span> <span class="token number">-0.8948</span><span class="token punctuation">,</span> <span class="token number">-1.7415</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr.sort(1)In <span class="token punctuation">[</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-0.2555</span><span class="token punctuation">,</span>  <span class="token number">0.6033</span><span class="token punctuation">,</span>  <span class="token number">1.2636</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.9616</span><span class="token punctuation">,</span> <span class="token number">-0.4457</span><span class="token punctuation">,</span>  <span class="token number">0.4684</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-1.8245</span><span class="token punctuation">,</span>  <span class="token number">0.6254</span><span class="token punctuation">,</span>  <span class="token number">1.0229</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.3501</span><span class="token punctuation">,</span>  <span class="token number">0.0909</span><span class="token punctuation">,</span>  <span class="token number">1.1074</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-1.7415</span><span class="token punctuation">,</span> <span class="token number">-0.8948</span><span class="token punctuation">,</span>  <span class="token number">0.218</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>顶级方法np.sort返回的是数组的已排序副本，而就地排序则会修改数组本身。计算数组分位数最简单的办法是对其进行排序，然后选取特定位置的值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">203</span><span class="token punctuation">]</span><span class="token punctuation">:</span> large_arr = np.random.randn(1000)In <span class="token punctuation">[</span><span class="token number">204</span><span class="token punctuation">]</span><span class="token punctuation">:</span> large_arr.sort()In <span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">:</span> large_arr<span class="token punctuation">[</span>int(0.05 * len(large_arr))<span class="token punctuation">]</span> <span class="token comment"># 5% quantileOut[205]: -1.5311513550102103</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更多关于NumPy排序方法以及诸如间接排序之类的高级技术，请参阅附录A。在pandas中还可以找到一些其他跟排序有关的数据操作（比如根据一列或多列对表格型数据进行排序）。<br>唯一化以及其它的集合逻辑</p><p>NumPy提供了一些针对一维ndarray的基本集合运算。最常用的可能要数<code>np.unique</code>了，它用于找出数组中的唯一值并返回已排序的结果：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">206</span><span class="token punctuation">]</span><span class="token punctuation">:</span> names = np.array(<span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">207</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.unique(names)Out<span class="token punctuation">[</span><span class="token number">207</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      dtype='&lt;U4')In <span class="token punctuation">[</span><span class="token number">208</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ints = np.array(<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">209</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.unique(ints)Out<span class="token punctuation">[</span><span class="token number">209</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿跟np.unique等价的纯Python代码来对比一下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sorted(set(names))Out<span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Joe'</span><span class="token punctuation">,</span> <span class="token string">'Will'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一个函数<code>np.in1d</code>用于测试一个数组中的值在另一个数组中的成员资格，返回一个布尔型数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">211</span><span class="token punctuation">]</span><span class="token punctuation">:</span> values = np.array(<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">212</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.in1d(values<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">212</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=bool)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>NumPy中的集合函数请参见下表。<br><img src="https://tva1.sinaimg.cn/large/007mx13gly1guqes9xyq2j60yg0ds0xj02.jpg" alt="利用数组进行数据处理 "></p><h3 id="4-4-用于数组的文件输入输出"><a href="#4-4-用于数组的文件输入输出" class="headerlink" title="4.4 用于数组的文件输入输出"></a>4.4 用于数组的文件输入输出</h3><p><code>NumPy</code>能够读写磁盘上的文本数据或二进制数据。这一小节只讨论<code>NumPy</code>的内置二进制格式，因为更多的用户会使用pandas或其它工具加载文本或表格数据（见第6章）。</p><p><code>np.save</code>和<code>np.load</code>是读写磁盘数组数据的两个主要函数。默认情况下，数组是以未压缩的原始二进制格式保存在扩展名为.npy的文件中的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">213</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.arange(10)In <span class="token punctuation">[</span><span class="token number">214</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.save('some_array'<span class="token punctuation">,</span> arr)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果文件路径末尾没有扩展名.npy，则该扩展名会被自动加上。然后就可以通过np.load读取磁盘上的数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">215</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.load('some_array.npy')Out<span class="token punctuation">[</span><span class="token number">215</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过np.savez可以将多个数组保存到一个未压缩文件中，将数组以关键字参数的形式传入即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">216</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.savez('array_archive.npz'<span class="token punctuation">,</span> a=arr<span class="token punctuation">,</span> b=arr)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加载.npz文件时，你会得到一个类似字典的对象，该对象会对各个数组进行延迟加载：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">217</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arch = np.load('array_archive.npz')In <span class="token punctuation">[</span><span class="token number">218</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arch<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">218</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要将数据压缩，可以使用numpy.savez_compressed：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">219</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.savez_compressed('arrays_compressed.npz'<span class="token punctuation">,</span> a=arr<span class="token punctuation">,</span> b=arr)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-5-线性代数"><a href="#4-5-线性代数" class="headerlink" title="4.5 线性代数"></a>4.5 线性代数</h3><p>线性代数（如矩阵乘法、矩阵分解、行列式以及其他方阵数学等）是任何数组库的重要组成部分。不像某些语言（如MATLAB），通过*对两个二维数组相乘得到的是一个元素级的积，而不是一个矩阵点积。因此，NumPy提供了一个用于矩阵乘法的dot函数（既是一个数组方法也是numpy命名空间中的一个函数）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">223</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x = np.array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">2.</span><span class="token punctuation">,</span> <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4.</span><span class="token punctuation">,</span> <span class="token number">5.</span><span class="token punctuation">,</span> <span class="token number">6.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">224</span><span class="token punctuation">]</span><span class="token punctuation">:</span> y = np.array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">6.</span><span class="token punctuation">,</span> <span class="token number">23.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">225</span><span class="token punctuation">]</span><span class="token punctuation">:</span> xOut<span class="token punctuation">[</span><span class="token number">225</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">2.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">5.</span><span class="token punctuation">,</span>  <span class="token number">6.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">226</span><span class="token punctuation">]</span><span class="token punctuation">:</span> yOut<span class="token punctuation">[</span><span class="token number">226</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">23.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">-1.</span><span class="token punctuation">,</span>   <span class="token number">7.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">8.</span><span class="token punctuation">,</span>   <span class="token number">9.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">227</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x.dot(y)Out<span class="token punctuation">[</span><span class="token number">227</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">28.</span><span class="token punctuation">,</span>   <span class="token number">64.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">67.</span><span class="token punctuation">,</span>  <span class="token number">181.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>x.dot(y)等价于np.dot(x, y)：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">228</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.dot(x<span class="token punctuation">,</span> y)Out<span class="token punctuation">[</span><span class="token number">228</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">28.</span><span class="token punctuation">,</span>   <span class="token number">64.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">67.</span><span class="token punctuation">,</span>  <span class="token number">181.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一个二维数组跟一个大小合适的一维数组的矩阵点积运算之后将会得到一个一维数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">229</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.dot(x<span class="token punctuation">,</span> np.ones(3))Out<span class="token punctuation">[</span><span class="token number">229</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>  <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">15.</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>@</code>符（类似Python 3.5）也可以用作中缀运算符，进行矩阵乘法：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">230</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x @ np.ones(3)Out<span class="token punctuation">[</span><span class="token number">230</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span>  <span class="token number">6.</span><span class="token punctuation">,</span>  <span class="token number">15.</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>numpy.linalg中有一组标准的矩阵分解运算以及诸如求逆和行列式之类的东西。它们跟MATLAB和R等语言所使用的是相同的行业标准线性代数库，如BLAS、LAPACK、Intel MKL（Math Kernel Library，可能有，取决于你的NumPy版本）等：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">231</span><span class="token punctuation">]</span><span class="token punctuation">:</span> from numpy.linalg import inv<span class="token punctuation">,</span> qrIn <span class="token punctuation">[</span><span class="token number">232</span><span class="token punctuation">]</span><span class="token punctuation">:</span> X = np.random.randn(5<span class="token punctuation">,</span> 5)In <span class="token punctuation">[</span><span class="token number">233</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mat = X.T.dot(X)In <span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">:</span> inv(mat)Out<span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">933.1189</span><span class="token punctuation">,</span>   <span class="token number">871.8258</span><span class="token punctuation">,</span> <span class="token number">-1417.6902</span><span class="token punctuation">,</span> <span class="token number">-1460.4005</span><span class="token punctuation">,</span>  <span class="token number">1782.1391</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">871.8258</span><span class="token punctuation">,</span>   <span class="token number">815.3929</span><span class="token punctuation">,</span> <span class="token number">-1325.9965</span><span class="token punctuation">,</span> <span class="token number">-1365.9242</span><span class="token punctuation">,</span>  <span class="token number">1666.9347</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-1417.6902</span><span class="token punctuation">,</span> <span class="token number">-1325.9965</span><span class="token punctuation">,</span>  <span class="token number">2158.4424</span><span class="token punctuation">,</span>  <span class="token number">2222.0191</span><span class="token punctuation">,</span> <span class="token number">-2711.6822</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-1460.4005</span><span class="token punctuation">,</span> <span class="token number">-1365.9242</span><span class="token punctuation">,</span>  <span class="token number">2222.0191</span><span class="token punctuation">,</span>  <span class="token number">2289.0575</span><span class="token punctuation">,</span> <span class="token number">-2793.422</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">1782.1391</span><span class="token punctuation">,</span>  <span class="token number">1666.9347</span><span class="token punctuation">,</span> <span class="token number">-2711.6822</span><span class="token punctuation">,</span> <span class="token number">-2793.422</span> <span class="token punctuation">,</span>  <span class="token number">3409.5128</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">235</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mat.dot(inv(mat))Out<span class="token punctuation">[</span><span class="token number">235</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">-0.</span><span class="token punctuation">,</span> <span class="token number">-0.</span><span class="token punctuation">,</span> <span class="token number">-0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">-0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">236</span><span class="token punctuation">]</span><span class="token punctuation">:</span> q<span class="token punctuation">,</span> r = qr(mat)In <span class="token punctuation">[</span><span class="token number">237</span><span class="token punctuation">]</span><span class="token punctuation">:</span> rOut<span class="token punctuation">[</span><span class="token number">237</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">-1.6914</span><span class="token punctuation">,</span>  <span class="token number">4.38</span>  <span class="token punctuation">,</span>  <span class="token number">0.1757</span><span class="token punctuation">,</span>  <span class="token number">0.4075</span><span class="token punctuation">,</span> <span class="token number">-0.7838</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span>    <span class="token punctuation">,</span> <span class="token number">-2.6436</span><span class="token punctuation">,</span>  <span class="token number">0.1939</span><span class="token punctuation">,</span> <span class="token number">-3.072</span> <span class="token punctuation">,</span> <span class="token number">-1.0702</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span> <span class="token number">-0.8138</span><span class="token punctuation">,</span>  <span class="token number">1.5414</span><span class="token punctuation">,</span>  <span class="token number">0.6155</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span> <span class="token number">-2.6445</span><span class="token punctuation">,</span> <span class="token number">-2.1669</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.</span>    <span class="token punctuation">,</span>  <span class="token number">0.0002</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表达式X.T.dot(X)计算X和它的转置X.T的点积。</p><p>下表中列出了一些最常用的线性代数函数。</p><p><img src="https://tvax1.sinaimg.cn/large/007mx13gly1guquel4jgaj60xu0l478x02.jpg" alt="线性代数函数"></p><h3 id="4-6-伪随机数生成"><a href="#4-6-伪随机数生成" class="headerlink" title="4.6 伪随机数生成"></a>4.6 伪随机数生成</h3><p><code>numpy.random</code>模块对Python内置的random进行了补充，增加了一些用于高效生成多种概率分布的样本值的函数。例如，你可以用normal来得到一个标准正态分布的4×4样本数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">238</span><span class="token punctuation">]</span><span class="token punctuation">:</span> samples = np.random.normal(size=(4<span class="token punctuation">,</span> 4))In <span class="token punctuation">[</span><span class="token number">239</span><span class="token punctuation">]</span><span class="token punctuation">:</span> samplesOut<span class="token punctuation">[</span><span class="token number">239</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.5732</span><span class="token punctuation">,</span>  <span class="token number">0.1933</span><span class="token punctuation">,</span>  <span class="token number">0.4429</span><span class="token punctuation">,</span>  <span class="token number">1.2796</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.575</span> <span class="token punctuation">,</span>  <span class="token number">0.4339</span><span class="token punctuation">,</span> <span class="token number">-0.7658</span><span class="token punctuation">,</span> <span class="token number">-1.237</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">-0.5367</span><span class="token punctuation">,</span>  <span class="token number">1.8545</span><span class="token punctuation">,</span> <span class="token number">-0.92</span>  <span class="token punctuation">,</span> <span class="token number">-0.1082</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">0.1525</span><span class="token punctuation">,</span>  <span class="token number">0.9435</span><span class="token punctuation">,</span> <span class="token number">-1.0953</span><span class="token punctuation">,</span> <span class="token number">-0.144</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而Python内置的random模块则只能一次生成一个样本值。从下面的测试结果中可以看出，如果需要产生大量样本值，<code>numpy.random</code>快了不止一个数量级：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">]</span><span class="token punctuation">:</span> from random import normalvariateIn <span class="token punctuation">[</span><span class="token number">241</span><span class="token punctuation">]</span><span class="token punctuation">:</span> N = 1000000In <span class="token punctuation">[</span><span class="token number">242</span><span class="token punctuation">]</span><span class="token punctuation">:</span> %timeit samples = <span class="token punctuation">[</span>normalvariate(0<span class="token punctuation">,</span> 1) for _ in range(N)<span class="token punctuation">]</span>1.77 s +<span class="token punctuation">-</span> 126 ms per loop (mean +<span class="token punctuation">-</span> std. dev. of 7 runs<span class="token punctuation">,</span> 1 loop each)In <span class="token punctuation">[</span><span class="token number">243</span><span class="token punctuation">]</span><span class="token punctuation">:</span> %timeit np.random.normal(size=N)61.7 ms +<span class="token punctuation">-</span> 1.32 ms per loop (mean +<span class="token punctuation">-</span> std. dev. of 7 runs<span class="token punctuation">,</span> 10 loops each)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们说这些都是伪随机数，是因为它们都是通过算法基于随机数生成器种子，在确定性的条件下生成的。你可以用NumPy的np.random.seed更改随机数生成种子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">244</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.random.seed(1234)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>numpy.random的数据生成函数使用了全局的随机种子。要避免全局状态，你可以使用numpy.random.RandomState，创建一个与其它隔离的随机数生成器：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">245</span><span class="token punctuation">]</span><span class="token punctuation">:</span> rng = np.random.RandomState(1234)In <span class="token punctuation">[</span><span class="token number">246</span><span class="token punctuation">]</span><span class="token punctuation">:</span> rng.randn(10)Out<span class="token punctuation">[</span><span class="token number">246</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0.4714</span><span class="token punctuation">,</span> <span class="token number">-1.191</span> <span class="token punctuation">,</span>  <span class="token number">1.4327</span><span class="token punctuation">,</span> <span class="token number">-0.3127</span><span class="token punctuation">,</span> <span class="token number">-0.7206</span><span class="token punctuation">,</span>  <span class="token number">0.8872</span><span class="token punctuation">,</span>  <span class="token number">0.8596</span><span class="token punctuation">,</span>       <span class="token number">-0.6365</span><span class="token punctuation">,</span>  <span class="token number">0.0157</span><span class="token punctuation">,</span> <span class="token number">-2.2427</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下表列出了<code>numpy.random</code>中的部分函数。在下一节中，我将给出一些利用这些函数一次性生成大量样本值的范例。</p><p><img src="https://tvax1.sinaimg.cn/large/007mx13gly1guqux37jlcj60yg0hen2h02.jpg" alt="伪随机数生成"></p><p><img src="https://tvax2.sinaimg.cn/large/007mx13gly1guqupxmswzj60yg07xdhs02.jpg" alt="伪随机数生成"></p><h3 id="4-7-示例：随机漫步"><a href="#4-7-示例：随机漫步" class="headerlink" title="4.7 示例：随机漫步"></a>4.7 示例：随机漫步</h3><p>我们通过模拟随机漫步来说明如何运用数组运算。先来看一个简单的随机漫步的例子：从0开始，步长1和－1出现的概率相等。</p><p>下面是一个通过内置的<code>random</code>模块以纯Python的方式实现1000步的随机漫步：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">247</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">import random   .....</span><span class="token punctuation">:</span> <span class="token key atrule">position = 0   .....</span><span class="token punctuation">:</span> walk = <span class="token punctuation">[</span>position<span class="token punctuation">]</span>   <span class="token punctuation">...</span>..<span class="token punctuation">:</span> <span class="token key atrule">steps = 1000   .....</span><span class="token punctuation">:</span> <span class="token key atrule">for i in range(steps)</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     step = 1 if random.randint(0<span class="token punctuation">,</span> <span class="token key atrule">1) else -1   .....</span><span class="token punctuation">:</span>     <span class="token key atrule">position += step   .....</span><span class="token punctuation">:</span>     walk.append(position)   <span class="token punctuation">...</span>..<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>图4-4是根据前100个随机漫步值生成的折线图：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">249</span><span class="token punctuation">]</span><span class="token punctuation">:</span> plt.plot(walk<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://tva2.sinaimg.cn/large/007mx13gly1guqv95lkbxj60ah06w74v02.jpg" alt="简单的随机漫步"></p><p>不难看出，这其实就是随机漫步中各步的累计和，可以用一个数组运算来实现。因此，我用<code>np.random</code>模块一次性随机产生1000个“掷硬币”结果（即两个数中任选一个），将其分别设置为1或－1，然后计算累计和：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">251</span><span class="token punctuation">]</span><span class="token punctuation">:</span> nsteps = 1000In <span class="token punctuation">[</span><span class="token number">252</span><span class="token punctuation">]</span><span class="token punctuation">:</span> draws = np.random.randint(0<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> size=nsteps)In <span class="token punctuation">[</span><span class="token number">253</span><span class="token punctuation">]</span><span class="token punctuation">:</span> steps = np.where(draws <span class="token punctuation">&gt;</span> 0<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">-</span>1)In <span class="token punctuation">[</span><span class="token number">254</span><span class="token punctuation">]</span><span class="token punctuation">:</span> walk = steps.cumsum()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有了这些数据之后，我们就可以沿着漫步路径做一些统计工作了，比如求取最大值和最小值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">:</span> walk.min()Out<span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>3In <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">:</span> walk.max()Out<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">31</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在来看一个复杂点的统计任务——首次穿越时间，即随机漫步过程中第一次到达某个特定值的时间。假设我们想要知道本次随机漫步需要多久才能距离初始0点至少10步远（任一方向均可）。np.abs(walk)&gt;=10可以得到一个布尔型数组，它表示的是距离是否达到或超过10，而我们想要知道的是第一个10或－10的索引。可以用argmax来解决这个问题，它返回的是该布尔型数组第一个最大值的索引（True就是最大值）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">257</span><span class="token punctuation">]</span><span class="token punctuation">:</span> (np.abs(walk) <span class="token punctuation">&gt;</span>= 10).argmax()Out<span class="token punctuation">[</span><span class="token number">257</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">37</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，这里使用argmax并不是很高效，因为它无论如何都会对数组进行完全扫描。在本例中，只要发现了一个True，那我们就知道它是个最大值了。</p><h4 id="一次模拟多个随机漫步"><a href="#一次模拟多个随机漫步" class="headerlink" title="一次模拟多个随机漫步"></a>一次模拟多个随机漫步</h4><p>如果你希望模拟多个随机漫步过程（比如5000个），只需对上面的代码做一点点修改即可生成所有的随机漫步过程。只要给<code>numpy.random</code>的函数传入一个二元元组就可以产生一个二维数组，然后我们就可以一次性计算5000个随机漫步过程（一行一个）的累计和了：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">258</span><span class="token punctuation">]</span><span class="token punctuation">:</span> nwalks = 5000In <span class="token punctuation">[</span><span class="token number">259</span><span class="token punctuation">]</span><span class="token punctuation">:</span> nsteps = 1000In <span class="token punctuation">[</span><span class="token number">260</span><span class="token punctuation">]</span><span class="token punctuation">:</span> draws = np.random.randint(0<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> size=(nwalks<span class="token punctuation">,</span> nsteps)) <span class="token comment"># 0 or 1In [261]: steps = np.where(draws &gt; 0, 1, -1)In [262]: walks = steps.cumsum(1)In [263]: walksOut[263]: array([[  1,   0,   1, ...,   8,   7,   8],       [  1,   0,  -1, ...,  34,  33,  32],       [  1,   0,  -1, ...,   4,   5,   4],       ...,        [  1,   2,   1, ...,  24,  25,  26],       [  1,   2,   3, ...,  14,  13,  14],       [ -1,  -2,  -3, ..., -24, -23, -22]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，我们来计算所有随机漫步过程的最大值和最小值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">264</span><span class="token punctuation">]</span><span class="token punctuation">:</span> walks.max()Out<span class="token punctuation">[</span><span class="token number">264</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 138In <span class="token punctuation">[</span><span class="token number">265</span><span class="token punctuation">]</span><span class="token punctuation">:</span> walks.min()Out<span class="token punctuation">[</span><span class="token number">265</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">-133</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到这些数据之后，我们来计算30或－30的最小穿越时间。这里稍微复杂些，因为不是5000个过程都到达了30。我们可以用any方法来对此进行检查：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">266</span><span class="token punctuation">]</span><span class="token punctuation">:</span> hits30 = (np.abs(walks) <span class="token punctuation">&gt;</span>= 30).any(1)In <span class="token punctuation">[</span><span class="token number">267</span><span class="token punctuation">]</span><span class="token punctuation">:</span> hits30Out<span class="token punctuation">[</span><span class="token number">267</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">,</span>  <span class="token boolean important">True</span><span class="token punctuation">,</span> <span class="token boolean important">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=bool)In <span class="token punctuation">[</span><span class="token number">268</span><span class="token punctuation">]</span><span class="token punctuation">:</span> hits30.sum() <span class="token comment"># Number that hit 30 or -30Out[268]: 3410</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们利用这个布尔型数组选出那些穿越了30（绝对值）的随机漫步（行），并调用argmax在轴1上获取穿越时间：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">269</span><span class="token punctuation">]</span><span class="token punctuation">:</span> crossing_times = (np.abs(walks<span class="token punctuation">[</span>hits30<span class="token punctuation">]</span>) <span class="token punctuation">&gt;</span>= 30).argmax(1)In <span class="token punctuation">[</span><span class="token number">270</span><span class="token punctuation">]</span><span class="token punctuation">:</span> crossing_times.mean()Out<span class="token punctuation">[</span><span class="token number">270</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">498.88973607038122</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请尝试用其他分布方式得到漫步数据。只需使用不同的随机数生成函数即可，如normal用于生成指定均值和标准差的正态分布数据：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">271</span><span class="token punctuation">]</span><span class="token punctuation">:</span> steps = np.random.normal(loc=0<span class="token punctuation">,</span> scale=0.25<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                          size=(nwalks<span class="token punctuation">,</span> nsteps))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="第-05-章-pandas-入门"><a href="#第-05-章-pandas-入门" class="headerlink" title="第 05 章 pandas 入门"></a><a href="https://www.bookstack.cn/read/pyda-2e-zh/5.md">第 05 章 pandas 入门</a></h2><p>pandas是本书后续内容的首选库。它含有使数据清洗和分析工作变得更快更简单的数据结构和操作工具。pandas经常和其它工具一同使用，如数值计算工具NumPy和SciPy，分析库statsmodels和scikit-learn，和数据可视化库matplotlib。pandas是基于NumPy数组构建的，特别是基于数组的函数和不使用for循环的数据处理。</p><p>虽然pandas采用了大量的NumPy编码风格，但二者最大的不同是pandas是专门为处理表格和混杂数据设计的。而NumPy更适合处理统一的数值数组数据。</p><p>自从2010年pandas开源以来，pandas逐渐成长为一个非常大的库，应用于许多真实案例。开发者社区已经有了800个独立的贡献者，他们在解决日常数据问题的同时为这个项目提供贡献。</p><p>在本书后续部分中，我将使用下面这样的pandas引入约定：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> import pandas as pd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此，只要你在代码中看到pd.，就得想到这是pandas。因为Series和DataFrame用的次数非常多，所以将其引入本地命名空间中会更方便：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> from pandas import Series<span class="token punctuation">,</span> DataFrame<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-1-pandas的数据结构介绍"><a href="#5-1-pandas的数据结构介绍" class="headerlink" title="5.1 pandas的数据结构介绍"></a>5.1 pandas的数据结构介绍</h3><p>要使用<code>pandas</code>，你首先就得熟悉它的两个主要数据结构：<code>Series</code>和<code>DataFrame</code>。虽然它们并不能解决所有问题，但它们为大多数应用提供了一种可靠的、易于使用的基础。</p><h5 id="Series"><a href="#Series" class="headerlink" title="Series"></a><code>Series</code></h5><p>Series是一种类似于一维数组的对象，它由一组数据（各种NumPy数据类型）以及一组与之相关的数据标签（即索引）组成。仅由一组数据即可产生最简单的Series：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">-5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 0    41    72   <span class="token punctuation">-</span><span class="token number">5</span>3    3<span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Series</code>的字符串表现形式为：<u>索引在左边，值在右边</u>。由于我们没有为数据指定索引，于是会自动创建一个0到N-1（N为数据的长度）的整数型索引。你可以通过<code>Series</code> 的<code>values</code>和<code>index</code>属性获取其数组表示形式和索引对象：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.valuesOut<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">-5</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.index  <span class="token comment"># like range(4)</span>Out<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> RangeIndex(start=0<span class="token punctuation">,</span> stop=4<span class="token punctuation">,</span> step=1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通常，我们希望所创建的Series带有一个可以对各个数据点进行标记的索引：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2 = pd.Series(<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">-5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2Out<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d    4b    7a   <span class="token punctuation">-</span><span class="token number">5</span>c    3<span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2.indexOut<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index(<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype='object')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与普通<code>NumPy</code>数组相比，你可以通过<u>索引的方式</u>选取Series中的单个或一组值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">-5</span>In <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span> = 6In <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> c    3a   <span class="token punctuation">-</span><span class="token number">5</span>d    6<span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[‘c’, ‘a’, ‘d’]是索引列表，即使它包含的是字符串而不是整数。</p><p>使用<code>NumPy</code>函数或类似<code>NumPy</code>的运算（如根据布尔型数组进行过滤、标量乘法、应用数学函数等）都会<u>保留索引值的链接</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2<span class="token punctuation">[</span>obj2 <span class="token punctuation">&gt;</span> 0<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d    6b    7c    3<span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2 * 2Out<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span>d    12b    14a   <span class="token punctuation">-</span><span class="token number">10</span>c     6<span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.exp(obj2)Out<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d     403.428793b    1096.633158a       0.006738c      20.085537<span class="token key atrule">dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以将<code>Series</code>看成是一个定长的有序字典，因为它是索引值到数据值的一个映射。它可以用在许多原本需要字典参数的函数中：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 'b' in obj2Out<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>In <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 'e' in obj2Out<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果数据被存放在一个Python字典中，也可以直接通过这个字典来创建Series：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> sdata = <span class="token punctuation">{</span><span class="token key atrule">'Ohio'</span><span class="token punctuation">:</span> <span class="token number">35000</span><span class="token punctuation">,</span> <span class="token key atrule">'Texas'</span><span class="token punctuation">:</span> <span class="token number">71000</span><span class="token punctuation">,</span> <span class="token key atrule">'Oregon'</span><span class="token punctuation">:</span> <span class="token number">16000</span><span class="token punctuation">,</span> <span class="token key atrule">'Utah'</span><span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3 = pd.Series(sdata)In <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3Out<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">Ohio      35000Oregon    16000Texas     71000Utah       5000dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果只传入一个字典，则结果Series中的索引就是原字典的键（有序排列）。你可以传入排好序的字典的键以改变顺序：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> states = <span class="token punctuation">[</span><span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Oregon'</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4 = pd.Series(sdata<span class="token punctuation">,</span> index=states)In <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4Out<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">California        NaNOhio          35000.0Oregon        16000.0Texas         71000.0dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个例子中，sdata中跟states索引相匹配的那3个值会被找出来并放到相应的位置上，但由于”California”所对应的sdata值找不到，所以其结果就为NaN（即“非数字”（not a number），在pandas中，它用于表示缺失或NA值）。因为‘Utah’不在states中，它被从结果中除去。</p><p>我将使用缺失（missing）或NA表示缺失数据。pandas的isnull和notnull函数可用于检测缺失数据：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd.isnull(obj4)Out<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">California     TrueOhio          FalseOregon        FalseTexas         Falsedtype</span><span class="token punctuation">:</span> boolIn <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd.notnull(obj4)Out<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">California    FalseOhio           TrueOregon         TrueTexas          Truedtype</span><span class="token punctuation">:</span> bool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Series也有类似的实例方法：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4.isnull()Out<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">California     TrueOhio          FalseOregon        FalseTexas         Falsedtype</span><span class="token punctuation">:</span> bool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我将在第7章详细讲解如何处理缺失数据。</p><p>对于许多应用而言，<code>Series</code>最重要的一个功能是，它会根据运算的索引标签自动对齐数据：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3Out<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">Ohio      35000Oregon    16000Texas     71000Utah       5000dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4Out<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">California        NaNOhio          35000.0Oregon        16000.0Texas         71000.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3 + obj4Out<span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">California         NaNOhio           70000.0Oregon         32000.0Texas         142000.0Utah               NaNdtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数据对齐功能将在后面详细讲解。如果你使用过数据库，你可以认为是类似join的操作。</p><p>Series对象本身及其索引都有一个<code>name</code>属性，该属性跟<code>pandas</code>其他的关键功能关系非常密切：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4.name = 'population'In <span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4.index.name = 'state'In <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj4Out<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">stateCalifornia        NaNOhio          35000.0Oregon        16000.0Texas         71000.0Name</span><span class="token punctuation">:</span> population<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Series的索引可以通过赋值的方式就地修改：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    41    72   -53    3dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.index = <span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Steve'</span><span class="token punctuation">,</span> <span class="token string">'Jeff'</span><span class="token punctuation">,</span> <span class="token string">'Ryan'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">Bob      4Steve    7Jeff    -5Ryan     3dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h5><p>DataFrame是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）。DataFrame既有行索引也有列索引，它可以被看做由Series组成的字典（共用同一个索引）。DataFrame中的数据是以一个或多个二维块存放的（而不是列表、字典或别的一维数据结构）。有关DataFrame内部的技术细节远远超出了本书所讨论的范围。</p><ul><li>笔记：虽然DataFrame是以二维结构保存数据的，但你仍然可以轻松地将其表示为更高维度的数据（层次化索引的表格型结构，这是pandas中许多高级数据处理功能的关键要素，我们会在第8章讨论这个问题）。</li></ul><p>建DataFrame的办法有很多，最常用的一种是直接传入一个由等长列表或NumPy数组组成的字典：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">data = <span class="token punctuation">{</span><span class="token key atrule">'state'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token key atrule">'year'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">,</span> <span class="token number">2003</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token key atrule">'pop'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">1.7</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">,</span> <span class="token number">2.4</span><span class="token punctuation">,</span> <span class="token number">2.9</span><span class="token punctuation">,</span> <span class="token number">3.2</span><span class="token punctuation">]</span><span class="token punctuation">}</span>frame = pd.DataFrame(data)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果DataFrame会自动加上索引（跟<code>Series</code>一样），且全部列会被有序排列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    pop   state  year0  1.5    Ohio  20001  1.7    Ohio  20012  3.6    Ohio  20023  2.4  Nevada  20014  2.9  Nevada  20025  3.2  Nevada  2003<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你使用的是Jupyter notebook，pandas DataFrame对象会以对浏览器友好的HTML表格的方式呈现。</p><p>对于特别大的<code>DataFrame</code>，<code>head</code>方法会选取前五行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.head()Out<span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    pop   state  year0  1.5    Ohio  20001  1.7    Ohio  20012  3.6    Ohio  20023  2.4  Nevada  20014  2.9  Nevada  2002<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果指定了列序列，则<code>DataFrame</code>的列就会按照指定顺序进行排列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd.DataFrame(data<span class="token punctuation">,</span> columns=<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token string">'state'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    year   state  pop0  2000    Ohio  1.51  2001    Ohio  1.72  2002    Ohio  3.63  2001  Nevada  2.44  2002  Nevada  2.95  2003  Nevada  3.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果传入的列在数据中找不到，就会在结果中产生缺失值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2 = pd.DataFrame(data<span class="token punctuation">,</span> columns=<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token string">'state'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">,</span> <span class="token string">'debt'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">....</span><span class="token punctuation">:</span>                       index=<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">,</span>   <span class="token key atrule">....</span><span class="token punctuation">:</span>                              <span class="token string">'five'</span><span class="token punctuation">,</span> <span class="token string">'six'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2Out<span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        year   state  pop debtone    2000    Ohio  1.5  NaNtwo    2001    Ohio  1.7  NaNthree  2002    Ohio  3.6  NaNfour   2001  Nevada  2.4  NaNfive   2002  Nevada  2.9  NaNsix    2003  Nevada  3.2  NaNIn <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2.columnsOut<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index(<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token string">'state'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">,</span> <span class="token string">'debt'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype='object')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过类似字典标记的方式或属性的方式，可以将<code>DataFrame</code>的列获取为一个<code>Series</code>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">one        Ohiotwo        Ohiothree      Ohiofour     Nevadafive     Nevadasix      NevadaName</span><span class="token punctuation">:</span> state<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> objectIn <span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2.yearOut<span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">one      2000two      2001three    2002four     2001five     2002six      2003Name</span><span class="token punctuation">:</span> year<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>笔记：IPython提供了类似属性的访问（即frame2.year）和tab补全。<br>frame2[column]适用于任何列的名，但是frame2.column只有在列名是一个合理的Python变量名时才适用。</p></blockquote><p>注意，返回的<code>Series</code>拥有原<code>DataFrame</code>相同的索引，且其<code>name</code>属性也已经被相应地设置好了。</p><p>行也可以通过位置或名称的方式进行获取，比如用<code>loc</code>属性（稍后将对此进行详细讲解）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2.loc<span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">year     2002state    Ohiopop       3.6debt      NaNName</span><span class="token punctuation">:</span> three<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> object<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列可以通过赋值的方式进行修改。例如，我们可以给那个空的”debt”列赋上一个标量值或一组值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">[</span><span class="token string">'debt'</span><span class="token punctuation">]</span> = 16.5In <span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2Out<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        year   state  pop  debtone    2000    Ohio  1.5  16.5two    2001    Ohio  1.7  16.5three  2002    Ohio  3.6  16.5four   2001  Nevada  2.4  16.5five   2002  Nevada  2.9  16.5six    2003  Nevada  3.2  16.5In <span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">[</span><span class="token string">'debt'</span><span class="token punctuation">]</span> = np.arange(6.)In <span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2Out<span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        year   state  pop  debtone    2000    Ohio  1.5   0.0two    2001    Ohio  1.7   1.0three  2002    Ohio  3.6   2.0four   2001  Nevada  2.4   3.0five   2002  Nevada  2.9   4.0six    2003  Nevada  3.2   5.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将列表或数组赋值给某个列时，其长度必须跟DataFrame的长度相匹配。如果赋值的是一个Series，就会精确匹配DataFrame的索引，所有的空位都将被填上缺失值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span> val = pd.Series(<span class="token punctuation">[</span><span class="token number">-1.2</span><span class="token punctuation">,</span> <span class="token number">-1.5</span><span class="token punctuation">,</span> <span class="token number">-1.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">,</span> <span class="token string">'five'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">[</span><span class="token string">'debt'</span><span class="token punctuation">]</span> = valIn <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2Out<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        year   state  pop  debtone    2000    Ohio  1.5   NaNtwo    2001    Ohio  1.7  <span class="token punctuation">-</span>1.2three  2002    Ohio  3.6   NaNfour   2001  Nevada  2.4  <span class="token punctuation">-</span>1.5five   2002  Nevada  2.9  <span class="token punctuation">-</span>1.7six    2003  Nevada  3.2   NaN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为不存在的列赋值会创建出一个新列。<u>关键字del用于删除列</u>。</p><p>作为del的例子，我先添加一个新的布尔值的列，state是否为’Ohio’：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2<span class="token punctuation">[</span><span class="token string">'eastern'</span><span class="token punctuation">]</span> = frame2.state == 'Ohio'In <span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2Out<span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        year   state  pop  debt  easternone    2000    Ohio  1.5   NaN     Truetwo    2001    Ohio  1.7  <span class="token punctuation">-</span>1.2     Truethree  2002    Ohio  3.6   NaN     Truefour   2001  Nevada  2.4  <span class="token punctuation">-</span>1.5    Falsefive   2002  Nevada  2.9  <span class="token punctuation">-</span>1.7    Falsesix    2003  Nevada  3.2   NaN    False<span class="token comment">#注意：不能用frame2.eastern创建新的列。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>del方法可以用来删除这列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">]</span><span class="token punctuation">:</span> del frame2<span class="token punctuation">[</span><span class="token string">'eastern'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2.columnsOut<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index(<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token string">'state'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">,</span> <span class="token string">'debt'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype='object')<span class="token comment">#注意：通过索引方式返回的列只是相应数据的视图而已，并不是副本。因此，对返回的Series所做的任何就地修改全都会反映到源DataFrame上。通过Series的copy方法即可指定复制列。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一种常见的数据形式是嵌套字典：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pop = <span class="token punctuation">{</span><span class="token key atrule">'Nevada'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">2001</span><span class="token punctuation">:</span> <span class="token number">2.4</span><span class="token punctuation">,</span> <span class="token key atrule">2002</span><span class="token punctuation">:</span> <span class="token number">2.9</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token key atrule">....</span><span class="token punctuation">:</span>        <span class="token key atrule">'Ohio'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">2000</span><span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token key atrule">2001</span><span class="token punctuation">:</span> <span class="token number">1.7</span><span class="token punctuation">,</span> <span class="token key atrule">2002</span><span class="token punctuation">:</span> <span class="token number">3.6</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果嵌套字典传给<code>DataFrame</code>，<code>pandas</code>就会被解释为：外层字典的键作为列，内层键则作为行索引：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3 = pd.DataFrame(pop)In <span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3Out<span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       Nevada  Ohio2000     NaN   1.52001     2.4   1.72002     2.9   3.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你也可以使用类似<code>NumPy</code>数组的方法，对<code>DataFrame</code>进行转置（交换行和列）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3.TOut<span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span>         2000  2001  2002Nevada   NaN   2.4   2.9Ohio     1.5   1.7   3.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内层字典的键会被合并、排序以形成最终的索引。如果明确指定了索引，则不会这样：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd.DataFrame(pop<span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">,</span> <span class="token number">2003</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       Nevada  Ohio2001     2.4   1.72002     2.9   3.62003     NaN   NaN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由Series组成的字典差不多也是一样的用法：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pdata = <span class="token punctuation">{</span><span class="token key atrule">'Ohio'</span><span class="token punctuation">:</span> frame3<span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token key atrule">....</span><span class="token punctuation">:</span>          <span class="token key atrule">'Nevada'</span><span class="token punctuation">:</span> frame3<span class="token punctuation">[</span><span class="token string">'Nevada'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd.DataFrame(pdata)Out<span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       Nevada  Ohio2000     NaN   1.52001     2.4   1.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下表列出了<code>DataFrame</code>构造函数所能接受的各种数据。</p><p><img src="https://tvax1.sinaimg.cn/large/007mx13gly1gus2tfct4kj60tv0la7b702.jpg" alt="pandas的数据结构介绍"> </p><p>如果设置了DataFrame的index和columns的name属性，则这些信息也会被显示出来：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3.index.name = 'year'; frame3.columns.name = 'state'In <span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3Out<span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span> state  Nevada  Ohioyear2000      NaN   1.52001      2.4   1.72002      2.9   3.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>跟<code>Series</code>一样，<code>values</code>属性也会以二维<code>ndarray</code>的形式返回<code>DataFrame</code>中的数据：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3.valuesOut<span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> nan<span class="token punctuation">,</span>  <span class="token number">1.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2.4</span><span class="token punctuation">,</span>  <span class="token number">1.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">2.9</span><span class="token punctuation">,</span>  <span class="token number">3.6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果DataFrame各列的数据类型不同，则值数组的dtype就会选用能兼容所有列的数据类型：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2.valuesOut<span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span>array(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">,</span> nan<span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2001</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token number">1.7</span><span class="token punctuation">,</span> <span class="token number">-1.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2002</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">,</span> nan<span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2001</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token number">2.4</span><span class="token punctuation">,</span> <span class="token number">-1.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2002</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token number">2.9</span><span class="token punctuation">,</span> <span class="token number">-1.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2003</span><span class="token punctuation">,</span> <span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token number">3.2</span><span class="token punctuation">,</span> nan<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=object)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="索引对象"><a href="#索引对象" class="headerlink" title="索引对象"></a>索引对象</h5><p>pandas的索引对象负责管理轴标签和其他元数据（比如轴名称等）。构建Series或DataFrame时，所用到的任何数组或其他序列的标签都会被转换成一个Index：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(range(3)<span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> index = obj.indexIn <span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">:</span> indexOut<span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index(<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype='object')In <span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> index<span class="token punctuation">[</span>1<span class="token punctuation">:</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index(<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype='object')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><u>Index对象是不可变的</u>，因此用户不能对其进行修改：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">index<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> = 'd'  <span class="token comment"># TypeError</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不可变可以使Index对象在多个数据结构之间安全共享：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">:</span> labels = pd.Index(np.arange(3))In <span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">:</span> labelsOut<span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Int64Index(<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype='int64')In <span class="token punctuation">[</span><span class="token number">82</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2 = pd.Series(<span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">-2.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index=labels)In <span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2Out<span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    1.51   -2.52    0.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2.index is labelsOut<span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">True</span><span class="token comment">#注意：虽然用户不需要经常使用Index的功能，但是因为一些操作会生成包含被索引化的数据，理解它们的工作原理是很重要的。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>除了类似于数组，Index的功能也类似一个固定大小的集合：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">85</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3Out<span class="token punctuation">[</span><span class="token number">85</span><span class="token punctuation">]</span><span class="token punctuation">:</span> state  Nevada  Ohioyear               2000      NaN   1.52001      2.4   1.72002      2.9   3.6In <span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame3.columnsOut<span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index(<span class="token punctuation">[</span><span class="token string">'Nevada'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype='object'<span class="token punctuation">,</span> name='state')In <span class="token punctuation">[</span><span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 'Ohio' in frame3.columnsOut<span class="token punctuation">[</span><span class="token number">87</span><span class="token punctuation">]</span><span class="token punctuation">:</span> TrueIn <span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 2003 in frame3.indexOut<span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与python的集合不同，pandas的<u>Index可以包含重复的标签</u>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dup_labels = pd.Index(<span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dup_labelsOut<span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Index(<span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype='object')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择重复的标签，会显示所有的结果。</p><p>每个索引都有一些方法和属性，它们可用于设置逻辑并回答有关该索引所包含的数据的常见问题。下表列出了这些函数。</p><p><img src="https://tva2.sinaimg.cn/large/007mx13gly1gus3dtezl8j60yg0kbtb202.jpg" alt="pandas的数据结构介绍"></p><h3 id="5-2-基本功能"><a href="#5-2-基本功能" class="headerlink" title="5.2 基本功能"></a>5.2 基本功能</h3><p>本节中，我将介绍操作Series和DataFrame中的数据的基本手段。后续章节将更加深入地挖掘pandas在数据分析和处理方面的功能。本书不是pandas库的详尽文档，主要关注的是最重要的功能，那些不大常用的内容（也就是那些更深奥的内容）就交给你自己去摸索吧。</p><h4 id="重新索引"><a href="#重新索引" class="headerlink" title="重新索引"></a>重新索引</h4><p>pandas对象的一个重要方法是reindex，其作用是创建一个新对象，它的数据符合新的索引。看下面的例子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">91</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(<span class="token punctuation">[</span><span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">7.2</span><span class="token punctuation">,</span> <span class="token number">-5.3</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">d    4.5b    7.2a   -5.3c    3.6dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用该Series的<code>reindex</code>将会根据新索引进行重排。如果某个索引值当前不存在，就引入缺失值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">93</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2 = obj.reindex(<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj2Out<span class="token punctuation">[</span><span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a   -5.3b    7.2c    3.6d    4.5e    NaNdtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于时间序列这样的有序数据，重新索引时可能需要做一些插值处理。<code>method</code>选项即可达到此目的，例如，使用ffill可以实现前向值填充：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3 = pd.Series(<span class="token punctuation">[</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'purple'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3Out<span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0      blue2    purple4    yellowdtype</span><span class="token punctuation">:</span> objectIn <span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj3.reindex(range(6)<span class="token punctuation">,</span> method='ffill')Out<span class="token punctuation">[</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0      blue1      blue2    purple3    purple4    yellow5    yellowdtype</span><span class="token punctuation">:</span> object<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>借助DataFrame，reindex可以修改（行）索引和列。只传递一个序列时，会重新索引结果的行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame = pd.DataFrame(np.arange(9).reshape((3<span class="token punctuation">,</span> 3))<span class="token punctuation">,</span>   <span class="token key atrule">....</span><span class="token punctuation">:</span>                      index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">....</span><span class="token punctuation">:</span>                      columns=<span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    Ohio  Texas  Californiaa     0      1           2c     3      4           5d     6      7           8In <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2 = frame.reindex(<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame2Out<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    Ohio  Texas  Californiaa   0.0    1.0         2.0b   NaN    NaN         NaNc   3.0    4.0         5.0d   6.0    7.0         8.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列可以用columns关键字重新索引：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">:</span> states = <span class="token punctuation">[</span><span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.reindex(columns=states)Out<span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    Texas  Utah  Californiaa      1   NaN           2c      4   NaN           5d      7   NaN           8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://tvax3.sinaimg.cn/large/007mx13gly1guu2jexpxyj60yg0ftdi502.jpg" alt="reindex函数的各参数及说明"></p><h4 id="丢弃指定轴上的项"><a href="#丢弃指定轴上的项" class="headerlink" title="丢弃指定轴上的项"></a>丢弃指定轴上的项</h4><p>丢弃某条轴上的一个或多个项很简单，只要有一个索引数组或列表即可。由于需要执行一些数据整理和集合逻辑，所以drop方法返回的是一个在指定轴上删除了指定值的新对象：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(np.arange(5.)<span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    0.0b    1.0c    2.0d    3.0e    4.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">107</span><span class="token punctuation">]</span><span class="token punctuation">:</span> new_obj = obj.drop('c')In <span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">:</span> new_objOut<span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    0.0b    1.0d    3.0e    4.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.drop(<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    0.0b    1.0e    4.0dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于<code>DataFrame</code>，可以删除任意轴上的索引值。为了演示，先新建一个DataFrame例子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data = pd.DataFrame(np.arange(16).reshape((4<span class="token punctuation">,</span> 4))<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                     index=<span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Colorado'</span><span class="token punctuation">,</span> <span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'New York'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                     columns=<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourOhio        0    1      2     3Colorado    4    5      6     7Utah        8    9     10    11New York   12   13     14    15<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用标签序列调用drop会从行标签（axis 0）删除值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">112</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.drop(<span class="token punctuation">[</span><span class="token string">'Colorado'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">112</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourUtah        8    9     10    11New York   12   13     14    15<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过传递<code>axis=1</code>或<code>axis=’columns’</code>可以删除列的值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">113</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.drop('two'<span class="token punctuation">,</span> axis=1)Out<span class="token punctuation">[</span><span class="token number">113</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  three  fourOhio        0      2     3Colorado    4      6     7Utah        8     10    11New York   12     14    15In <span class="token punctuation">[</span><span class="token number">114</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.drop(<span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis='columns')Out<span class="token punctuation">[</span><span class="token number">114</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  threeOhio        0      2Colorado    4      6Utah        8     10New York   12     14<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>许多函数，如drop，会修改Series或DataFrame的大小或形状，可以就地修改对象，不会返回新的对象：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.drop('c'<span class="token punctuation">,</span> inplace=True)In <span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">116</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    0.0b    1.0d    3.0e    4.0dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>小心使用inplace，它会销毁所有被删除的数据。</p><h4 id="索引、选取和过滤"><a href="#索引、选取和过滤" class="headerlink" title="索引、选取和过滤"></a>索引、选取和过滤</h4><p>Series索引（obj[…]）的工作方式类似于<code>NumPy</code>数组的索引，只不过<code>Series</code>的索引值不只是整数。下面是几个例子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(np.arange(4.)<span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    0.0b    1.0c    2.0d    3.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">119</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">119</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 1.0In <span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 1.0In <span class="token punctuation">[</span><span class="token number">121</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span>2<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">121</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">c    2.0d    3.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token key atrule">b    1.0a    0.0d    3.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">b    1.0d    3.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span>obj &lt; 2<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    0.0b    1.0dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用标签的切片运算与普通的Python切片运算不同，其末端是包含的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span>'b'<span class="token punctuation">:</span><span class="token string">'c'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token key atrule">b    1.0c    2.0dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用切片可以对<code>Series</code>的相应部分进行设置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">126</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span>'b'<span class="token punctuation">:</span><span class="token string">'c'</span><span class="token punctuation">]</span> = 5In <span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">127</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    0.0b    5.0c    5.0d    3.0dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用一个值或序列对DataFrame进行索引其实就是获取一个或多个列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data = pd.DataFrame(np.arange(16).reshape((4<span class="token punctuation">,</span> 4))<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                     index=<span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Colorado'</span><span class="token punctuation">,</span> <span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'New York'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                     columns=<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">129</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">129</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourOhio        0    1      2     3Colorado    4    5      6     7Utah        8    9     10    11New York   12   13     14    15In <span class="token punctuation">[</span><span class="token number">130</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">130</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">Ohio         1Colorado     5Utah         9New York    13Name</span><span class="token punctuation">:</span> two<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">131</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">131</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           three  oneOhio          2    0Colorado      6    4Utah         10    8New York     14   12<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种索引方式有几个特殊的情况。首先通过切片或布尔型数组选取数据：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">132</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">132</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourOhio        0    1      2     3Colorado    4    5      6     7In <span class="token punctuation">[</span><span class="token number">133</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">]</span> <span class="token punctuation">&gt;</span> 5<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">133</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourColorado    4    5      6     7Utah        8    9     10    11New York   12   13     14    15<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选取行的语法data[:2]十分方便。向[ ]传递单一的元素或列表，就可选择列。</p><p>另一种用法是通过布尔型DataFrame（比如下面这个由标量比较运算得出的）进行索引：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">134</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data &lt; 5Out<span class="token punctuation">[</span><span class="token number">134</span><span class="token punctuation">]</span><span class="token punctuation">:</span>             one    two  three   fourOhio       True   True   True   TrueColorado   True  False  False  FalseUtah      False  False  False  FalseNew York  False  False  False  FalseIn <span class="token punctuation">[</span><span class="token number">135</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span>data &lt; 5<span class="token punctuation">]</span> = 0In <span class="token punctuation">[</span><span class="token number">136</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">136</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  three  fourOhio        0    0      0     0Colorado    0    5      6     7Utah        8    9     10    11New York   12   13     14    15<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这使得DataFrame的语法与NumPy二维数组的语法很像。</p><h4 id="用loc和iloc进行选取"><a href="#用loc和iloc进行选取" class="headerlink" title="用loc和iloc进行选取"></a>用loc和iloc进行选取</h4><p>对于DataFrame的行的标签索引，我引入了特殊的标签运算符loc和iloc。它们可以让你用类似NumPy的标记，使用轴标签（loc）或整数索引（iloc），从DataFrame选择行和列的子集。</p><p>作为一个初步示例，让我们通过标签选择一行和多列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.loc<span class="token punctuation">[</span><span class="token string">'Colorado'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">137</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">two      5three    6Name</span><span class="token punctuation">:</span> Colorado<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后用iloc和整数进行选取：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">138</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">138</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">four    11one      8two      9Name</span><span class="token punctuation">:</span> Utah<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">139</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">139</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">one       8two       9three    10four     11Name</span><span class="token punctuation">:</span> Utah<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           four  one  twoColorado     7    0    5Utah        11    8    9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这两个索引函数也适用于一个标签或多个标签的切片：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">141</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">141</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">Ohio        0Colorado    5Utah        9Name</span><span class="token punctuation">:</span> two<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">142</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data.iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>data.three <span class="token punctuation">&gt;</span> 5<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">142</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           one  two  threeColorado    0    5      6Utah        8    9     10New York   12   13     14<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以，在pandas中，有多个方法可以选取和重新组合数据。对于DataFrame，表5-4进行了总结。后面会看到，还有更多的方法进行层级化索引。</p><blockquote><p>笔记：在一开始设计pandas时，我觉得用frame[:, col]选取列过于繁琐（也容易出错），因为列的选择是非常常见的操作。我做了些取舍，将花式索引的功能（标签和整数）放到了ix运算符中。在实践中，这会导致许多边缘情况，数据的轴标签是整数，所以pandas团队决定创造loc和iloc运算符分别处理严格基于标签和整数的索引。<br>ix运算符仍然可用，但并不推荐。</p></blockquote><p><img src="https://tva2.sinaimg.cn/large/007mx13gly1guu3ygk9nhj60pt0fqk0g02.jpg" alt="DataFrame的索引选项"></p><h4 id="整数索引"><a href="#整数索引" class="headerlink" title="整数索引"></a>整数索引</h4><p>处理整数索引的pandas对象常常难住新手，因为它与Python内置的列表和元组的索引语法不同。例如，你可能不认为下面的代码会出错：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">ser = pd.Series(np.arange(3.))serser<span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里，pandas可以勉强进行整数索引，但是会导致小bug。我们有包含0,1,2的索引，但是引入用户想要的东西（基于标签或位置的索引）很难：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">144</span><span class="token punctuation">]</span><span class="token punctuation">:</span> serOut<span class="token punctuation">[</span><span class="token number">144</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    0.01    1.02    2.0dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外，对于非整数索引，不会产生歧义：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">145</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ser2 = pd.Series(np.arange(3.)<span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">146</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ser2<span class="token punctuation">[</span><span class="token number">-1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">146</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了进行统一，如果轴索引含有整数，数据选取总会使用标签。为了更准确，请使用loc（标签）或iloc（整数）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">147</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ser<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">147</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    0.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">148</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ser.loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">148</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    0.01    1.0dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">149</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ser.iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">149</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    0.0dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="算术运算和数据对齐"><a href="#算术运算和数据对齐" class="headerlink" title="算术运算和数据对齐"></a>算术运算和数据对齐</h4><p><code>pandas</code>最重要的一个功能是，它可以对不同索引的对象进行算术运算。在将对象相加时，如果存在不同的索引对，则结果的索引就是该索引对的并集。对于有数据库经验的用户，这就像在索引标签上进行自动外连接。看一个简单的例子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s1 = pd.Series(<span class="token punctuation">[</span><span class="token number">7.3</span><span class="token punctuation">,</span> <span class="token number">-2.5</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">151</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s2 = pd.Series(<span class="token punctuation">[</span><span class="token number">-2.1</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">,</span> <span class="token number">-1.5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">152</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s1Out<span class="token punctuation">[</span><span class="token number">152</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    7.3c   -2.5d    3.4e    1.5dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">153</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s2Out<span class="token punctuation">[</span><span class="token number">153</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a   -2.1c    3.6e   -1.5f    4.0g    3.1dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将它们相加就会产生：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">154</span><span class="token punctuation">]</span><span class="token punctuation">:</span> s1 + s2Out<span class="token punctuation">[</span><span class="token number">154</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    5.2c    1.1d    NaNe    0.0f    NaNg    NaNdtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>自动的数据对齐操作在不重叠的索引处引入了NA值。<u>缺失值会在算术运算过程中传播</u>。</p><p>对于DataFrame，对齐操作会同时发生在行和列上：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">155</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1 = pd.DataFrame(np.arange(9.).reshape((3<span class="token punctuation">,</span> 3))<span class="token punctuation">,</span> columns=list('bcd')<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                    index=<span class="token punctuation">[</span><span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token string">'Colorado'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">156</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2 = pd.DataFrame(np.arange(12.).reshape((4<span class="token punctuation">,</span> 3))<span class="token punctuation">,</span> columns=list('bde')<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                    index=<span class="token punctuation">[</span><span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token string">'Oregon'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">157</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1Out<span class="token punctuation">[</span><span class="token number">157</span><span class="token punctuation">]</span><span class="token punctuation">:</span>             b    c    dOhio      0.0  1.0  2.0Texas     3.0  4.0  5.0Colorado  6.0  7.0  8.0In <span class="token punctuation">[</span><span class="token number">158</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2Out<span class="token punctuation">[</span><span class="token number">158</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           b     d     eUtah    0.0   1.0   2.0Ohio    3.0   4.0   5.0Texas   6.0   7.0   8.0Oregon  9.0  10.0  11.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把它们相加后将会返回一个新的DataFrame，其索引和列为原来那两个DataFrame的并集：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">159</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1 + df2Out<span class="token punctuation">[</span><span class="token number">159</span><span class="token punctuation">]</span><span class="token punctuation">:</span>             b   c     d   eColorado  NaN NaN   NaN NaNOhio      3.0 NaN   6.0 NaNOregon    NaN NaN   NaN NaNTexas     9.0 NaN  12.0 NaNUtah      NaN NaN   NaN NaN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为’c’和’e’列均不在两个DataFrame对象中，在结果中以缺省值呈现。行也是同样。</p><p>如果DataFrame对象相加，没有共用的列或行标签，结果都会是空：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">160</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1 = pd.DataFrame(<span class="token punctuation">{</span><span class="token key atrule">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span>)In <span class="token punctuation">[</span><span class="token number">161</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2 = pd.DataFrame(<span class="token punctuation">{</span><span class="token key atrule">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span>)In <span class="token punctuation">[</span><span class="token number">162</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1Out<span class="token punctuation">[</span><span class="token number">162</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    A0  11  2In <span class="token punctuation">[</span><span class="token number">163</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2Out<span class="token punctuation">[</span><span class="token number">163</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    B0  31  4In <span class="token punctuation">[</span><span class="token number">164</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1 <span class="token punctuation">-</span> df2Out<span class="token punctuation">[</span><span class="token number">164</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     A   B0 NaN NaN1 NaN NaN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="在算术方法中填充值"><a href="#在算术方法中填充值" class="headerlink" title="在算术方法中填充值"></a>在算术方法中填充值</h4><p>在对不同索引的对象进行算术运算时，你可能希望当一个对象中某个轴标签在另一个对象中找不到时填充一个特殊值（比如0）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">165</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1 = pd.DataFrame(np.arange(12.).reshape((3<span class="token punctuation">,</span> 4))<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                    columns=list('abcd'))In <span class="token punctuation">[</span><span class="token number">166</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2 = pd.DataFrame(np.arange(20.).reshape((4<span class="token punctuation">,</span> 5))<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                    columns=list('abcde'))In <span class="token punctuation">[</span><span class="token number">167</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2.loc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span> = np.nanIn <span class="token punctuation">[</span><span class="token number">168</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1Out<span class="token punctuation">[</span><span class="token number">168</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      a    b     c     d0  0.0  1.0   2.0   3.01  4.0  5.0   6.0   7.02  8.0  9.0  10.0  11.0In <span class="token punctuation">[</span><span class="token number">169</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df2Out<span class="token punctuation">[</span><span class="token number">169</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       a     b     c     d     e0   0.0   1.0   2.0   3.0   4.01   5.0   NaN   7.0   8.0   9.02  10.0  11.0  12.0  13.0  14.03  15.0  16.0  17.0  18.0  19.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将它们相加时，没有重叠的位置就会产生NA值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1 + df2Out<span class="token punctuation">[</span><span class="token number">170</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       a     b     c     d   e0   0.0   2.0   4.0   6.0 NaN1   9.0   NaN  13.0  15.0 NaN2  18.0  20.0  22.0  24.0 NaN3   NaN   NaN   NaN   NaN NaN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用df1的add方法，传入df2以及一个fill_value参数：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">171</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1.add(df2<span class="token punctuation">,</span> fill_value=0)Out<span class="token punctuation">[</span><span class="token number">171</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       a     b     c     d     e0   0.0   2.0   4.0   6.0   4.01   9.0   5.0  13.0  15.0   9.02  18.0  20.0  22.0  24.0  14.03  15.0  16.0  17.0  18.0  19.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下表列出了Series和DataFrame的算术方法。它们每个都有一个副本，以字母r开头，它会翻转参数。因此这两个语句是等价的：</p><p><img src="https://tvax2.sinaimg.cn/large/007mx13gly1guu4b99k53j60as072gmh02.jpg" alt="灵活的算术方法"></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">172</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 1 / df1Out<span class="token punctuation">[</span><span class="token number">172</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           a         b         c         d0       inf  1.000000  0.500000  0.3333331  0.250000  0.200000  0.166667  0.1428572  0.125000  0.111111  0.100000  0.090909In <span class="token punctuation">[</span><span class="token number">173</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1.rdiv(1)Out<span class="token punctuation">[</span><span class="token number">173</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           a         b         c         d0       inf  1.000000  0.500000  0.3333331  0.250000  0.200000  0.166667  0.1428572  0.125000  0.111111  0.100000  0.090909<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与此类似，在对Series或DataFrame重新索引时，也可以指定一个填充值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">174</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df1.reindex(columns=df2.columns<span class="token punctuation">,</span> fill_value=0)Out<span class="token punctuation">[</span><span class="token number">174</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      a    b     c     d  e0  0.0  1.0   2.0   3.0  01  4.0  5.0   6.0   7.0  02  8.0  9.0  10.0  11.0  0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="DataFrame和Series之间的运算"><a href="#DataFrame和Series之间的运算" class="headerlink" title="DataFrame和Series之间的运算"></a>DataFrame和Series之间的运算</h4><p>跟不同维度的NumPy数组一样，<code>DataFrame</code>和<code>Series</code>之间算术运算也是有明确规定的。先来看一个具有启发性的例子，计算一个二维数组与其某行之间的差：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">175</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr = np.arange(12.).reshape((3<span class="token punctuation">,</span> 4))In <span class="token punctuation">[</span><span class="token number">176</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arrOut<span class="token punctuation">[</span><span class="token number">176</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">0.</span><span class="token punctuation">,</span>   <span class="token number">1.</span><span class="token punctuation">,</span>   <span class="token number">2.</span><span class="token punctuation">,</span>   <span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">4.</span><span class="token punctuation">,</span>   <span class="token number">5.</span><span class="token punctuation">,</span>   <span class="token number">6.</span><span class="token punctuation">,</span>   <span class="token number">7.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span>  <span class="token number">8.</span><span class="token punctuation">,</span>   <span class="token number">9.</span><span class="token punctuation">,</span>  <span class="token number">10.</span><span class="token punctuation">,</span>  <span class="token number">11.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">177</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">177</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">2.</span><span class="token punctuation">,</span>  <span class="token number">3.</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">]</span><span class="token punctuation">:</span> arr <span class="token punctuation">-</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">,</span>  <span class="token number">4.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token number">8.</span><span class="token punctuation">,</span>  <span class="token number">8.</span><span class="token punctuation">,</span>  <span class="token number">8.</span><span class="token punctuation">,</span>  <span class="token number">8.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当我们从arr减去arr[0]，每一行都会执行这个操作。这就叫做广播（broadcasting），附录A将对此进行详细讲解。DataFrame和Series之间的运算差不多也是如此：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">179</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame = pd.DataFrame(np.arange(12.).reshape((4<span class="token punctuation">,</span> 3))<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                      columns=list('bde')<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                      index=<span class="token punctuation">[</span><span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token string">'Oregon'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">:</span> series = frame.iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">181</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">181</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           b     d     eUtah    0.0   1.0   2.0Ohio    3.0   4.0   5.0Texas   6.0   7.0   8.0Oregon  9.0  10.0  11.0In <span class="token punctuation">[</span><span class="token number">182</span><span class="token punctuation">]</span><span class="token punctuation">:</span> seriesOut<span class="token punctuation">[</span><span class="token number">182</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">b    0.0d    1.0e    2.0Name</span><span class="token punctuation">:</span> Utah<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认情况下，DataFrame和Series之间的算术运算会将Series的索引匹配到DataFrame的列，然后沿着行一直向下广播：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">183</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame <span class="token punctuation">-</span> seriesOut<span class="token punctuation">[</span><span class="token number">183</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           b    d    eUtah    0.0  0.0  0.0Ohio    3.0  3.0  3.0Texas   6.0  6.0  6.0Oregon  9.0  9.0  9.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果某个索引值在<code>DataFrame</code>的列或<code>Series</code>的索引中找不到，则参与运算的两个对象就会被重新索引以形成并集：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">184</span><span class="token punctuation">]</span><span class="token punctuation">:</span> series2 = pd.Series(range(3)<span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">185</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame + series2Out<span class="token punctuation">[</span><span class="token number">185</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           b   d     e   fUtah    0.0 NaN   3.0 NaNOhio    3.0 NaN   6.0 NaNTexas   6.0 NaN   9.0 NaNOregon  9.0 NaN  12.0 NaN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你希望匹配行且在列上广播，则必须使用算术运算方法。例如：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">186</span><span class="token punctuation">]</span><span class="token punctuation">:</span> series3 = frame<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">187</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">187</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           b     d     eUtah    0.0   1.0   2.0Ohio    3.0   4.0   5.0Texas   6.0   7.0   8.0Oregon  9.0  10.0  11.0In <span class="token punctuation">[</span><span class="token number">188</span><span class="token punctuation">]</span><span class="token punctuation">:</span> series3Out<span class="token punctuation">[</span><span class="token number">188</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">Utah       1.0Ohio       4.0Texas      7.0Oregon    10.0Name</span><span class="token punctuation">:</span> d<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> float64In <span class="token punctuation">[</span><span class="token number">189</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.sub(series3<span class="token punctuation">,</span> axis='index')Out<span class="token punctuation">[</span><span class="token number">189</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           b    d    eUtah   <span class="token punctuation">-</span>1.0  0.0  1.0Ohio   <span class="token punctuation">-</span>1.0  0.0  1.0Texas  <span class="token punctuation">-</span>1.0  0.0  1.0Oregon <span class="token punctuation">-</span>1.0  0.0  1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传入的轴号就是希望匹配的轴。在本例中，我们的目的是匹配DataFrame的行索引（axis=’index’ or axis=0）并进行广播。</p><h4 id="函数应用和映射"><a href="#函数应用和映射" class="headerlink" title="函数应用和映射"></a>函数应用和映射</h4><p>NumPy的ufuncs（元素级数组方法）也可用于操作pandas对象：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">190</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame = pd.DataFrame(np.random.randn(4<span class="token punctuation">,</span> 3)<span class="token punctuation">,</span> columns=list('bde')<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                      index=<span class="token punctuation">[</span><span class="token string">'Utah'</span><span class="token punctuation">,</span> <span class="token string">'Ohio'</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token string">'Oregon'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">191</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">191</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                b         d         eUtah   <span class="token punctuation">-</span>0.204708  0.478943 <span class="token punctuation">-</span>0.519439Ohio   <span class="token punctuation">-</span>0.555730  1.965781  1.393406Texas   0.092908  0.281746  0.769023Oregon  1.246435  1.007189 <span class="token punctuation">-</span>1.296221In <span class="token punctuation">[</span><span class="token number">192</span><span class="token punctuation">]</span><span class="token punctuation">:</span> np.abs(frame)Out<span class="token punctuation">[</span><span class="token number">192</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                b         d         eUtah    0.204708  0.478943  0.519439Ohio    0.555730  1.965781  1.393406Texas   0.092908  0.281746  0.769023Oregon  1.246435  1.007189  1.296221<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一个常见的操作是，将函数应用到由各列或行所形成的一维数组上。DataFrame的apply方法即可实现此功能：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">193</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">f = lambda x</span><span class="token punctuation">:</span> x.max() <span class="token punctuation">-</span> x.min()In <span class="token punctuation">[</span><span class="token number">194</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.apply(f)Out<span class="token punctuation">[</span><span class="token number">194</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">b    1.802165d    1.684034e    2.689627dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的函数f，计算了一个<code>Series</code>的最大值和最小值的差，在<code>frame</code>的每列都执行了一次。结果是一个Series，使用frame的列作为索引。</p><p>如果传递axis=’columns’到apply，这个函数会在每行执行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">195</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.apply(f<span class="token punctuation">,</span> axis='columns')Out<span class="token punctuation">[</span><span class="token number">195</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token key atrule">Utah      0.998382Ohio      2.521511Texas     0.676115Oregon    2.542656dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>许多最为常见的数组统计功能都被实现成<code>DataFrame</code>的方法（如<code>sum</code>和<code>mean</code>），因此无需使用apply方法。</p><p>传递到apply的函数不是必须返回一个标量，还可以返回由多个值组成的<code>Series</code>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">196</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">def f(x)</span><span class="token punctuation">:</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>     return pd.Series(<span class="token punctuation">[</span>x.min()<span class="token punctuation">,</span> x.max()<span class="token punctuation">]</span><span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'min'</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">197</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.apply(f)Out<span class="token punctuation">[</span><span class="token number">197</span><span class="token punctuation">]</span><span class="token punctuation">:</span>             b         d         emin <span class="token punctuation">-</span>0.555730  0.281746 <span class="token punctuation">-</span>1.296221max  1.246435  1.965781  1.393406<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>元素级的Python函数也是可以用的。假如你想得到frame中各个浮点值的格式化字符串，使用applymap即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">198</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">format = lambda x</span><span class="token punctuation">:</span> '%.2f' % xIn <span class="token punctuation">[</span><span class="token number">199</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.applymap(format)Out<span class="token punctuation">[</span><span class="token number">199</span><span class="token punctuation">]</span><span class="token punctuation">:</span>             b     d      eUtah    <span class="token punctuation">-</span>0.20  0.48  <span class="token punctuation">-</span>0.52Ohio    <span class="token punctuation">-</span>0.56  1.97   1.39Texas    0.09  0.28   0.77Oregon   1.25  1.01  <span class="token punctuation">-</span><span class="token number">1.30</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之所以叫做applymap，是因为Series有一个用于应用元素级函数的map方法：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame<span class="token punctuation">[</span><span class="token string">'e'</span><span class="token punctuation">]</span>.map(format)Out<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">Utah      -0.52Ohio       1.39Texas      0.77Oregon    -1.30Name</span><span class="token punctuation">:</span> e<span class="token punctuation">,</span> <span class="token key atrule">dtype</span><span class="token punctuation">:</span> object<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="排序和排名"><a href="#排序和排名" class="headerlink" title="排序和排名"></a>排序和排名</h4><p>根据条件对数据集排序（<code>sorting</code>）也是一种重要的内置运算。要对行或列索引进行排序（按字典顺序），可使用sort_index方法，它将返回一个已排序的新对象：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(range(4)<span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.sort_index()Out<span class="token punctuation">[</span><span class="token number">202</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token key atrule">a    1b    2c    3d    0dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于DataFrame，则可以根据任意一个轴上的索引进行排序：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">203</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame = pd.DataFrame(np.arange(8).reshape((2<span class="token punctuation">,</span> 4))<span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                      index=<span class="token punctuation">[</span><span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                      columns=<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">204</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.sort_index()Out<span class="token punctuation">[</span><span class="token number">204</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        d  a  b  cone    4  5  6  7three  0  1  2  3In <span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.sort_index(axis=1)Out<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">:</span>       a  b  c  dthree  1  2  3  0one    5  6  7  4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数据默认是按升序排序的，但也可以降序排序：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">206</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.sort_index(axis=1<span class="token punctuation">,</span> ascending=False)Out<span class="token punctuation">[</span><span class="token number">206</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        d  c  b  athree  0  3  2  1one    4  7  6  5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若要按值对Series进行排序，可使用其sort_values方法：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">207</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">-3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">208</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.sort_values()Out<span class="token punctuation">[</span><span class="token number">208</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">2   -33    20    41    7dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在排序时，任何缺失值默认都会被放到Series的末尾：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">209</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> np.nan<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> np.nan<span class="token punctuation">,</span> <span class="token number">-3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.sort_values()Out<span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">4   -3.05    2.00    4.02    7.01    NaN3    NaNdtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当排序一个<code>DataFrame</code>时，你可能希望根据一个或多个列中的值进行排序。将一个或多个列的名字传递给sort_values的by选项即可达到该目的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">211</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame = pd.DataFrame(<span class="token punctuation">{</span><span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">-3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>)In <span class="token punctuation">[</span><span class="token number">212</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">212</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    a  b0  0  41  1  72  0 <span class="token punctuation">-</span>33  1  2In <span class="token punctuation">[</span><span class="token number">213</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.sort_values(by='b')Out<span class="token punctuation">[</span><span class="token number">213</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    a  b2  0 <span class="token punctuation">-</span>33  1  20  0  41  1  7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要根据多个列进行排序，传入名称的列表即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">214</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.sort_values(by=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">214</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    a  b2  0 <span class="token punctuation">-</span>30  0  43  1  21  1  7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>排名会从1开始一直到数组中有效数据的数量。接下来介绍<code>Series</code>和<code>DataFrame</code>的rank方法。默认情况下，rank是通过“为各组分配一个平均排名”的方式破坏平级关系的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">215</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">-5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">216</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.rank()Out<span class="token punctuation">[</span><span class="token number">216</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    6.51    1.02    6.53    4.54    3.05    2.06    4.5dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以根据值在原数据中出现的顺序给出排名：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">217</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.rank(method='first')Out<span class="token punctuation">[</span><span class="token number">217</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    6.01    1.02    7.03    4.04    3.05    2.06    5.0dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里，条目0和2没有使用平均排名6.5，它们被设成了6和7，因为数据中标签0位于标签2的前面。</p><p>你也可以按降序进行排名：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Assign tie values the maximum rank in the groupIn [218]: obj.rank(ascending=False, method='max')Out[218]: 0    2.01    7.02    2.03    4.04    5.05    6.06    4.0dtype: float64</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下表列出了所有用于破坏平级关系的。DataFrame可以在行或列上计算排名：</p><p><img src="https://tva4.sinaimg.cn/large/007mx13gly1guu604be0mj60i5068dh002.jpg" alt="排名时用于破坏平级关系的方法"></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">219</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame = pd.DataFrame(<span class="token punctuation">{</span><span class="token key atrule">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4.3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">-3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token key atrule">'a'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                       <span class="token key atrule">'c'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">-2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">-2.5</span><span class="token punctuation">]</span><span class="token punctuation">}</span>)In <span class="token punctuation">[</span><span class="token number">220</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frameOut<span class="token punctuation">[</span><span class="token number">220</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    a    b    c0  0  4.3 <span class="token punctuation">-</span>2.01  1  7.0  5.02  0 <span class="token punctuation">-</span>3.0  8.03  1  2.0 <span class="token punctuation">-</span>2.5In <span class="token punctuation">[</span><span class="token number">221</span><span class="token punctuation">]</span><span class="token punctuation">:</span> frame.rank(axis='columns')Out<span class="token punctuation">[</span><span class="token number">221</span><span class="token punctuation">]</span><span class="token punctuation">:</span>      a    b    c0  2.0  3.0  1.01  1.0  3.0  2.02  2.0  1.0  3.03  2.0  3.0  1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="带有重复标签的轴索引"><a href="#带有重复标签的轴索引" class="headerlink" title="带有重复标签的轴索引"></a>带有重复标签的轴索引</h4><p>直到目前为止，我所介绍的所有范例都有着唯一的轴标签（索引值）。虽然许多pandas函数（如reindex）都要求标签唯一，但这并不是强制性的。我们来看看下面这个简单的带有重复索引值的Series：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">222</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(range(5)<span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">223</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">223</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    0a    1b    2b    3c    4dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>索引的is_unique属性可以告诉你它的值是否是唯一的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">224</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.index.is_uniqueOut<span class="token punctuation">[</span><span class="token number">224</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token boolean important">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于带有重复值的索引，数据选取的行为将会有些不同。如果某个索引对应多个值，则返回一个Series；而对应单个值的，则返回一个标量值：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">225</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">225</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    0a    1dtype</span><span class="token punctuation">:</span> int64In <span class="token punctuation">[</span><span class="token number">226</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">226</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样会使代码变复杂，因为索引的输出类型会根据标签是否有重复发生变化。</p><p>对DataFrame的行进行索引时也是如此：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">227</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df = pd.DataFrame(np.random.randn(4<span class="token punctuation">,</span> 3)<span class="token punctuation">,</span> index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">228</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dfOut<span class="token punctuation">[</span><span class="token number">228</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           0         1         2a  0.274992  0.228913  1.352917a  0.886429 <span class="token punctuation">-</span>2.001637 <span class="token punctuation">-</span>0.371843b  1.669025 <span class="token punctuation">-</span>0.438570 <span class="token punctuation">-</span>0.539741b  0.476985  3.248944 <span class="token punctuation">-</span>1.021228In <span class="token punctuation">[</span><span class="token number">229</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df.loc<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">229</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           0         1         2b  1.669025 <span class="token punctuation">-</span>0.438570 <span class="token punctuation">-</span>0.539741b  0.476985  3.248944 <span class="token punctuation">-</span><span class="token number">1.021228</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-3-汇总和计算描述统计"><a href="#5-3-汇总和计算描述统计" class="headerlink" title="5.3 汇总和计算描述统计"></a>5.3 汇总和计算描述统计</h3><p><code>pandas</code>对象拥有一组常用的数学和统计方法。它们大部分都属于约简和汇总统计，用于从Series中提取单个值（如sum或mean）或从DataFrame的行或列中提取一个Series。跟对应的NumPy数组方法相比，它们都是基于没有缺失数据的假设而构建的。看一个简单的DataFrame：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">230</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df = pd.DataFrame(<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.4</span><span class="token punctuation">,</span> np.nan<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7.1</span><span class="token punctuation">,</span> <span class="token number">-4.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                    <span class="token punctuation">[</span>np.nan<span class="token punctuation">,</span> np.nan<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.75</span><span class="token punctuation">,</span> <span class="token number">-1.3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                   index=<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                   columns=<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">231</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dfOut<span class="token punctuation">[</span><span class="token number">231</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     one  twoa  1.40  NaNb  7.10 <span class="token punctuation">-</span>4.5c   NaN  NaNd  0.75 <span class="token punctuation">-</span><span class="token number">1.3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调用DataFrame的sum方法将会返回一个含有列的和的Series：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">232</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df.sum()Out<span class="token punctuation">[</span><span class="token number">232</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">one    9.25two   -5.80dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传入axis=’columns’或axis=1将会按行进行求和运算：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">233</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df.sum(axis=1)Out<span class="token punctuation">[</span><span class="token number">233</span><span class="token punctuation">]</span><span class="token punctuation">:</span>a    1.40b    2.60c     NaNd   <span class="token punctuation">-</span><span class="token number">0.55</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>NA值会自动被排除，除非整个切片（这里指的是行或列）都是NA。通过skipna选项可以禁用该功能：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df.mean(axis='columns'<span class="token punctuation">,</span> skipna=False)Out<span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a      NaNb    1.300c      NaNd   -0.275dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下表列出了这些约简方法的常用选项。</p><p><img src="https://tva2.sinaimg.cn/large/007mx13gly1guu6vovafqj60yg081gmd02.jpg" alt="汇总和计算描述统计"></p><p>有些方法（如idxmin和idxmax）返回的是间接统计（比如达到最小值或最大值的索引）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">235</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df.idxmax()Out<span class="token punctuation">[</span><span class="token number">235</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">one    btwo    ddtype</span><span class="token punctuation">:</span> object <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一些方法则是<u>累计型</u>的：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">236</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df.cumsum()Out<span class="token punctuation">[</span><span class="token number">236</span><span class="token punctuation">]</span><span class="token punctuation">:</span>     one  twoa  1.40  NaNb  8.50 <span class="token punctuation">-</span>4.5c   NaN  NaNd  9.25 <span class="token punctuation">-</span><span class="token number">5.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有一种方法，它既不是约简型也不是累计型。describe就是一个例子，它用于一次性产生多个汇总统计：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">237</span><span class="token punctuation">]</span><span class="token punctuation">:</span> df.describe()Out<span class="token punctuation">[</span><span class="token number">237</span><span class="token punctuation">]</span><span class="token punctuation">:</span>             one       twocount  3.000000  2.000000mean   3.083333 <span class="token punctuation">-</span>2.900000std    3.493685  2.262742min    0.750000 <span class="token punctuation">-</span>4.50000025%    1.075000 <span class="token punctuation">-</span>3.70000050%    1.400000 <span class="token punctuation">-</span>2.90000075%    4.250000 <span class="token punctuation">-</span>2.100000max    7.100000 <span class="token punctuation">-</span><span class="token number">1.300000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于非数值型数据，<code>describe</code>会产生另外一种汇总统计：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">238</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span> * 4)In <span class="token punctuation">[</span><span class="token number">239</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.describe()Out<span class="token punctuation">[</span><span class="token number">239</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">count     16unique     3top        afreq       8dtype</span><span class="token punctuation">:</span> object<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下表列出了所有与描述统计相关的方法。</p><p><img src="https://tva4.sinaimg.cn/large/007mx13gly1guu72rt5btj60xh0vrtbs02.jpg" alt="汇总和计算描述统计"></p><h4 id="相关系数与协方差"><a href="#相关系数与协方差" class="headerlink" title="相关系数与协方差"></a>相关系数与协方差</h4><p>有些汇总统计（如相关系数和协方差）是通过参数对计算出来的。我们来看几个DataFrame，它们的数据来自Yahoo!Finance的股票价格和成交量，使用的是pandas-datareader包（可以用conda或pip安装）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">conda install pandas<span class="token punctuation">-</span>datareader<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我使用pandas_datareader模块下载了一些股票数据：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">import pandas_datareader.data as weball_data = <span class="token punctuation">{</span><span class="token key atrule">ticker</span><span class="token punctuation">:</span> web.get_data_yahoo(ticker)            for ticker in <span class="token punctuation">[</span><span class="token string">'AAPL'</span><span class="token punctuation">,</span> <span class="token string">'IBM'</span><span class="token punctuation">,</span> <span class="token string">'MSFT'</span><span class="token punctuation">,</span> <span class="token string">'GOOG'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>price = pd.DataFrame(<span class="token punctuation">{</span><span class="token key atrule">ticker</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'Adj Close'</span><span class="token punctuation">]</span>                     for ticker<span class="token punctuation">,</span> data in all_data.items()<span class="token punctuation">}</span>)volume = pd.DataFrame(<span class="token punctuation">{</span><span class="token key atrule">ticker</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">'Volume'</span><span class="token punctuation">]</span>                      for ticker<span class="token punctuation">,</span> data in all_data.items()<span class="token punctuation">}</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：此时Yahoo! Finance已经不存在了，因为2017年Yahoo!被Verizon收购了。参阅pandas-datareader文档，可以学习最新的功能。</p></blockquote><p>现在计算价格的百分数变化，时间序列的操作会在第11章介绍：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">242</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns = price.pct_change()In <span class="token punctuation">[</span><span class="token number">243</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns.tail()Out<span class="token punctuation">[</span><span class="token number">243</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                 AAPL      GOOG       IBM      MSFTDate                                              2016<span class="token punctuation">-</span>10<span class="token punctuation">-</span>17 <span class="token punctuation">-</span>0.000680  0.001837  0.002072 <span class="token punctuation">-</span>0.0034832016<span class="token punctuation">-</span>10<span class="token punctuation">-</span>18 <span class="token punctuation">-</span>0.000681  0.019616 <span class="token punctuation">-</span>0.026168  0.0076902016<span class="token punctuation">-</span>10<span class="token punctuation">-</span>19 <span class="token punctuation">-</span>0.002979  0.007846  0.003583 <span class="token punctuation">-</span>0.0022552016<span class="token punctuation">-</span>10<span class="token punctuation">-</span>20 <span class="token punctuation">-</span>0.000512 <span class="token punctuation">-</span>0.005652  0.001719 <span class="token punctuation">-</span>0.0048672016<span class="token punctuation">-</span>10<span class="token punctuation">-</span>21 <span class="token punctuation">-</span>0.003930  0.003011 <span class="token punctuation">-</span>0.012474  0.042096<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Series的corr方法用于计算两个Series中重叠的、非NA的、按索引对齐的值的相关系数。与此类似，cov用于计算协方差：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">244</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns<span class="token punctuation">[</span><span class="token string">'MSFT'</span><span class="token punctuation">]</span>.corr(returns<span class="token punctuation">[</span><span class="token string">'IBM'</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">244</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 0.49976361144151144In <span class="token punctuation">[</span><span class="token number">245</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns<span class="token punctuation">[</span><span class="token string">'MSFT'</span><span class="token punctuation">]</span>.cov(returns<span class="token punctuation">[</span><span class="token string">'IBM'</span><span class="token punctuation">]</span>)Out<span class="token punctuation">[</span><span class="token number">245</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">8.8706554797035462e-05</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为MSTF是一个合理的Python属性，我们还可以用更简洁的语法选择列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">246</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns.MSFT.corr(returns.IBM)Out<span class="token punctuation">[</span><span class="token number">246</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">0.49976361144151144</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一方面，DataFrame的corr和cov方法将以DataFrame的形式分别返回完整的相关系数或协方差矩阵：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">247</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns.corr()Out<span class="token punctuation">[</span><span class="token number">247</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           AAPL      GOOG       IBM      MSFTAAPL  1.000000  0.407919  0.386817  0.389695GOOG  0.407919  1.000000  0.405099  0.465919IBM   0.386817  0.405099  1.000000  0.499764MSFT  0.389695  0.465919  0.499764  1.000000In <span class="token punctuation">[</span><span class="token number">248</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns.cov()Out<span class="token punctuation">[</span><span class="token number">248</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           AAPL      GOOG       IBM      MSFTAAPL  0.000277  0.000107  0.000078  0.000095GOOG  0.000107  0.000251  0.000078  0.000108IBM   0.000078  0.000078  0.000146  0.000089MSFT  0.000095  0.000108  0.000089  0.000215<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用DataFrame的corrwith方法，你可以计算其列或行跟另一个Series或DataFrame之间的相关系数。传入一个Series将会返回一个相关系数值Series（针对各列进行计算）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">249</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns.corrwith(returns.IBM)Out<span class="token punctuation">[</span><span class="token number">249</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">AAPL    0.386817GOOG    0.405099IBM     1.000000MSFT    0.499764dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传入一个<code>DataFrame</code>则会计算按列名配对的相关系数。这里，我计算百分比变化与成交量的相关系数：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">:</span> returns.corrwith(volume)Out<span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">AAPL   -0.075565GOOG   -0.007067IBM    -0.204849MSFT   -0.092950dtype</span><span class="token punctuation">:</span> float64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传入axis=’columns’即可按行进行计算。无论如何，在计算相关系数之前，所有的数据项都会按标签对齐。<br>唯一值、值计数以及成员资格</p><p>还有一类方法可以从一维Series的值中抽取信息。看下面的例子：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">251</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj = pd.Series(<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个函数是unique，它可以得到Series中的唯一值数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">252</span><span class="token punctuation">]</span><span class="token punctuation">:</span> uniques = obj.unique()In <span class="token punctuation">[</span><span class="token number">253</span><span class="token punctuation">]</span><span class="token punctuation">:</span> uniquesOut<span class="token punctuation">[</span><span class="token number">253</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype=object)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回的唯一值是未排序的，如果需要的话，可以对结果再次进行排序（uniques.sort()）。相似的，value_counts用于计算一个Series中各值出现的频率：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">254</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj.value_counts()Out<span class="token punctuation">[</span><span class="token number">254</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">c    3a    3b    2d    1dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了便于查看，结果Series是按值频率降序排列的。value_counts还是一个顶级pandas方法，可用于任何数组或序列：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd.value_counts(obj.values<span class="token punctuation">,</span> sort=False)Out<span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">a    3b    2c    3d    1dtype</span><span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>isin用于判断矢量化集合的成员资格，可用于过滤Series中或DataFrame列中数据的子集：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">:</span> objOut<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    c1    a2    d3    a4    a5    b6    b7    c8    cdtype</span><span class="token punctuation">:</span> objectIn <span class="token punctuation">[</span><span class="token number">257</span><span class="token punctuation">]</span><span class="token punctuation">:</span> mask = obj.isin(<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">258</span><span class="token punctuation">]</span><span class="token punctuation">:</span> maskOut<span class="token punctuation">[</span><span class="token number">258</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0     True1    False2    False3    False4    False5     True6     True7     True8     Truedtype</span><span class="token punctuation">:</span> boolIn <span class="token punctuation">[</span><span class="token number">259</span><span class="token punctuation">]</span><span class="token punctuation">:</span> obj<span class="token punctuation">[</span>mask<span class="token punctuation">]</span>Out<span class="token punctuation">[</span><span class="token number">259</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token key atrule">0    c5    b6    b7    c8    cdtype</span><span class="token punctuation">:</span> object<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与isin类似的是Index.get_indexer方法，它可以给你一个索引数组，从可能包含重复值的数组到另一个不同值的数组：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">260</span><span class="token punctuation">]</span><span class="token punctuation">:</span> to_match = pd.Series(<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">261</span><span class="token punctuation">]</span><span class="token punctuation">:</span> unique_vals = pd.Series(<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span>)In <span class="token punctuation">[</span><span class="token number">262</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd.Index(unique_vals).get_indexer(to_match)Out<span class="token punctuation">[</span><span class="token number">262</span><span class="token punctuation">]</span><span class="token punctuation">:</span> array(<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表给出了这几个方法的一些参考信息。</p><p><img src="https://tvax3.sinaimg.cn/large/007mx13gly1guu7jqw8xoj60nk0580u802.jpg" alt="唯一值、值计数、成员资格方法"></p><p>有时，你可能希望得到DataFrame中多个相关列的一张柱状图。例如：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">263</span><span class="token punctuation">]</span><span class="token punctuation">:</span> data = pd.DataFrame(<span class="token punctuation">{</span><span class="token key atrule">'Qu1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                      <span class="token key atrule">'Qu2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token key atrule">.....</span><span class="token punctuation">:</span>                      <span class="token key atrule">'Qu3'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span>)In <span class="token punctuation">[</span><span class="token number">264</span><span class="token punctuation">]</span><span class="token punctuation">:</span> dataOut<span class="token punctuation">[</span><span class="token number">264</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    Qu1  Qu2  Qu30    1    2    11    3    3    52    4    1    23    3    2    44    4    3    4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将pandas.value_counts传给该DataFrame的apply函数，就会出现：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">In <span class="token punctuation">[</span><span class="token number">265</span><span class="token punctuation">]</span><span class="token punctuation">:</span> result = data.apply(pd.value_counts).fillna(0)In <span class="token punctuation">[</span><span class="token number">266</span><span class="token punctuation">]</span><span class="token punctuation">:</span> resultOut<span class="token punctuation">[</span><span class="token number">266</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    Qu1  Qu2  Qu31  1.0  1.0  1.02  0.0  2.0  1.03  2.0  2.0  0.04  2.0  0.0  2.05  0.0  0.0  1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里，结果中的行标签是所有列的唯一值。后面的频率值是每个列中这些值的相应计数。</p>]]></content>
      
      
      <categories>
          
          <category> 学习经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客出现的问题及处理方法</title>
      <link href="/2021/09/19/hexo-bo-ke-chu-xian-de-wen-ti-ji-chu-li-fang-fa/"/>
      <url>/2021/09/19/hexo-bo-ke-chu-xian-de-wen-ti-ji-chu-li-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="添加图片（添加线上图片）"><a href="#添加图片（添加线上图片）" class="headerlink" title="添加图片（添加线上图片）"></a>添加图片（添加线上图片）</h2><p>本地图片仍然无法添加进入图片,目前只能实现添加在线图片的功能。</p><p>首先选择一个图床（我选择的微博图床<em>微博图床</em>），上传图片获得链接，具体方法参考<a href="https://www.bilibili.com/read/cv6075030/">想方便快捷的分享/收藏图片？试试免费好用的微博图床</a>。</p><p>然后就可以通过<code>![图名](图片生成的URL链接)</code>的常见方式直接插入在线图片</p><p>例如我的网站logo图片</p><p><img src="https://tva3.sinaimg.cn/large/007mx13gly1gult8rrmexj608c08cjra02.jpg" alt="图名"></p><p>就可以直接通过如下指令直接插入</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token tag">!</span><span class="token punctuation">[</span>图名<span class="token punctuation">]</span>(https<span class="token punctuation">:</span>//tva3.sinaimg.cn/large/007mx13gly1gult8rrmexj608c08cjra02.jpg)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode加C++环境下编译语言遇到的问题以及解决方法</title>
      <link href="/2021/09/19/vscode-jia-c-huan-jing-xia-bian-yi-yu-yan-yu-dao-de-wen-ti-yi-ji-jie-jue-fang-fa/"/>
      <url>/2021/09/19/vscode-jia-c-huan-jing-xia-bian-yi-yu-yan-yu-dao-de-wen-ti-yi-ji-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="中文乱码问题"><a href="#中文乱码问题" class="headerlink" title="中文乱码问题"></a>中文乱码问题</h2><p>运行测试文件<strong>test.cpp</strong>，存在中文乱码的问题</p><p><strong>test.cpp</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"> <span class="token comment">#include&lt;iostream&gt;</span> using namespace std; int main()<span class="token punctuation">{</span>int num;cout&lt;&lt;"请输入一个整型数：";cin<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span>num;cout&lt;&lt;"八进制数是："&lt;&lt;oct&lt;&lt;num&lt;&lt;endl;cout&lt;&lt;"十进制数是："&lt;&lt;dec&lt;&lt;num&lt;&lt;endl;cout&lt;&lt;"十六进制数是："&lt;&lt;hex&lt;&lt;num&lt;&lt;endl;return 0;<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方法：点击vscode右下角的UTF-8，出现“选择操作”界面，选择“通过编码重新打开”，再输出“gbk”，再进行编译即可。（注意更改后保存）</p>]]></content>
      
      
      <categories>
          
          <category> 学习经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode配置C++环境</title>
      <link href="/2021/09/18/vscode-pei-zhi-c-huan-jing/"/>
      <url>/2021/09/18/vscode-pei-zhi-c-huan-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="安装VSCode与C"><a href="#安装VSCode与C" class="headerlink" title="安装VSCode与C++"></a>安装VSCode与C++</h2><p>参考<a href="https://blog.csdn.net/Zhouzi_heng/article/details/115014059">【c++】VSCode配置 c++ 环境（小白教程））</a></p><h2 id="VSCode配置c"><a href="#VSCode配置c" class="headerlink" title="VSCode配置c++"></a>VSCode配置c++</h2><p>网上有许多关于vscode下c++配置，一种是配置文件的方法，一种是添加插件直接配置的方法</p><h3 id="配置文件法"><a href="#配置文件法" class="headerlink" title="配置文件法"></a>配置文件法</h3><p><img src="https://tva2.sinaimg.cn/large/007mx13gly1gul7mhhg36j60k8087wfz02.jpg" alt="第一步"><br><img src="https://tva4.sinaimg.cn/large/007mx13gly1gul7mqrtwgj60c8047js602.jpg" alt="第二步"></p><h3 id="配置插件法（两种）"><a href="#配置插件法（两种）" class="headerlink" title="配置插件法（两种）"></a>配置插件法（两种）</h3><p>可选两种：</p><p><em>Code runner</em> （右上角箭头运行）</p><p><em>C/C++ Compile Run</em>（F6运行）</p><p>参考<a href="https://zhuanlan.zhihu.com/p/77645306">windows 10上使用vscode编译运行和调试C/C++</a></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="对应测试文件"><a href="#对应测试文件" class="headerlink" title="对应测试文件"></a>对应测试文件</h3><p><strong>test.cpp</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"> <span class="token comment">#include&lt;iostream&gt;</span> using namespace std; int main()<span class="token punctuation">{</span>int num;cout&lt;&lt;"请输入一个整型数：";cin<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span>num;cout&lt;&lt;"八进制数是："&lt;&lt;oct&lt;&lt;num&lt;&lt;endl;cout&lt;&lt;"十进制数是："&lt;&lt;dec&lt;&lt;num&lt;&lt;endl;cout&lt;&lt;"十六进制数是："&lt;&lt;hex&lt;&lt;num&lt;&lt;endl;return 0;<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插件法可以直接在vscode中查看编译结果</p><p>配置文件的方法需要再下载插件<em>Code Runner</em>运行生成的exe文件，配置成功后的运行文件可在输入数字后反应。（存在中文乱码的问题需要处理）</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客主题之hexo-theme-matery的介绍（转载于blinkfox）</title>
      <link href="/2021/09/18/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/"/>
      <url>/2021/09/18/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-theme-matery"><a href="#hexo-theme-matery" class="headerlink" title="hexo-theme-matery"></a>hexo-theme-matery</h1><blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="转载说明"><a href="#转载说明" class="headerlink" title="转载说明"></a>转载说明</h2><p>本文作者为<a href="https://blinkfox.github.io/about/">blinkfox</a>,转载本文仅为个人学习参考，本文为博客小白，如有做的不对的地方，请大佬指出，必定及时修正。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li></ul><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p>感谢下面列出的贡献者，没有他们，hexo-theme-matery 不会这么完美。</p><ul><li><a href="https://github.com/HarborZeng">@HarborZeng</a></li><li><a href="https://github.com/shw2018">@shw2018</a></li><li><a href="https://github.com/L1cardo">@L1cardo</a></li><li><a href="https://github.com/Five-great">@Five-great</a></li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>本主题<strong>推荐你使用 Hexo 5.0.0 及以上的版本</strong>。如果，你已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了，建议你将 Hexo 升级到最新稳定的版本。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式  </li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Music        <span class="token key atrule">url</span><span class="token punctuation">:</span> /music        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;% if (theme.socialLink.github) { %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= theme.socialLink.github %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否在首页显示音乐</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span>         <span class="token comment"># 非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment"># require music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment"># require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841</span>     <span class="token comment"># require song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span>       <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 列表默认折叠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p><p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 0%<span class="token punctuation">,</span> #0f9d58 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本变更记录"><a href="#版本变更记录" class="headerlink" title="版本变更记录"></a>版本变更记录</h2><p>参见 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/master/README.md">CHANGELOG.md</a></p>]]></content>
      
      
      <categories>
          
          <category> 转载内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github+matery的个人博客搭建（补充）</title>
      <link href="/2021/09/18/hexo-github-matery-de-ge-ren-bo-ke-da-jian-bu-chong/"/>
      <url>/2021/09/18/hexo-github-matery-de-ge-ren-bo-ke-da-jian-bu-chong/</url>
      
        <content type="html"><![CDATA[<p>最近想做一下自己的博客内容，记录一下平时的学习。参考了 <a href="https://zhuanlan.zhihu.com/p/111614119">Github + Hexo 搭建个人博客超详细教程</a> 进行博客搭建。但是出现了一些由于版本更新问题所以在这里记录一下，刚开始写博客，解决方法不一定正确。</p><h2 id="博客根目录下配置文件-config-yml的由于版本更新出现的问题"><a href="#博客根目录下配置文件-config-yml的由于版本更新出现的问题" class="headerlink" title="博客根目录下配置文件_config.yml的由于版本更新出现的问题"></a>博客根目录下配置文件_config.yml的由于版本更新出现的问题</h2><h3 id="配置文件-config-yml最后几行的原始内容"><a href="#配置文件-config-yml最后几行的原始内容" class="headerlink" title="配置文件_config.yml最后几行的原始内容"></a>配置文件_config.yml最后几行的原始内容</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  type<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Github-Hexo-搭建个人博客超详细教程-中对于配置文件-config-yml最后几行的修改"><a href="#Github-Hexo-搭建个人博客超详细教程-中对于配置文件-config-yml最后几行的修改" class="headerlink" title="Github + Hexo 搭建个人博客超详细教程 中对于配置文件_config.yml最后几行的修改"></a><a href="https://zhuanlan.zhihu.com/p/111614119">Github + Hexo 搭建个人博客超详细教程</a> 中对于配置文件_config.yml最后几行的修改</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>panakot/panakot.github.io.git（你的github.io地址）  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="我对配置文件-config-yml最后几行的修改"><a href="#我对配置文件-config-yml最后几行的修改" class="headerlink" title="我对配置文件_config.yml最后几行的修改"></a>我对配置文件_config.yml最后几行的修改</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com<span class="token punctuation">:</span>panakot/panakot.github.io.git（你的github.io地址）  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="博客主题matery的配置"><a href="#博客主题matery的配置" class="headerlink" title="博客主题matery的配置"></a>博客主题matery的配置</h2><p>最好直接参考原主题开发者的在个人博客中的使用说明，matery的作者闪烁之狐的相关说明网址可参考<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">Hexo博客主题之hexo-theme-matery的介绍</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
